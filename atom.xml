<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>斜杠Allen</title>
  <icon>https://www.gravatar.com/avatar/c997f4d34dadfcadb2a4671904031f68</icon>
  <subtitle>一位喜欢写作的Coding，目前在践行GTD、演讲、阅读、跑步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cryallen.com/"/>
  <updated>2020-04-20T04:36:07.317Z</updated>
  <id>http://cryallen.com/</id>
  
  <author>
    <name>Allen</name>
    <email>cr330326@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java虚拟机的一些理解</title>
    <link href="http://cryallen.com/2020/01/13/2020-01-13-javajvm/"/>
    <id>http://cryallen.com/2020/01/13/2020-01-13-javajvm/</id>
    <published>2020-01-13T13:37:10.000Z</published>
    <updated>2020-04-20T04:36:07.317Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道Java是目前用户最多，使用范围最广的软件的开发技术之一。Java的技术体系可以分为以下三个方面组成：</p><ul><li>Java虚拟机(JVM)</li><li>Java API 接口文档</li><li>Java 编程语言以及许多Java框架</li></ul><p>其中JVM是打造Java跨平台的关键，但相比Java API接口文档和Java本身编程语言，Java虚拟机相关的资料则显得异常匮乏。Java虚拟机隐藏了底层技术的复杂性以及机器与操作系统的差异性，而为千万开发者建立起使用方便的跨平台开发框架，哪怕运行程序的物理机器的情况千差万别，但Java虚拟机则在这千差万别的物理机上建立了统一的运行平台，从而使得开发者只需聚焦他们的业务程序。</p><p>正是这个跨平台机制，实现了再任何一台虚拟机上编译的程序都能在任何一台虚拟机上正常运行，这一极大优势使得Java应用的开发比传统的C/C++应用开发来的更加高效，也导致Java技术栈能力圈越来越广。也正好是Java虚拟机良好的封装，作为开发者如果仅仅限于使用方便的API上，而不是去理解Java世界里真正的核心是什么，那么能力其实是难以进一步提高的，因此去了解Java虚拟机来龙去脉是很有必要的。</p><h3 id="思维导图">思维导图</h3><p><img src="/2020/01/13/2020-01-13-javajvm/image1.png"></p><p>简单做个思维导图，这篇文章主要讲的正如图中所示几个方面：JVM简介、JVM内存运行机制、虚拟机类。</p><h3 id="jvm简介">JVM简介</h3><p>Java为何能获得如此广泛的应用，除了它是拥有一门结构严谨、面向对象的编程语言之外，还有一点是脱离了硬件平台的束缚，真正实现了「一次编写，到处运行」的局面，并且提供了一个相对安全的内存管理和访问机制，避免了绝大部分的内存泄漏和指针越界问题，这些好处就是统一放在Java虚拟机中。</p><p><strong>发展历史</strong></p><p>从1996年Sun公司发布的JDK1.0版本以来，最早期是Sun Classic VM，到大名鼎鼎的HotSpot VM，然后进入到移动设备的Google Android Dalvik VM，还有其他VM，包括Microsoft JVM等等。其中最有名莫过于HotSpot VM和Google Android Dalvik VM，HotSpot VM是当前使用范围最广的Java虚拟机，它的热点代码探测技术，它在优化程序的响应时间和最佳执行性能获得平衡，都使得它声名大噪。</p><p>而Google Android Dalvik VM则是因为过去10年移动互联网大热，搭载Android系统的移动设备几十亿台迅猛发展。本质上说 Dalvik VM并不是真正算的上一个Java虚拟机，因为它没有遵循Java虚拟机规范，不能执行Java的Class文件，但是它的Dex文件可以通过Class 文件转化而来，使用Java语法编写应用程序，可以直接使用大部分的Java API。</p><p><strong>做什么</strong></p><p>Java虚拟机主要能做的是提供一种跨平台开发框架，让使用者一次编写的程序，就能在各个平台上到处运行，使得开发者与硬件平台脱离，并且提供的自动内存管理机制和运行时编译优化，进而使得应用Java应用随着运行时间增加而获得更高的性能。</p><h3 id="jvm内存运行机制">JVM内存运行机制</h3><p><strong>运行时数据区域</strong></p><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，主要包括以下几个运行时区域：</p><p>1，程序计数器，主要是当前线程所执行的字节码的行号指示器。 2，Java虚拟机栈，Java中的每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。我们常见的StackOverflowError错误，就是常见栈深度大于虚拟机所允许的深度。 3，本地方法栈，执行的是虚拟机使用到Nativie方法服务。 4，Java堆，也叫Java Heap，这个是Java虚拟机所管理的内存中最大的一块，Java堆是被所有线程共享的一块内存区域，在虚拟机启动时就创建了。几乎所有的对象实例都在这里分配内存。 5，方法区。这个是主要是用以虚拟机加载类信息、常量、静态变量、编译之后的代码等等。</p><p><strong>内存管理方式</strong></p><p>要知道Java是以什么闻名吗，当然是Java虚拟机的内存管理，也就是垃圾收集(GC)，它的内存动态分配和内存回收技术已经相当成熟，看起来这么完善了，为何还要去学习Java虚拟机，主要目的是为了在排查各种内存溢出、内存泄漏问题时，我们可以快速定位出问题，并且优化和监控。</p><p>在实例对象时，如何确定对象是否已死，有两种方式介绍下：</p><p>1，引用计数算法。给实例对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器值就减1。这个引用计数算法虽然判断效率很高，但是有个问题是它很难解决对象之间的相互循环引用问题。</p><p>2，可达分析算法。这个算法思路主要是判定对象是否存活，从GC Roots的对象作为起点，从这个节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。这就引出了Java中的强引用、软引用、弱引用、虚引用这四个区别。</p><p>说到垃圾收集算法，至于如何实现，大家不妨有空去看看源码，这里主要介绍算法的思想：</p><p>1，标记-清除算法。这里就包含两个阶段，“标记”和“清除”，首先标记出所需要回收的对象，在标记完成后统一回收所有被标记的对象。这个算法的不足之点在于效率问题，另一个是空间问题，标记清除之后会产生大量的不连续内存碎片，因为碎片，会容易引发另一次的垃圾收集动作。</p><p>2，复制算法。这个就解决碎片的问题，它将可用内存按容量划分大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把使用过的内存空间一次清理掉，但这个算法的问题是容易造成内存浪费。</p><p>3，标记-整理算法。这个算法就结合前面两个算法的特点，避免它们的弊端，先标记，但是后续不是直接对可回收对象进行清理，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p><p>4，分代收集算法。当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种主要根据对象存活周期的不同将内存划分几块。一般把Java堆分为新生代和老年代，这样就根据各个年代的特点去采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p><p>至于内存分配和回收策略，主要是根据分代收集算法，一般对象优先在Eden分配，如果是大实例对象的话，则直接进入到老年代，还有长期存活的对象将进入老年代。</p><h3 id="虚拟机类">虚拟机类</h3><p>Java内存的自动管理机制虽是举世闻名，但是另外一个机制也是不甘落后，那就是类加载机制。在Java语言中，类型的加载、连接和初始化过程都是在程序运行期间完成的，虽然这种方式会使得类加载稍微增加一点性能开销，但是给Java应用程序提供高度的灵活性，比如依赖运行期动态加载和动态链接这个特点实现的。这个特点在OSGi技术中体现的淋漓尽致。</p><p>类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。一般在遇到new、getstatic、putstatic和invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。在加载阶段，虚拟机主要完成以下3件事：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.class对象，作为方法区这个类的各种数据的访问入口。</li></ul><p>而对类加载器，需要重点去了解它的双亲委派模型，从Java虚拟机角度来看，只存在两种不同的类加载器，一种是启动类加载器(Bootstarp ClassLoader)，这个类加载器是C++语言实现的，是虚拟机自身的一部分，另一个就是所有其他的类加载器，这些类加载器都由Java语言实现，独立于虚拟机外部，并且全部继承自抽象类java.lang.ClassLoader。</p><p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传递到顶的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。这个双亲委派模式带来的一个优势会先检查父加载器是否已经被加载过，从这点衍生出Java世界的很多伟大技术出来，比如代码热替换，模块热部署，就是即插即用。</p><h3 id="小结">小结</h3><p>通过了解Java虚拟机，对于Java虚拟机的运行机制有一定的了解，当然关于Java虚拟机内容还有很多要挖掘，比如性能调优参数、调度、垃圾回收算法实现方式等等，对于作为一个Android开放人员来说，学习Java虚拟机更多是为了丰富自己的专业技术维度，扩展边界。</p>]]></content>
    
    <summary type="html">
    
      探究下Java虚拟机底层密码是什么，好有助于日常工作排解和定位问题。
    
    </summary>
    
    
      <category term="java" scheme="http://cryallen.com/categories/java/"/>
    
    
      <category term="java" scheme="http://cryallen.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2019，挑战和突破的一年</title>
    <link href="http://cryallen.com/2020/01/06/2020-01-06-2019review/"/>
    <id>http://cryallen.com/2020/01/06/2020-01-06-2019review/</id>
    <published>2020-01-06T08:01:47.000Z</published>
    <updated>2020-04-20T04:32:37.465Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/01/06/2020-01-06-2019review/image1.jpeg"></p><h3 id="年度梦想版">2019年度梦想版</h3><p><img src="/2020/01/06/2020-01-06-2019review/image2.jpeg"></p><h3 id="年度目标回顾">2019年度目标回顾</h3><ol type="1"><li>打造第二收入，专注运营个人知识星球专栏，提供内容：个人效能、跑步知识、阅读感悟、财商学习（核心动机：成为一个能给他人带来价值的人）。</li><li>专注财商教育，投资知识体系搭建，一周三本书，线上玩创富读书会，线下玩现金流游戏（核心动机：致力于当一个终身学习的人）。</li><li>专注跑步，一周3-4次跑步，年度跑步里程达到500公里 （核心动机：在60岁时保持完美身材）。</li><li>写作日更，输出在微信公众号上，每篇文章保证300字以上（核心动力：建立个人品牌，扩大影响力） 。</li></ol><h3 id="思维导图">思维导图</h3><p><img src="/2020/01/06/2020-01-06-2019review/image3.png"></p><p>一直以来，保持这么一个习惯，会在每年元旦时，给自己过去一年的生活经历进行简单的总结，这样总结回顾持续已经进行6年，今年则是第7年了。</p><p>不管如何，在辞旧迎新时刻里，人们对于过去一年时光总要进行适当的回顾。不管过去一年里遇到顺心的事、糟心的烦、开心时刻、悲伤往事，这一切所经历的最终会变成你人生旅程里某一个记忆点。因为过去时光已经一去不复返了，懊悔也好、遗憾也好，怎么说都已经是回不来了，虽然说回不来了，那也不能抛之脑后，对于过往一切还是需要记录点什么。显然，人类发明的文字书写系统，就是一个很好地记录手段，你可以利用其中的书写工具来帮助你，以记录那一去不复返的时光。</p><p>纵观过去几年的回顾总结，会发现这么一个现象，那就是每年的年度目标是在逐渐减少的，前面几年一般会把年度目标待办事项罗列满满的，生怕不够，后来年岁渐长之后，就明白了人的精力是有限，不可能既能做这个事情，又能去做另外一个事情，这就犹如逻辑学里的矛盾律，不可能既是A又不是A。其实一年中能完成立的Flag就不错了，何况是多件，这也是为何Facebook创始人扎克伯格会以每年做一件事而闻名，因为真正优秀顶尖的人早就知道这个道理。</p><p>这些都是年纪小的时候需要付出的学费，学费一交，后续就学乖了。因此，因此在2019年，我的年度目标主要聚焦在两个方向上，「突破和挑战」，这也是根据过去一年所发生所经历的生活旅程，总结送给自己的五个字。</p><p>接下去就根据这两个方向，进行详细的回顾，突破点到底体现在哪里，挑战又有什么，突破的地方有两点：第二收入和财商教育，挑战的点有两个方面：跑步和写作。</p><h3 id="第二收入">第二收入</h3><p>突破点在于搭建了一个付费专栏，踏出了尝试创造第二收入的第一步，因为这些收入来源恰好是根据自身生活学习习惯相结合。我们知道现在绝大多数人的收入来源主要靠工资，可以简称「第一收入」，那么「第二收入」则是除了第一收入之外的，在不损害第一收入利益前提下，而进行探索的。</p><p>就我自己所推崇的模式是以你花一次时间打造的产品，可以无限次售卖，自动创造被动收入，特别是需要善于利用互联网工具来帮助自己达到目的，比如会员订阅流程就是该模式下的典型代表，还有可能你的在线课程、语音产品、付费专栏等等知识付费产品，都符合这个模式。</p><p>而这一年里，我自己则是在知识星球上创建了一个付费专栏，主要目的是想把日常所学的知识，所经历的感悟，无论是阅读、个人效能、跑步、财商学习、社群沟通所获、优秀的人对话感悟，每天不断在上面进行输出。本意是提倡参加这个专栏的小伙伴进行一起学习精进，把各自生活经历书写在上面，一起记录点滴和进步，因为一群人一起学习是最高效的学习方式。</p><p>当然对于知识星球的运营，自己这一年下来，运营不佳，具体什么硬核内容输出，定位是否准确问题，专栏的名称叫做「第二身份试验场」，第二身份是希望每个人都能去追求的，那到底这个专栏产生的意义和价值在哪里，通过这一年的运营下来，到现在我才明确。就是希望能参与进去的人，能利用这个专栏平台把自身第二身份探索点滴记录下来，形成一个生活行动轨迹，比如经过一年时间践行之后，然后可以在岁末时候看看的成果物有哪些输出，这反应到人们心理则叫做「进步」，换句话说，收获满满地的成就感。</p><p>对于2020年，知识星球专栏会投入更多精力和时间去好好运营，这次会聚焦内容输出了，具体输出什么内容，等之后时间推出的2020新年计划里阐述。</p><p>因为过去一年通过刻意练习写作能力，在写的文章中收获了一定的写作打赏费用，这也是额外收入一种。在来年，还会开始用自己认知的变现，因为基于前期5年学习进阶基础，我觉得我自己的基本认知体系框架已经搭建好，想进一步发展，那就需要往外推出，看看其他人的反馈，到底好还是不好，增加多渠道变现。况且昨天刚发了一条朋友圈，2020年的目标是想买入一套房，利用自己的能力去尽可能赚取更多的收入，提供更多的价值输出，是光明正大的一条途径。</p><h3 id="财商教育">财商教育</h3><p>财商教育是2019年里专注学习的目标，主要目的是想搭建自我投资知识体系，通过的途径则是阅读输入、线上跟随一群人进行创富读书会，线下则去玩现金流游戏和线下读书会。</p><p>为何财商水平提升显得那么迫切，在年中的时候我才想明白，主要目的是为了养老准备。不知是否有人想过这么一个问题，你这一生想要赚多少钱，你这一生需要花费多少钱，你这一生实际又能赚多少钱呢？我的答案如图： 插入一张图片</p><p>因此，想要靠一份死工资收入想达到以上水平，这辈子肯定是无望。如果收入水平是以线性增长也不现实，我们需要学会以指数增长为目标导向，然后接受一种叫做「慢慢变富」的概念，要知道巴菲特老先生，他的绝大多数收入比例是在他50岁以后，特别是他最近十年以来，投资基数越大，指数收入增长就可观。</p><p>财商教育的理解在我自己看来，是一种基于长期思维，以终为始导向的终身学习过程。试想一下未来30年里，你靠什么养老，为什么要思考未来30年之后的事情，因为你会变老，你靠什么决定你未来30年的成败，主要是财商认知水平来决定，因为这一过程可以持续30年进行学习和实践的。</p><p>如果此刻说想为自己养老做准备，正好昨天在一个朋友聊天沟通中谈到的，那就是此刻培养自己合理的消费观，避免那些冲动不合理的消费行为，延迟自我消费满足，增强储蓄能力，当下开头能做的是银行现金定存，可能是一个不错的选择。</p><h3 id="专注跑步">专注跑步</h3><p>现在打开我的悦跑圈APP，查看年度跑步里程，发现不到100公里。很显然这个目标没达成，年度目标规划的是500公里，完成都不到1/5，现在回想下为何有如此大的差距呢，从深层次来看，还是对自己的健康身材漠不关心。或许因为日常生活没经历过健康痛处，仅仅知道健康是很重要，但没有把优先级排在前列，很多时候会为了写作让步，并且运动时间不规律，生活作息也是不规律。</p><p>本来以为自我生物钟调整能力很强，但是通过记录睡眠数据之后，发现有两个特征很明显：晚睡和晚起。晚睡基本是12点以后，基本入睡时间点在12点30分-01点，然后早上起床时间段为8点，睡眠时间是充足了，但是运动时间则没有了。</p><p>一周3-4次跑步时刻，基本能做到每周1次跑步，每次能有5公里跑步距离就不错了，包括践行的跑步姿势、跑步数据、参与的跑步活动都比往年都减少了，因此这点是需要2020年里重点改善的一块。</p><h3 id="写作日更">写作日更</h3><p>要说在2019年里跑步目标没达到有遗憾之外，那么完成写作日更目标则是自豪感十足。发起这个每天微信公众号文章写作日更对我来说是个十足挑战，因为你会面临着写作内容枯竭、写作手法固定、写作风格转换等问题，并且得保证每天有写作输出，能日复一日持续地去践行，本身就是对稳定性考验。</p><p>因此，得想清楚为何要写作日更，写作日更目的是为了什么。现在回顾起来，总结有两点：刻意练习逻辑思维能力和建立个人品牌影响力。</p><p>刻意练习逻辑思维能力，通过书写的方式，可以很好地把你平时思绪给汇聚在一起，然后分析总结输出，形成自我思考过程。然后通过微信公众号这个渠道，表达了你对某个事件的看法，传递出你自己思考的观点，让更多知道了你所思所想，那么在此过程中，自然而然会有个人影响力地传递。时间久了之后，一些人的印象中就知道某个作者是对某个领域有比较深的理解，因为它之前输出了那么多的文章来表达，写作出来的文章也是很好地验证凭据。</p><p>当然，还会有写作收获，关于这点我会再写一篇文章来总结过去一年通过写作之路讲讲自己的收获，这点对于我自己来说是一个壮举，也是未来可以向身边小伙伴吹牛逼的资本，就冲能吹牛逼，自己无论如何也会坚持完成写作日更，因为人都喜欢被别人夸赞的。</p><p>但在来年自己会再接再厉，但不去做写作日更了，那确实太耗精力和心力，写作频率固化为每周一次输出。当然微信公众号会持续经营，可能会想着其他内容形式输出，敬请期待。</p><blockquote><p>如果说过去一年里，自己深刻的一件事，那就是「写作日更」。毕竟持续写了一年，写出自己逐渐形成的知识体系框架，然后也是写作，让我自己独立思考能力获得进一步的解放。涉及了一些知识点和面，可能平时自己都不会去看的书，因为写作而结缘，包括一些摄影书籍、财务会计书籍等，这些工具技能书，只有真正用到之后才会去阅读。最重要的一个收获是，就是写出了自己个人成长小册，到时候通过梳理过去一年写作内容，整理一本杂志手册出来，并与大家分享。</p></blockquote><p><strong>年终复盘很有必要，就是看看自己哪里表现的好「得瑟下」，表现的不好，督促自己去完善，因为一切都是为了遇见更美好的将来而努力着。</strong></p><p><strong>2020年，聚焦「刻意打造良好习惯」主题</strong></p>]]></content>
    
    <summary type="html">
    
      简要回顾一下过去一年发生的人和事。
    
    </summary>
    
    
      <category term="Personal" scheme="http://cryallen.com/categories/Personal/"/>
    
    
      <category term="个人成长" scheme="http://cryallen.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>解读 Android TTS 语音合成播报</title>
    <link href="http://cryallen.com/2019/05/21/2019-05-21-AndroidTTS/"/>
    <id>http://cryallen.com/2019/05/21/2019-05-21-AndroidTTS/</id>
    <published>2019-05-21T14:24:48.000Z</published>
    <updated>2020-04-20T04:13:53.890Z</updated>
    
    <content type="html"><![CDATA[<p>随着从事 Android 开发年限增加，负责的工作项目也从应用层开发逐步过渡到 Android Framework 层开发。虽然一开始就知道 Android 知识体系的庞大，但是当你逐渐从 Application 层向 Framework 层走的时候，你才发现之前懂得认知真是太少。之前更多打交道的 Activity 和 Fragment ，对于 Service 和 Broadcast 涉及的很少，更多注重的是界面的布局、动画、网络请求等，虽然走应用开发的话，后期会关注架构、性能优化、Hybrid等，但是逐渐接触 Framework 层相关模块时候，发现里面的知识点各种错综复杂，就好比讲讲今天分享的主题是 <strong>Android TTS</strong> 。</p><p>话不多说，先来张图，分享大纲如下：</p><figure><img src="/2019/05/21/2019-05-21-AndroidTTS/image1.png" alt="大纲"><figcaption>大纲</figcaption></figure><p>之前受一篇文章启发，说的是如何讲解好一个技术点知识，可以分为两部分去介绍：外部应用维度和内部设计维度，基本从这两个角度出发，可以把一个技术点讲的透彻。同样，我把这种方式应用到写作中去。</p><h2 id="外部应用维度">外部应用维度</h2><h3 id="什么是-tts">什么是 TTS</h3><p>在 Android 中，TTS全称叫做 Text to Speech，从字面就能理解它解决的问题是什么，把文本转为语音服务，意思就是你输入一段文本信息，然后Android 系统可以把这段文字播报出来。这种应用场景目前比较多是在各种语音助手APP上，很多手机系统集成商内部都有内置文本转语音服务，可以读当前页面上的文本信息。同样，在一些阅读类APP上我们也能看到相关服务，打开微信读书，里面就直接可以把当前页面直接用语音方式播放出来，特别适合哪种不方便拿着手机屏幕阅读的场景。</p><h3 id="tts-技术规范">TTS 技术规范</h3><p>这里主要用到的是TextToSpeech类来完成，使用TextToSpeech的步骤如下：</p><blockquote><p>创建TextToSpeech对象，创建时传入OnInitListener监听器监听示范创建成功。 设置TextToSpeech所使用语言国家选项，通过返回值判断TTS是否支持该语言、国家选项。 调用speak()或synthesizeToFile方法。 关闭TTS，回收资源。</p></blockquote><p><strong>XML文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/edit_text1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"杭州自秦朝设县治以来已有2200多年的历史，曾是吴越国和南宋的都城。因风景秀丽，素有“人间天堂”的美誉。杭州得益于京杭运河和通商口岸的便利，以及自身发达的丝绸和粮食产业，历史上曾是重要的商业集散中心。"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/btn_tts1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"TTS1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/edit_text2"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"伊利公开举报原创始人郑俊怀:多名高官充当保护伞  北京青年报  2018-10-24 12:01:46  　　10月24日上午，伊利公司在企业官方网站发出举报信，公开举报郑俊怀等人，声称郑俊怀索要巨额犯罪所得不成，动用最高检某原副检察长等人施压，长期造谣迫害伊利，多位省部级、厅局级领导均充当郑俊怀保护伞，人为抹掉2.4亿犯罪事实，运作假减刑，14年来无人敢处理。"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/btn_tts2"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"TTS2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/btn_cycle"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"Cycle TTS"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/btn_second"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"Second TTS"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Activity文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TtsMainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>,<span class="title">TextToSpeech</span>.<span class="title">OnInitListener</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TtsMainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADNUM = <span class="number">100</span>; <span class="comment">// 测试用的线程数目</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> EditText mTestEt1;</span><br><span class="line"><span class="keyword">private</span> EditText mTestEt2;</span><br><span class="line"><span class="keyword">private</span> TextToSpeech mTTS;  <span class="comment">// TTS对象</span></span><br><span class="line"><span class="keyword">private</span> XKAudioPolicyManager mXKAudioPolicyManager;</span><br><span class="line"><span class="keyword">private</span> HashMap mParams = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">mTestEt1 = (EditText) findViewById(R.id.edit_text1);</span><br><span class="line">mTestEt2 = (EditText) findViewById(R.id.edit_text2);</span><br><span class="line"></span><br><span class="line">findViewById(R.id.btn_tts1).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">findViewById(R.id.btn_tts2).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">findViewById(R.id.btn_cycle).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">findViewById(R.id.btn_second).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">mTTS = <span class="keyword">new</span> TextToSpeech(<span class="keyword">this</span>.getApplicationContext(),<span class="keyword">this</span>);</span><br><span class="line">mXKAudioPolicyManager = XKAudioPolicyManager.getInstance(<span class="keyword">this</span>.getApplication());</span><br><span class="line">mParams = <span class="keyword">new</span> HashMap();</span><br><span class="line">mParams.put(TextToSpeech.Engine.KEY_PARAM_STREAM, <span class="string">"3"</span>); <span class="comment">//设置播放类型（音频流类型）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (status == TextToSpeech.SUCCESS) &#123;</span><br><span class="line"><span class="keyword">int</span> result = mTTS.setLanguage(Locale.ENGLISH);</span><br><span class="line"><span class="keyword">if</span> (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) &#123;</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"数据丢失或不支持"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> id = v.getId();</span><br><span class="line"><span class="keyword">switch</span> (id)&#123;</span><br><span class="line"><span class="keyword">case</span> R.id.btn_tts1:</span><br><span class="line">TtsPlay1();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> R.id.btn_tts2:</span><br><span class="line">TtsPlay2();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> R.id.btn_second:</span><br><span class="line">TtsSecond();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> R.id.btn_cycle:</span><br><span class="line">TtsCycle();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TtsPlay1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mTTS != <span class="keyword">null</span> &amp;&amp; !mTTS.isSpeaking() &amp;&amp; mXKAudioPolicyManager.requestAudioSource()) &#123;</span><br><span class="line"><span class="comment">//mTTS.setOnUtteranceProgressListener(new ttsPlayOne());</span></span><br><span class="line">String text1 = mTestEt1.getText().toString();</span><br><span class="line">Log.d(TAG, <span class="string">"TtsPlay1-----------播放文本内容："</span> + text1);</span><br><span class="line"><span class="comment">//朗读，注意这里三个参数的added in API level 4   四个参数的added in API level 21</span></span><br><span class="line">mTTS.speak(text1, TextToSpeech.QUEUE_FLUSH, mParams);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TtsPlay2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mTTS != <span class="keyword">null</span> &amp;&amp; !mTTS.isSpeaking() &amp;&amp; mXKAudioPolicyManager.requestAudioSource()) &#123;</span><br><span class="line"><span class="comment">//mTTS.setOnUtteranceProgressListener(new ttsPlaySecond());</span></span><br><span class="line">String text2 = mTestEt2.getText().toString();</span><br><span class="line">Log.d(TAG, <span class="string">"TtsPlay2-----------播放文本内容："</span> + text2);</span><br><span class="line"><span class="comment">// 设置音调，值越大声音越尖（女生），值越小则变成男声,1.0是常规</span></span><br><span class="line">mTTS.setPitch(<span class="number">0.8f</span>);</span><br><span class="line"><span class="comment">//设定语速 ，默认1.0正常语速</span></span><br><span class="line">mTTS.setSpeechRate(<span class="number">1f</span>);</span><br><span class="line"><span class="comment">//朗读，注意这里三个参数的added in API level 4   四个参数的added in API level 21</span></span><br><span class="line">mTTS.speak(text2, TextToSpeech.QUEUE_FLUSH, mParams);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TtsSecond</span><span class="params">()</span></span>&#123;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(TtsMainActivity.<span class="keyword">this</span>,TtsSecondAcitivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TtsCycle</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> millis1 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADNUM; i++) &#123;</span><br><span class="line">Thread tempThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable(i, THREADNUM));</span><br><span class="line">tempThread.setName(<span class="string">"线程"</span> + i);</span><br><span class="line">tempThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> millis2 = System.currentTimeMillis();</span><br><span class="line">Log.d(TAG, <span class="string">"循环测试发音耗费时间："</span> + (millis2 - millis1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onStart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onStop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onDestroy();</span><br><span class="line">shutDown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mTTS != <span class="keyword">null</span>)&#123;</span><br><span class="line">mTTS.stop();</span><br><span class="line">mTTS.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mXKAudioPolicyManager != <span class="keyword">null</span>)&#123;</span><br><span class="line">mXKAudioPolicyManager.releaseAudioSource();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义线程可执行处理</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i; <span class="comment">// 第几个线程</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threadNum; <span class="comment">// 总共创建了几个线程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> threadNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.i = i;</span><br><span class="line"><span class="keyword">this</span>.threadNum = threadNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"在主线程中执行index："</span> + i + <span class="string">",线程总数:"</span> + threadNum);</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"TtsPlay1 index："</span> + i);</span><br><span class="line">TtsPlay1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"TtsPlay2 index："</span> + i);</span><br><span class="line">TtsPlay2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttsPlayOne</span> <span class="keyword">extends</span> <span class="title">UtteranceProgressListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(String utteranceId)</span> </span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"ttsPlayOne-----------onStart"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDone</span><span class="params">(String utteranceId)</span> </span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"ttsPlayOne-----------onDone"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(String utteranceId)</span> </span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"ttsPlayOne-----------onError"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttsPlaySecond</span> <span class="keyword">extends</span>  <span class="title">UtteranceProgressListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(String utteranceId)</span> </span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"ttsPlaySecond-----------onStart"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDone</span><span class="params">(String utteranceId)</span> </span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"ttsPlaySecond-----------onDone"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(String utteranceId)</span> </span>&#123;</span><br><span class="line">Log.d(TAG, <span class="string">"ttsPlaySecond-----------onError"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加上权限</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="tts-最佳实践">TTS 最佳实践</h3><p>由于目前我在公司负责开发的产品是属于语音助手类型，自然这类 TTS 发声的问题和坑日常见的比较多。常见的有如下几种类型：</p><ul><li>系统自带的 TTS 功能是不支持中文的，想要支持中文的话，需要借助第三方引擎，比如常见的科大讯飞、百度等。</li><li>如果换成支持中文引擎的话，一旦输入的文本中有夹杂着英文，那么有时候第三方TTS引擎有时候就很不友好，有时候会把英文单词每个字母读出来，英文甚至是发音不了，这里就需要注意下引擎的测试。</li><li>在设置 TTS 参数的时候，需要注意语速、音高、音调的上限值，有时候参数可能是0-100的范围，有时候有些参数是在0-10的范围，特别需要根据不同引擎参数的值类型去设定。</li></ul><h3 id="使用趋势">使用趋势</h3><p>随着物联网的到来，IoT设备增多，那么对于类似语音助手相关应用也会增多，因为语音是一个很好的入口，现在逐步从显示到去显示的过程，很多智能设备有些是不需要屏幕的，只需要能识别语音和播放声音。因此，随着这类应用的增长，对于TTS 相关的API接口调用频率肯定也是加大，相信谷歌在这方面也会逐步在完善。</p><h2 id="内部设计维度">内部设计维度</h2><p>从外部使用角度入手，基本是熟悉API接口和具体项目中应用碰到的问题，然后不断总结出来比较优化的实践方式。了解完外部角度切入，那么我们需要里面内部设计是怎么一回事，毕竟作为一个开发者，知道具体实现原理是一个基本功。</p><h3 id="解决目标">解决目标</h3><p>Android TTS 目标就是解决文本转化为语音播报的过程。那它到底是怎么实现的呢，我们从TextToSpeech类的构造函数开始分析。</p><p>这里我们用Android 6.0版本源码分析为主，主要涉及的相关类和接口文件，在源码中的位置如下：</p><blockquote><p>framework.java framework/core/android.java external.java external.java external.java external_android_tts_compat_SynthProxy.cpp external_svox_picottsengine.cpp</p></blockquote><h3 id="实现原理">实现原理</h3><p><strong>初始化角度</strong>：先看TextToSpeech类，在使用时，一般TextToSpeech类要进行初始化，它的构造函数有三个，最后真正调用的构造函数代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Used by the framework to instantiate TextToSpeech objects with a supplied</span></span><br><span class="line"><span class="comment">    * package name, instead of using &#123;<span class="doctag">@link</span> android.content.Context#getPackageName()&#125;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextToSpeech</span><span class="params">(Context context, OnInitListener listener, String engine,</span></span></span><br><span class="line"><span class="function"><span class="params">           String packageName, <span class="keyword">boolean</span> useFallback)</span> </span>&#123;</span><br><span class="line">       mContext = context;</span><br><span class="line">       mInitListener = listener;</span><br><span class="line">       mRequestedEngine = engine;</span><br><span class="line">       mUseFallback = useFallback;</span><br><span class="line"></span><br><span class="line">       mEarcons = <span class="keyword">new</span> HashMap&lt;String, Uri&gt;();</span><br><span class="line">       mUtterances = <span class="keyword">new</span> HashMap&lt;CharSequence, Uri&gt;();</span><br><span class="line">       mUtteranceProgressListener = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       mEnginesHelper = <span class="keyword">new</span> TtsEngines(mContext);</span><br><span class="line">       initTts();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从构造函数可以看到，调用到initTts操作，我们看下initTts方法里是什么东东，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">initTts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Step 1: Try connecting to the engine that was requested.</span></span><br><span class="line">      <span class="keyword">if</span> (mRequestedEngine != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (mEnginesHelper.isEngineInstalled(mRequestedEngine)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (connectToEngine(mRequestedEngine)) &#123;</span><br><span class="line">                  mCurrentEngine = mRequestedEngine;</span><br><span class="line">                  <span class="keyword">return</span> SUCCESS;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mUseFallback) &#123;</span><br><span class="line">                  mCurrentEngine = <span class="keyword">null</span>;</span><br><span class="line">                  dispatchOnInit(ERROR);</span><br><span class="line">                  <span class="keyword">return</span> ERROR;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mUseFallback) &#123;</span><br><span class="line">              Log.i(TAG, <span class="string">"Requested engine not installed: "</span> + mRequestedEngine);</span><br><span class="line">              mCurrentEngine = <span class="keyword">null</span>;</span><br><span class="line">              dispatchOnInit(ERROR);</span><br><span class="line">              <span class="keyword">return</span> ERROR;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Step 2: Try connecting to the user's default engine.</span></span><br><span class="line">      <span class="keyword">final</span> String defaultEngine = getDefaultEngine();</span><br><span class="line">      <span class="keyword">if</span> (defaultEngine != <span class="keyword">null</span> &amp;&amp; !defaultEngine.equals(mRequestedEngine)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (connectToEngine(defaultEngine)) &#123;</span><br><span class="line">              mCurrentEngine = defaultEngine;</span><br><span class="line">              <span class="keyword">return</span> SUCCESS;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Step 3: Try connecting to the highest ranked engine in the</span></span><br><span class="line">      <span class="comment">// system.</span></span><br><span class="line">      <span class="keyword">final</span> String highestRanked = mEnginesHelper.getHighestRankedEngineName();</span><br><span class="line">      <span class="keyword">if</span> (highestRanked != <span class="keyword">null</span> &amp;&amp; !highestRanked.equals(mRequestedEngine) &amp;&amp;</span><br><span class="line">              !highestRanked.equals(defaultEngine)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (connectToEngine(highestRanked)) &#123;</span><br><span class="line">              mCurrentEngine = highestRanked;</span><br><span class="line">              <span class="keyword">return</span> SUCCESS;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// <span class="doctag">NOTE:</span> The API currently does not allow the caller to query whether</span></span><br><span class="line">      <span class="comment">// they are actually connected to any engine. This might fail for various</span></span><br><span class="line">      <span class="comment">// reasons like if the user disables all her TTS engines.</span></span><br><span class="line"></span><br><span class="line">      mCurrentEngine = <span class="keyword">null</span>;</span><br><span class="line">      dispatchOnInit(ERROR);</span><br><span class="line">      <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里比较有意思了，第一步先去连接用户请求的TTS引擎服务（这里可以让我们自定义TTS引擎，可以替换系统默认的引擎），如果没找到连接用户的TTS引擎，那么就去连接默认引擎，最后是连接高性能引擎，从代码可以看出高性能引擎优先级最高，默认引擎其次，connectToEngine方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">connectToEngine</span><span class="params">(String engine)</span> </span>&#123;</span><br><span class="line">      Connection connection = <span class="keyword">new</span> Connection();</span><br><span class="line">      Intent intent = <span class="keyword">new</span> Intent(Engine.INTENT_ACTION_TTS_SERVICE);</span><br><span class="line">      intent.setPackage(engine);</span><br><span class="line">      <span class="keyword">boolean</span> bound = mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE);</span><br><span class="line">      <span class="keyword">if</span> (!bound) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Failed to bind to "</span> + engine);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Log.i(TAG, <span class="string">"Sucessfully bound to "</span> + engine);</span><br><span class="line">          mConnectingServiceConnection = connection;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里的Engine.INTENT_ACTION_TTS_SERVICE的值为&quot;android.intent.action.TTS_SERVICE&quot;;其连接到的服务为action，为&quot;android.intent.action.TTS_SERVICE&quot;的服务，在external.xml文件可以发现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".PicoService"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.TTS_SERVICE"</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.speech.tts"</span> <span class="attr">android:resource</span>=<span class="string">"@xml/tts_engine"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>系统自带的默认连接的服务叫做PicoService，其具体代码如下：其继承于CompatTtsService。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicoService</span> <span class="keyword">extends</span> <span class="title">CompatTtsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"PicoService"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getSoFilename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"libttspico.so"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看看CompatTtsService这个类，这个类为抽象类，它的父类为TextToSpeechService,其有一个成员SynthProxy类，该类负责调用TTS的C++层代码。如图：</p><figure><img src="/2019/05/21/2019-05-21-AndroidTTS/image2.png" alt="CompatTtsService代码"><figcaption>CompatTtsService代码</figcaption></figure><p>我们来看看CompatTtsService的onCreate()方法，该方法中主要对SynthProxy进行了初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (DBG) Log.d(TAG, <span class="string">"onCreate()"</span>);</span><br><span class="line"></span><br><span class="line">      String soFilename = getSoFilename();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (mNativeSynth != <span class="keyword">null</span>) &#123;</span><br><span class="line">          mNativeSynth.stopSync();</span><br><span class="line">          mNativeSynth.shutdown();</span><br><span class="line">          mNativeSynth = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Load the engineConfig from the plugin if it has any special configuration</span></span><br><span class="line">      <span class="comment">// to be loaded. By convention, if an engine wants the TTS framework to pass</span></span><br><span class="line">      <span class="comment">// in any configuration, it must put it into its content provider which has the URI:</span></span><br><span class="line">      <span class="comment">// content://&lt;packageName&gt;.providers.SettingsProvider</span></span><br><span class="line">      <span class="comment">// That content provider must provide a Cursor which returns the String that</span></span><br><span class="line">      <span class="comment">// is to be passed back to the native .so file for the plugin when getString(0) is</span></span><br><span class="line">      <span class="comment">// called on it.</span></span><br><span class="line">      <span class="comment">// Note that the TTS framework does not care what this String data is: it is something</span></span><br><span class="line">      <span class="comment">// that comes from the engine plugin and is consumed only by the engine plugin itself.</span></span><br><span class="line">      String engineConfig = <span class="string">""</span>;</span><br><span class="line">      Cursor c = getContentResolver().query(Uri.parse(<span class="string">"content://"</span> + getPackageName()</span><br><span class="line">              + <span class="string">".providers.SettingsProvider"</span>), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="keyword">null</span>)&#123;</span><br><span class="line">          c.moveToFirst();</span><br><span class="line">          engineConfig = c.getString(<span class="number">0</span>);</span><br><span class="line">          c.close();</span><br><span class="line">      &#125;</span><br><span class="line">      mNativeSynth = <span class="keyword">new</span> SynthProxy(soFilename, engineConfig);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// mNativeSynth is used by TextToSpeechService#onCreate so it must be set prior</span></span><br><span class="line">      <span class="comment">// to that call.</span></span><br><span class="line">      <span class="comment">// getContentResolver() is also moved prior to super.onCreate(), and it works</span></span><br><span class="line">      <span class="comment">// because the super method don't sets a field or value that affects getContentResolver();</span></span><br><span class="line">      <span class="comment">// (including the content resolver itself).</span></span><br><span class="line">      <span class="keyword">super</span>.onCreate();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>紧接着看看SynthProxy的构造函数都干了什么，我也不知道干了什么，但是里面有个静态代码块，其加载了ttscompat动态库，所以它肯定只是一个代理，实际功能由C++本地方法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor; pass the location of the native TTS .so to use.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SynthProxy</span><span class="params">(String nativeSoLib, String engineConfig)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> applyFilter = shouldApplyAudioFilter(nativeSoLib);</span><br><span class="line">      Log.v(TAG, <span class="string">"About to load "</span>+ nativeSoLib + <span class="string">", applyFilter="</span> + applyFilter);</span><br><span class="line">      mJniData = native_setup(nativeSoLib, engineConfig);</span><br><span class="line">      <span class="keyword">if</span> (mJniData == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to load "</span> + nativeSoLib);</span><br><span class="line">      &#125;</span><br><span class="line">      native_setLowShelf(applyFilter, PICO_FILTER_GAIN, PICO_FILTER_LOWSHELF_ATTENUATION,</span><br><span class="line">              PICO_FILTER_TRANSITION_FREQ, PICO_FILTER_SHELF_SLOPE);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在构造函数中，调用了native_setup方法来初始化引擎，其实现在C++层(com_android_tts_compat_SynthProxy.cpp)。</p><figure><img src="/2019/05/21/2019-05-21-AndroidTTS/image3.png" alt="nativeSetup代码"><figcaption>nativeSetup代码</figcaption></figure><p>我们可以看到ngine-&gt;funcs-&gt;init(engine, __ttsSynthDoneCB, engConfigString);这句代码比较关键，这个init方法上面在com_svox_picottsengine.cpp中，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Google Engine API function implementations */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** init</span></span><br><span class="line"><span class="comment"> *  Allocates Pico memory block and initializes the Pico system.</span></span><br><span class="line"><span class="comment"> *  synthDoneCBPtr - Pointer to callback function which will receive generated samples</span></span><br><span class="line"><span class="comment"> *  config - the engine configuration parameters, here only contains the non-system path</span></span><br><span class="line"><span class="comment"> *      for the lingware location</span></span><br><span class="line"><span class="comment"> *  return tts_result</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">tts_result <span class="title">TtsEngine::init</span><span class="params">( synthDoneCB_t synthDoneCBPtr, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">config</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (synthDoneCBPtr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Callback pointer is NULL"</span>);</span><br><span class="line">        <span class="keyword">return</span> TTS_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    picoMemArea = <span class="built_in">malloc</span>( PICO_MEM_SIZE );</span><br><span class="line">    <span class="keyword">if</span> (!picoMemArea) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Failed to allocate memory for Pico system"</span>);</span><br><span class="line">        <span class="keyword">return</span> TTS_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pico_Status ret = pico_initialize( picoMemArea, PICO_MEM_SIZE, &amp;picoSystem );</span><br><span class="line">    <span class="keyword">if</span> (PICO_OK != ret) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Failed to initialize Pico system"</span>);</span><br><span class="line">        <span class="built_in">free</span>( picoMemArea );</span><br><span class="line">        picoMemArea = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> TTS_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    picoSynthDoneCBPtr = synthDoneCBPtr;</span><br><span class="line"></span><br><span class="line">    picoCurrentLangIndex = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// was the initialization given an alternative path for the lingware location?</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">config</span> != <span class="literal">NULL</span>) &amp;&amp; (<span class="built_in">strlen</span>(<span class="built_in">config</span>) &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">        pico_alt_lingware_path = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(<span class="built_in">config</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>((<span class="keyword">char</span>*)pico_alt_lingware_path, <span class="built_in">config</span>);</span><br><span class="line">        ALOGV(<span class="string">"Alternative lingware path %s"</span>, pico_alt_lingware_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pico_alt_lingware_path = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(PICO_LINGWARE_PATH) + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>((<span class="keyword">char</span>*)pico_alt_lingware_path, PICO_LINGWARE_PATH);</span><br><span class="line">        ALOGV(<span class="string">"Using predefined lingware path %s"</span>, pico_alt_lingware_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TTS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，TTS引擎的初始化就完成了。</p><p>再看下<strong>TTS调用的角度</strong>，一般TTS调用的类是TextToSpeech中的speak()方法，我们来看看其执行流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">speak</span><span class="params">(<span class="keyword">final</span> CharSequence text,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">final</span> <span class="keyword">int</span> queueMode,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">final</span> Bundle params,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">final</span> String utteranceId)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> runAction(<span class="keyword">new</span> Action&lt;Integer&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> Integer <span class="title">run</span><span class="params">(ITextToSpeechService service)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">              Uri utteranceUri = mUtterances.get(text);</span><br><span class="line">              <span class="keyword">if</span> (utteranceUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> service.playAudio(getCallerIdentity(), utteranceUri, queueMode,</span><br><span class="line">                          getParams(params), utteranceId);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> service.speak(getCallerIdentity(), text, queueMode, getParams(params),</span><br><span class="line">                          utteranceId);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, ERROR, <span class="string">"speak"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主要是看runAction()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;R&gt; <span class="function">R <span class="title">runAction</span><span class="params">(Action&lt;R&gt; action, R errorResult, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> reconnect, <span class="keyword">boolean</span> onlyEstablishedConnection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mStartLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mServiceConnection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.w(TAG, method + <span class="string">" failed: not bound to TTS engine"</span>);</span><br><span class="line">            <span class="keyword">return</span> errorResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mServiceConnection.runAction(action, errorResult, method, reconnect,</span><br><span class="line">                onlyEstablishedConnection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看下mServiceConnection类的runAction方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">R <span class="title">runAction</span><span class="params">(Action&lt;R&gt; action, R errorResult, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> reconnect, <span class="keyword">boolean</span> onlyEstablishedConnection)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mStartLock) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mService == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Log.w(TAG, method + <span class="string">" failed: not connected to TTS engine"</span>);</span><br><span class="line">                        <span class="keyword">return</span> errorResult;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (onlyEstablishedConnection &amp;&amp; !isEstablished()) &#123;</span><br><span class="line">                        Log.w(TAG, method + <span class="string">" failed: TTS engine connection not fully set up"</span>);</span><br><span class="line">                        <span class="keyword">return</span> errorResult;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> action.run(mService);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                    Log.e(TAG, method + <span class="string">" failed"</span>, ex);</span><br><span class="line">                    <span class="keyword">if</span> (reconnect) &#123;</span><br><span class="line">                        disconnect();</span><br><span class="line">                        initTts();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> errorResult;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以发现最后会回调action.run(mService)方法。接着执行service.playAudio()，这里的service为PicoService，其继承于抽象类CompatTtsService，而CompatTtsService继承于抽象类TextToSpeechService。</p><p>所以会执行TextToSpeechService中的playAudio()，该方法位于TextToSpeechService中mBinder中。该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">playAudio</span><span class="params">(IBinder caller, Uri audioUri, <span class="keyword">int</span> queueMode, Bundle params,</span></span></span><br><span class="line"><span class="function"><span class="params">              String utteranceId)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!checkNonNull(caller, audioUri, params)) &#123;</span><br><span class="line">              <span class="keyword">return</span> TextToSpeech.ERROR;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          SpeechItem item = <span class="keyword">new</span> AudioSpeechItemV1(caller,</span><br><span class="line">                  Binder.getCallingUid(), Binder.getCallingPid(), params, utteranceId, audioUri);</span><br><span class="line">          <span class="keyword">return</span> mSynthHandler.enqueueSpeechItem(queueMode, item);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>接着执行mSynthHandler.enqueueSpeechItem(queueMode, item),其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Adds a speech item to the queue.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * Called on a service binder thread.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">enqueueSpeechItem</span><span class="params">(<span class="keyword">int</span> queueMode, <span class="keyword">final</span> SpeechItem speechItem)</span> </span>&#123;</span><br><span class="line">         UtteranceProgressDispatcher utterenceProgress = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">if</span> (speechItem <span class="keyword">instanceof</span> UtteranceProgressDispatcher) &#123;</span><br><span class="line">             utterenceProgress = (UtteranceProgressDispatcher) speechItem;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!speechItem.isValid()) &#123;</span><br><span class="line">             <span class="keyword">if</span> (utterenceProgress != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 utterenceProgress.dispatchOnError(</span><br><span class="line">                         TextToSpeech.ERROR_INVALID_REQUEST);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> TextToSpeech.ERROR;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (queueMode == TextToSpeech.QUEUE_FLUSH) &#123;</span><br><span class="line">             stopForApp(speechItem.getCallerIdentity());</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queueMode == TextToSpeech.QUEUE_DESTROY) &#123;</span><br><span class="line">             stopAll();</span><br><span class="line">         &#125;</span><br><span class="line">         Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                 <span class="keyword">if</span> (isFlushed(speechItem)) &#123;</span><br><span class="line">                     speechItem.stop();</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     setCurrentSpeechItem(speechItem);</span><br><span class="line">                     speechItem.play();</span><br><span class="line">                     setCurrentSpeechItem(<span class="keyword">null</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         Message msg = Message.obtain(<span class="keyword">this</span>, runnable);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// The obj is used to remove all callbacks from the given app in</span></span><br><span class="line">         <span class="comment">// stopForApp(String).</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">         <span class="comment">// Note that this string is interned, so the == comparison works.</span></span><br><span class="line">         msg.obj = speechItem.getCallerIdentity();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (sendMessage(msg)) &#123;</span><br><span class="line">             <span class="keyword">return</span> TextToSpeech.SUCCESS;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             Log.w(TAG, <span class="string">"SynthThread has quit"</span>);</span><br><span class="line">             <span class="keyword">if</span> (utterenceProgress != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 utterenceProgress.dispatchOnError(TextToSpeech.ERROR_SERVICE);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> TextToSpeech.ERROR;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>主要是看 speechItem.play()方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Plays the speech item. Blocks until playback is finished.</span></span><br><span class="line"><span class="comment">       * Must not be called more than once.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * Only called on the synthesis thread.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"play() called twice"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              mStarted = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          playImpl();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">playImpl</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>可以看到主要播放实现方法为playImpl()，那么在TextToSpeechService中的playAudio()中代码可以知道这里的speechitem为SynthesisSpeechItemV1。</p><p>因此在play中执行的playimpl()方法为SynthesisSpeechItemV1类中的playimpl()方法，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">playImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          AbstractSynthesisCallback synthesisCallback;</span><br><span class="line">          mEventLogger.onRequestProcessingStart();</span><br><span class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="comment">// stop() might have been called before we enter this</span></span><br><span class="line">              <span class="comment">// synchronized block.</span></span><br><span class="line">              <span class="keyword">if</span> (isStopped()) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              mSynthesisCallback = createSynthesisCallback();</span><br><span class="line">              synthesisCallback = mSynthesisCallback;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          TextToSpeechService.<span class="keyword">this</span>.onSynthesizeText(mSynthesisRequest, synthesisCallback);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Fix for case where client called .start() &amp; .error(), but did not called .done()</span></span><br><span class="line">          <span class="keyword">if</span> (synthesisCallback.hasStarted() &amp;&amp; !synthesisCallback.hasFinished()) &#123;</span><br><span class="line">              synthesisCallback.done();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>在playImpl方法中会执行onSynthesizeText方法，这是个抽象方法，记住其传递了一个synthesisCallback，后面会讲到。哪该方法具体实现是在哪里呢，没错，就是在TextToSpeechService的子类CompatTtsService中。来看看它怎么实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSynthesizeText</span><span class="params">(SynthesisRequest request, SynthesisCallback callback)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (mNativeSynth == <span class="keyword">null</span>) &#123;</span><br><span class="line">          callback.error();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set language</span></span><br><span class="line">      String lang = request.getLanguage();</span><br><span class="line">      String country = request.getCountry();</span><br><span class="line">      String variant = request.getVariant();</span><br><span class="line">      <span class="keyword">if</span> (mNativeSynth.setLanguage(lang, country, variant) != TextToSpeech.SUCCESS) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"setLanguage("</span> + lang + <span class="string">","</span> + country + <span class="string">","</span> + variant + <span class="string">") failed"</span>);</span><br><span class="line">          callback.error();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set speech rate</span></span><br><span class="line">      <span class="keyword">int</span> speechRate = request.getSpeechRate();</span><br><span class="line">      <span class="keyword">if</span> (mNativeSynth.setSpeechRate(speechRate) != TextToSpeech.SUCCESS) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"setSpeechRate("</span> + speechRate + <span class="string">") failed"</span>);</span><br><span class="line">          callback.error();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set speech</span></span><br><span class="line">      <span class="keyword">int</span> pitch = request.getPitch();</span><br><span class="line">      <span class="keyword">if</span> (mNativeSynth.setPitch(pitch) != TextToSpeech.SUCCESS) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"setPitch("</span> + pitch + <span class="string">") failed"</span>);</span><br><span class="line">          callback.error();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Synthesize</span></span><br><span class="line">      <span class="keyword">if</span> (mNativeSynth.speak(request, callback) != TextToSpeech.SUCCESS) &#123;</span><br><span class="line">          callback.error();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最终又回到系统提供的pico引擎中，在com_android_tts_compat_SynthProxy.cpp这个文件中，可以看到使用speak方法，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> jint</span><br><span class="line">com_android_tts_compat_SynthProxy_speak(JNIEnv *env, jobject thiz, jlong jniData,</span><br><span class="line">        jstring textJavaString, jobject request)</span><br><span class="line">&#123;</span><br><span class="line">    SynthProxyJniStorage* pSynthData = getSynthData(jniData);</span><br><span class="line">    <span class="keyword">if</span> (pSynthData == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ANDROID_TTS_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initializeFilter();</span><br><span class="line"></span><br><span class="line">    <span class="function">Mutex::Autolock <span class="title">l</span><span class="params">(engineMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">android_tts_engine_t</span> *engine = pSynthData-&gt;mEngine;</span><br><span class="line">    <span class="keyword">if</span> (!engine) &#123;</span><br><span class="line">        <span class="keyword">return</span> ANDROID_TTS_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SynthRequestData *pRequestData = <span class="keyword">new</span> SynthRequestData;</span><br><span class="line">    pRequestData-&gt;jniStorage = pSynthData;</span><br><span class="line">    pRequestData-&gt;env = env;</span><br><span class="line">    pRequestData-&gt;request = env-&gt;NewGlobalRef(request);</span><br><span class="line">    pRequestData-&gt;startCalled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *textNativeString = env-&gt;GetStringUTFChars(textJavaString, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(pSynthData-&gt;mBuffer, <span class="number">0</span>, pSynthData-&gt;mBufferSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = engine-&gt;funcs-&gt;synthesizeText(engine, textNativeString,</span><br><span class="line">            pSynthData-&gt;mBuffer, pSynthData-&gt;mBufferSize, <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(pRequestData));</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(textJavaString, textNativeString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (jint) result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，TTS的调用就结束了。</p><h3 id="tts-优劣势">TTS 优劣势</h3><p>从实现原理我们可以看到Android系统原生自带了一个TTS引擎。那么在此，我们就也可以去自定义TTS引擎，只有继承ITextToSpeechService接口即可，实现里面的方法。这就为后续自定义TTS引擎埋下伏笔了，因为系统默认的TTS引擎是不支持中文，那么市场上比较好的TTS相关产品，一般是集成讯飞或者Nuance等第三方供应商。</p><p>因此，我们也可以看到TTS优劣势。</p><p>优势：接口定义完善，有着完整的API接口方法，同时支持扩展，可根据自身开发业务需求重新打造TTS引擎，并且与原生接口做兼容，可适配。</p><p>劣势：原生系统TTS引擎支持的多国语言有限，目前不支持多实例和多通道。</p><h3 id="演进趋势">演进趋势</h3><p>从目前来看，随着语音成为更多Iot设备的入口，那么在语音TTS合成播报方面技术会越来越成熟，特别是对于Android 系统原生相关的接口也会越来越强大。因此，对于TTS后续的发展，应该是冉冉上升。</p><h2 id="小结">小结</h2><p>总的来说，对于一个知识点，前期通过使用文档介绍，到具体实践，然后在实践中优化进行总结，选择一个最佳的实践方案。当然不能满足“知其然而不知其所以然”，所以得去看背后的实现原理是什么。这个知识点优劣势是什么，在哪些场景比较适用，哪些场景不适用，接下来会演进趋势怎么样。通过这么一整套流程，那么对于一个知识点来说，可以算是了然于胸了。</p>]]></content>
    
    <summary type="html">
    
      随着从事 Android 开发年限增加，负责的工作项目也从应用层开发逐步过渡到 Android Framework 层开发，首先就拿Android TTS播报来入手分析。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>简单回顾2018</title>
    <link href="http://cryallen.com/2019/02/16/2019-02-16-Annual2018/"/>
    <id>http://cryallen.com/2019/02/16/2019-02-16-Annual2018/</id>
    <published>2019-02-16T13:17:09.000Z</published>
    <updated>2020-04-20T04:19:13.822Z</updated>
    
    <content type="html"><![CDATA[<figure><img src="/2019/02/16/2019-02-16-Annual2018/image1.jpg" alt="2018梦想版"><figcaption>2018梦想版</figcaption></figure><p><strong>2018年度目标回顾</strong></p><ul><li>健康维度：六块腹肌、跑步里程500公里、横渡钱塘江、记录卡路里摄入情况、记录睡眠时间情况、体重达到60公斤（核心动机：在我60岁时候保持完美的身材）</li><li>家庭维度：与奶奶多增加沟通和陪伴，与女票为2019年结婚做准备，与个人少抱怨，多换位思考，加强情绪管理（核心动机：有一个幸福美满的家庭）</li><li>效能维度：切换早睡早起模式，专注Omnifocus驱动，善用日程表，加强晨间日记记录和反思，记录时间开销（核心动机：高效率、慢生活）</li><li>财富维度：年收入达到40万，梦想储蓄罐本金达到20万，消费支出控制在10万，财商技能积累和持续精进（核心动机：50岁达到财富自由和时间自由）</li><li>学习维度：计算机软考，TMC演讲10次，混大2次线下课，回顾理性知识分子课程和改变自己语音，50本书，100篇文章，英语和得到专栏打卡（核心动机：致力于当一个不断终生学习的分享者）</li><li>事业维度：专业技能T型发展，打造生涯规划师为第二职业，聚焦手机摄影，构建投资变现实践原型（核心动机：成为一个能给他人带来价值的人）</li><li>社交维度：每周参加一次线下活动，打造更多的链接，渠道通过读书会、公益活动、社群活动（核心动机：打造个人品牌影响力）</li><li>休闲维度：旅游一次长途，两次短途，一次国外，两次国内（核心动机：过有品质的生活 ）</li></ul><p><strong>思维导图</strong> <img src="/2019/02/16/2019-02-16-Annual2018/image2.png" alt="2018，不够落地的一年"></p><p>正如有这么一句话：“我的2018年目标，就是搞定2017年，那些原定于2016年完成的安排，不为别的，只为兑现我 2015 年时要完成的 2014年年度计划的诺言。”</p><p>是不是每年都这样制定年度目标呢？不管过去制定的目标完成多少，但是有年底目标总比没有目标来的强，既然是自己制定了，是不是一定得跪着含着泪也得去完成呢，不见得。</p><p>如果要用一个词语来总结过去的一年，我给自己送四个字：「不够落地」。为何会是这四个字呢，主要原因是年初定的目标，现在年底回顾总结时发现执行不到位，有些目标落地的过于形式，虽然时间投入进去了，但是产出却没有，很多时候都是仅仅走过场而已。比方说，每天的早睡早起，定这个目标的意义在于想做一个晨型人，早起有更多的时间可以独处和进行一些输入学习。可是一年下来，结果不理想，虽然定好是每天6点05分的闹钟，但是天气一冷，闹钟响了，仅仅是醒过来，然后顺手把闹钟给关掉，却没有起床，而是继续睡下去，睡的不得不起来时间点，那时才慢悠悠起来，好像永远睡不醒一样。所以这个有点自欺欺人，有了早起的意识，却没有早起的行为。除此之外，不仅仅是这一点，还有其他方面也是如此，因此过去承诺没做到的，在2019年里要逐步实现，其中最重要的一个前提是有足够的时间去践行，故早起就是一个很好挤出时间的好习惯。</p><p>如果以九宫格方式进行复盘的话，我把这一年自己所经历过的事情从以下8个维度切入回顾：「<strong>健康、家庭、效能、财富、学习、事业、社交、休闲</strong>」。</p><p><strong>健康维度</strong></p><p>健康维度体重、跑步、睡眠三个方面。</p><p>体重70公斤：2018年的目标是体重降低到60公斤，想不到年底竟然达到70公斤，明显是没控制好，回顾原因，无外乎久坐不动，日常生活缺少一定量的运动，同时饮食也没得到合适的控制。</p><p>跑步里程500公里：对于跑步，2018年规划是跑500公里，实际完成情况才46.46公里，刚好1/10。说起来惭愧，之前计划是每周三次5公里跑步，这一年回顾来看，基本就没有坚持在跑步，追究原因，自己行动力不够坚定，同时对我要求不高，容易犯懒，还有今年报名参加杭州马拉松也是没报上，没有一个明确的动力去督促自己。2019年跑多少公里不再当个目标来执行了，更多是当日常运动习惯来落地。</p><p>睡眠质量：对于睡眠质量，现在习惯是每天晚上11点半-12点期间入睡，早上起来呢，则是8点左右，睡眠时间是够8个小时，但是通过一些软件记录发现，深度睡眠时间比较少，大多数时间是浅度睡眠。其实每天配合一定的运动量再入睡，睡眠质量会高很多。</p><p>感想：既然在年初时候就喊出要实现六块腹肌目标，这个口号也喊4年了，依然不够奏效，为何？主要原因是自己对于是否真想要有六块腹肌没那么大决心，对于诱惑没有一点免疫力，说了也写下来了，依然是做不到，很多事不成功未尝不是这个原因呢。过去的也已经过去，再后悔也没用，就只有寄希望于未来，来年再战。</p><p><strong>家庭维度</strong></p><p>家庭维度包括感情生活、个人情绪、沟通和陪伴三个方面。</p><p>感情生活：16年开始谈恋爱，在一起有2年了，感情也是从刚开始三个月的蜜月期，到现在越来越亲密，这一年也是互相支持和陪伴。之前我习惯是独自考虑事情，碰到一些重要事情也是独自去承担，因为从小到大都是习惯于一个人了，现在意识上逐渐改变成为有两个人，要知道现在是2个人了，身上背负的责任感更强烈了， 需要迅速成长起来，怎么样成为一个负责任的男人。这一年时间里，我们也越来越了解对方，她美丽、善良、天真、可爱，但也会小任性，做事情马虎，考虑的事情有时候会稍微片面，但这都无所谓，因为我爱她，我希望自己能给她最大的幸福，我最大的愿景是能够娶上她，跟她白头偕老。但同时在日常相处中，也会经常闹闹小脾气，遇到双方委屈时刻，此时更多应该是耐心陪伴和沟通了，希望来年，两人相处模式会更温馨和谐，在稳定的关系中进一步创造活力，日常生活中时不时有惊喜浪漫时刻，一起经历更有趣的事，毕竟有着共同的回忆，感情会越发稳定。</p><p>个人情绪：在过去的一年，自己少了一些抱怨，多了一些好奇心，在与朋友或同事相处过程中，无论是对人还是对事，都需要保持一颗敬畏和谦卑的心去对待。同时也要积极进行换位思考，多点乐观，积极主动，情绪上遇到压抑，需要及时找个方式进行发泄，不能累积，压力肯定是有的，但更多需要积极去面对，需要更多的平常心。</p><p>沟通和陪伴：沟通在于每周固定于奶奶电话一次，作为一个从小被奶奶抚养大的人，现在就是希望老人家身体保持健康，长寿。陪伴则是有空的话，要定期回去看看，回去不仅仅是自己老家，更多也是去女票父母家。</p><p><strong>效能维度</strong></p><p>效能维度包括早睡早起、Omnifocus驱动、晨间日记三个方面。</p><p>早睡早起：在2018年初的计划里是每天保持早睡早起的习惯，曾经还能为自己保持早上6点多就能起来挺高兴的，这一年回顾下来发现早上基本都是8点左右，偶尔有那么一段时间进行早起，却没有维持下去，没有早起，导致之前保持的晨跑习惯也丢弃了，跑步目标也未完成，曾经的晨读习惯也放弃了，所以在2019年需要把这个习惯培养起来，因为在干任何事之前，需要保证你自己有时间才行，没时间去行动，大都是在说空话。</p><p>Omnifocus驱动：Omnifocus是GTD践行神器，可以很好的安排一天待办事项，行程等等。统筹规划如何更有效合理利用这一天的时间安排，现在工作上基本习惯于挑三件重要事情先处理，同样在每天生活中的三件重要事情处理也带来帮助很大，已经逐渐形成以Omnifocus驱动过着每一天的机制。</p><p>晨间日记：从2014年12月开始写的晨间日记，写到现在已经有4年多，但是越写到后面越觉得写这个是在于形式，而不是认真去完成。某一天感觉比较重要，就会去反思和检视，感觉心情不好，则不会做一些记录，其实每天花10分钟去检视和反思是很有必要的，殊不知这部分才是意义所在。同时今年晨间日记模板也适时调整了，稍微简化了，偏向于自己更愿意记录形式，会有更多想法记录的，晨间日记不仅仅局限于在晨间写，更多反应的是在日常时刻，有想法和感悟要及时记录，它更多是载体而已。</p><p><strong>财商维度</strong></p><p>财商维度包括年收入预期、开始负债、 财商技能学习三个方面。</p><p>年收入预期：年初定的目标是在2018年希望年收入能达到40万，现在目前阶段是达到30万，离目标还是有一定差距的。现在收入方式也是比较单一，纯工资性收入，没有工资以外其他收入，比较单薄，万一遇到裁员和失业呢，我能靠其他什么收入来维持目前的支出呢，这也是这一整年都在焦虑原因，所以在2019年要积极扩展自己的第二收入，逐步脱离主要靠工资性为主的收入方式。</p><p>开始负债：3月份时候买入一套房，首付是借的，房子也是按揭，所以伴随着就是有债务了，目前房子对我来说就是负债，需要每月从口袋中拿出现金流去付月供。债务是可以促进经济的发展，但是需要记住这么一句话：你的债务增长速度不要超过收入增长速度。</p><p>财商知识：每周定期参加线上房产读书会，同时阅读了财商培养相关的书籍，对于一些概念有了进一步的认知，线下多玩现金流游戏， 同时也接触到房地产投资一些流派，财商学习是需要一辈子去学习，最终目的是建立自我投资回报体系，逐步提高自我的投资性收入。</p><p><strong>学习维度</strong></p><p>学习维度包括PMP证书、阅读和写作、线下课程三个方面。</p><p>PMP正式：在6月份报名了PMP考试，经过了2个月的线下课程培训，顺利考试通过，获得PMP证书，这也是在2018年最大收获之一。</p><p>阅读和写作：年初给自己定的目标是50本书计划，分专业和非专业类型，今年非专业书大概是看了10本，专业书看了20本，总共是30本，3/5，计划没完成，所以来年再努力。至于写作，微信公众号文章基本保持一个月一篇节奏，写的就更少了，除此之外，简书上写技术类文章，也是基本是保持每月一篇的节奏，不够勤快，所以在2019年，这两点要着重加强。原则：输出可以倒逼输入，就算了读了很读书或学了很多，没有某种方式输出，并且分享出来，其实没学到多少的。</p><p>线下课程：更多是参与一些自己感兴趣的课程，比如财富学习课、混沌大学线下报名课程等。</p><p><strong>事业维度</strong></p><p>事业维度包括专业技能、第二收入、投资关注三个方面。</p><p>专业技能：工作本身是研发方面，从事的是Android开发相关，今年最大的突破，是从应用架构方面转变Framework层深入，之前对于APP架构和性能优化有深入研究，现在在Framework层有了进一步提升。专业目标是当一名全栈工程师，不仅仅在移动端要继续深入，同时对于服务端开发框架和流程需要持续学习，同时对于基础性知识要更进一步夯实。</p><p>第二收入：尝试过团建项目，结合视觉引导，可惜失败了，不过也算是为了尝试自己第二收入进行的努力，还有通过写技术文章获得赞赏，但是收入不多而已。2019年的目标是要将自己过去几年的所学所得进行输出，提供稳定有价值的服务，开始尝试变现，打造好一个产品，选择好一个载体很关键。</p><p>投资关注：对于房地产、股票持续关注，看房的话，需要200套起步，虽然2018年股票市场萎靡不振，但是如果不追涨，在目前股票底部区域，选择被低估的股票，静候时间即可。</p><p><strong>社交维度</strong></p><p>社交维度包括线下活动、链接、社群三个方面。</p><p>线下活动：2018年目标是每周参加一次线下活动，这个至今为止，完成的还不错，活动类型则会比较多了，重在去体验和感受。</p><p>链接：参加社交的目的在于链接他人，通过链接，找到同频人，了解不同人的差异和想法，先弱连接，然后再强连接，甚至是好朋友都有可能，这需要自己是否愿意给自己机会，打造一个开放的系统。</p><p>社群：这个就很多活动了，跑步社群、演讲社群、读书会社群、混沌大学社群、书友会社群、现金流社群、吃喝玩乐样样都有。</p><p><strong>休闲维度</strong></p><p>休闲维度包括旅行、独处、相聚三个方面。</p><p>旅行：2018年的梦想板目标之一是去泰国参加天灯节，这个今年没实现，只能放在来年实现了， 本来2018计划一次长途旅行，一次短途旅行，貌似今年没怎么出去玩，知道了再多，也得有空亲眼去见见才行。</p><p>独处：总的来说，今年自我独处时间相对较少，基本没有一些让自己安静下来的场景，因为少了早起时间，所以在来年需要注重独处时刻，隔一段时间定期总结深入思考，很有必要。</p><p>相聚：曾经在6月份发起过一个男神私董会，但是仅仅相聚几次，其实是需要那种线下朋友相聚时刻，大家在职场、生活中碰到的困惑和问题可以抛出来共同讨论，通过讨论寻找到合适的解决方式，因为别人碰到的，很有可能自己在不远的将来也会碰到。</p><p><strong>一年中印象深刻</strong></p><p>如果说自己在过去一年里，非要说印象最深刻的一件事是什么的话，我觉得是经历过3月份杭州楼市最疯狂的阶段，那种全款买房还得四处托关系的，按揭贷款买房的完全没机会买的让人印象最深刻，然后在我自己买完房子的第二天，杭州正好出摇号政策，这个点掐的刚刚好，然后就开始经历4、5、6月份万人摇号场景，然后7、8月份开始，土拍市场降温，9、10月份二手房成交量持续走低，到现在11、12月份，行情来个大转弯，现在很多楼盘开始流拍，各种待交付楼盘进入维权阶段，精装修开始变成惊装修，真的可以说是一个很合格正弦曲线。</p><p><strong>年终复盘很有必要，就是看看自己哪里表现的好「得瑟下」，表现的不好，督促自己去完善，因为一切都是为了遇见更美好的将来而努力着。</strong></p><p>2019年，聚焦「<strong>第二收入</strong>」主题。</p>]]></content>
    
    <summary type="html">
    
      个人2018年简要回顾，总结是需要记录的，这样事后复盘可以避免之前所犯的错误。
    
    </summary>
    
    
      <category term="Personal" scheme="http://cryallen.com/categories/Personal/"/>
    
    
      <category term="个人成长" scheme="http://cryallen.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>我所理解的Android组件化之通信机制</title>
    <link href="http://cryallen.com/2018/10/05/2018-10-05-AndroidModularizationCommunication/"/>
    <id>http://cryallen.com/2018/10/05/2018-10-05-AndroidModularizationCommunication/</id>
    <published>2018-10-05T12:23:21.000Z</published>
    <updated>2020-04-20T03:53:27.654Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇关于Android组件化的文章，<a href="https://www.jianshu.com/p/1c5afe686d75" target="_blank" rel="noopener">《Android组件化框架设计与实践》</a>，之前没看过的小伙伴可以先点击阅读。那篇文章是从实战中进行总结得来，是公司的一个真实项目进行组件化架构改造，粒度会分的更粗些，是对整体架构实践进行相应的总结，里面说了要打造一个组件化框架的话，需要从以下7个方面入手：</p><ol type="1"><li>代码解耦。如何将一个庞大的工程分成有机的整体？</li><li>组件单独运行。因为每个组件都是高度内聚的，是一个完整的整体，如何让其单独运行和调试？</li><li>组件间通信。由于每个组件具体实现细节都互相不了解，但每个组件都需要给其他调用方提供服务，那么主项目与组件、组件与组件之间如何通信就变成关键？</li><li>UI 跳转。UI 跳转指的是特殊的数据传递，跟组件间通信区别有什么不同？</li><li>组件生命周期。这里的生命周期指的是组件在应用中存在的时间，组件是否可以做到按需、动态使用、因此就会涉及到组件加载、卸载等管理问题。</li><li>集成调试。在开发阶段如何做到按需编译组件？一次调试中可能有一两个组件参与集成，这样编译时间就会大大降低，提高开发效率。</li><li>代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用，也就是如何从根本上杜绝耦合的产生？</li></ol><p>今天则会从更小细粒度入手，主要讲讲在组件化架构下组件与组件之间通信机制是如何、包括所谓的UI跳转，其实也是组件化通信，只不过它稍微特殊点，单独抽取出来而已。学习知识的过程很常见的一个思路就是从整体概况入手，首先对整体有个粗略的印象，然后再深入细节，抽丝剥茧般去挖掘其中的内在原理，一个点一个不断去突破，这样就能建立起自己整个知识树，所以今天我们就从通信机制这个点入手，看看其中内在玄机有哪些。</p><h3 id="思维导图">思维导图</h3><p>同样，在每写一篇文章之前，放个思维导图，这样做的好处对于想写的内容有很好的梳理，逻辑和结构上显得清晰点。</p><figure><img src="/2018/10/05/2018-10-05-AndroidModularizationCommunication/CommunicationMindMap.png" alt="思维导图"><figcaption>思维导图</figcaption></figure><h3 id="主流方式">主流方式</h3><p>总所周知，Android提供了很多不同的信息的传递方式，比如在四大组件中本地广播、进程间的AIDL、匿名间的内存共享、Intent Bundle传递等等，那么在这么多传递方式，哪种类型是比较适合组件与组件直接的传递呢。</p><ul><li>本地广播，也就是LoacalBroadcastRecevier。更多是用在同一个应用内的不同系统规定的组件进行通信，好处在于：发送的广播只会在自己的APP内传播，不会泄漏给其他的APP，其他APP无法向自己的APP发送广播，不用被其他APP干扰。本地广播好比对讲通信，成本低，效率高，但有个缺点就是两者通信机制全部委托与系统负责，我们无法干预传输途中的任何步骤，不可控制，一般在组件化通信过程中采用比例不高。</li><li>进程间的AIDL。这个粒度在于进程，而我们组件化通信过程往往是在线程中，况且AIDL通信也是属于系统级通信，底层以Binder机制，虽说Android提供模板供我们实现，但往往使用者不好理解，交互比较复杂，往往也不适用应用于组件化通信过程中。</li><li>匿名的内存共享。比如用Sharedpreferences，在处于多线程场景下，往往会线程不安全，这种更多是存储一一些变化很少的信息，比如说组件里的配置信息等等。</li><li>Intent Bundle传递。包括显性和隐性传递，显性传递需要明确包名路径，组件与组件往往是需要互相依赖，这背离组件化中SOP（关注点分离原则），如果走隐性的话，不仅包名路径不能重复，需要定义一套规则，只有一个包名路径出错，排查起来也稍显麻烦，这个方式往往在组件间内部传递会比较合适，组件外与其他组件打交道则使用场景不多。</li></ul><p>说了这么多，那组件化通信什么机制比较适合呢？既然组件层中的模块是相互独立的，它们之间并不存在任何依赖。没有依赖就无法产生关系，没有关系，就无法传递消息，那要如何才能完成这种交流？</p><p>目前主流做法之一就是引入第三者，比如图中的Base Module。</p><figure><img src="/2018/10/05/2018-10-05-AndroidModularizationCommunication/CommunicationModule.png" alt="基础组件化架构"><figcaption>基础组件化架构</figcaption></figure><p>组件层的模块都依赖于基础层，从而产生第三者联系，这种第三者联系最终会编译在APP Module中，那时将不会有这种隔阂，那么其中的Base Module就是跨越组件化层级的关键，也是模块间信息交流的基础。比较有代表性的组件化开源框架有<a href="https://github.com/luojilab/DDComponentForAndroid" target="_blank" rel="noopener">得到DDComponentForAndroid</a>、<a href="https://github.com/alibaba/Arouter" target="_blank" rel="noopener">阿里Arouter</a>、<a href="https://github.com/JumeiRdGroup/Router" target="_blank" rel="noopener">聚美Router</a> 等等。</p><p>除了这种以通过引入第三者方式，还有一种解决方式是以事件总线方式，但这种方式目前开源的框架中使用比例不高，如图：</p><figure><img src="/2018/10/05/2018-10-05-AndroidModularizationCommunication/CommunicationEventBus.png" alt="事件总线"><figcaption>事件总线</figcaption></figure><p>事件总线通过记录对象，使用监听者模式来通知对象各种事件，比如在现实生活中，我们要去找房子，一般都去看小区的公告栏，因为那边会经常发布一些出租信息，我们去查看的过程中就形成了订阅的关系，只不过这种是被动去订阅，因为只有自己需要找房子了才去看，平时一般不会去看。小区中的公告栏可以想象成一个事件总线发布点，监听者则是哪些想要找房子的人，当有房东在公告栏上贴上出租房信息时，如果公告栏有订阅信息功能，比如引入门卫保安，已经把之前来这个公告栏要查看的找房子人一一进行电话登记，那么一旦有新出租消息产生，则门卫会把这条消息一一进行短信群发，那么找房子人则会收到这条消息进行后续的操作，是马上过来看，还是延迟过来，则根据自己的实际情况进行处理。在目前开源库中，有EventBus、RxBus就是采用这种发布/订阅模式，优点是简化了Android组件之间的通信方式，实现解耦，让业务代码更加简洁，可以动态设置事件处理线程和优先级，缺点则是每个事件需要维护一个事件类，造成事件类太多，无形中加大了维护成本。那么在组件化开源框架中有<a href="https://github.com/cangwang/ModuleBus" target="_blank" rel="noopener">ModuleBus</a>、<a href="https://github.com/luckybilly/CC" target="_blank" rel="noopener">CC</a> 等等。</p><p>这两者模式更详细的对比，可以查看这篇文章<a href="https://github.com/luckybilly/AndroidComponentizeLibs" target="_blank" rel="noopener">多个维度对比一些有代表性的开源android组件化开发方案</a></p><h3 id="实现方案">实现方案</h3><p>事件总线，又可以叫做组件总线，路由+接口，则相对好理解点，今天从阅读它们框架源码，我们来对比这两种实现方案的不同之处。</p><h5 id="组件总线">组件总线</h5><p>这边选取的是<a href="https://github.com/cangwang/ModuleBus" target="_blank" rel="noopener">ModuleBus</a>框架，这个方案特别之处在于其借鉴了<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">EventBus</a>的思想，组件的注册/注销和组件调用的事件发送都跟EventBus类似，能够传递一些基础类型的数据，而并不需要在Base Moudel中添加额外的类。所以不会影响Base模块的架构，但是无法动态移除信息接收端的代码，而自定义的事件信息类型还是需要添加到Base Module中才能让其他功能模块索引。</p><p>其中的核心代码是在与 <strong>ModuleBus</strong> 类，其内部维护了两个ArrayMap键对值列表，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Object methodClass</span></span><br><span class="line"><span class="comment">     * String methodName；</span></span><br><span class="line"><span class="comment">     * MethodInfo method info</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayMap&lt;Object,ArrayMap&lt;String,MethodInfo&gt;&gt; moduleEventMethods = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class IBaseClient.class</span></span><br><span class="line"><span class="comment">     * String methodName</span></span><br><span class="line"><span class="comment">     * Object methodClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayMap&lt;Class&lt;?&gt;,ArrayMap&lt;String,ArrayList&lt;Object&gt;&gt;&gt; moduleMethodClient = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>在使用方法上，在onCreate()和onDestroy()中需要注册和解绑，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ModuleBus.getInstance().register(<span class="keyword">this</span>);</span><br><span class="line">ModuleBus.getInstance().unregister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>最终使用类似EventBus 中 post 方法一样，进行两个组件间的通信。这个框架的封装的post 方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Class&lt;?&gt; clientClass,String methodName,Object...args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(clientClass == <span class="keyword">null</span> || methodName == <span class="keyword">null</span> ||methodName.length() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; clientList = getClient(clientClass,methodName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clientList == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(Object c: clientList)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ArrayMap&lt;String,MethodInfo&gt; methods = moduleEventMethods.get(c);</span><br><span class="line">                    Method method = methods.get(methodName).m;</span><br><span class="line">                    <span class="keyword">if</span>(method == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        Log.e(TAG,<span class="string">"cannot find client method"</span>+methodName +<span class="string">"for args["</span>+args.length+<span class="string">"]"</span> + Arrays.toString(args));</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getParameterTypes() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        Log.e(TAG,<span class="string">"cannot find client method param:"</span>+method.getParameterTypes() +<span class="string">"for args["</span>+args.length+<span class="string">"]"</span> + Arrays.toString(args));</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getParameterTypes().length != args.length)&#123;</span><br><span class="line">                        Log.e(TAG,<span class="string">"method "</span>+methodName +<span class="string">" param number not matched:method("</span>+method.getParameterTypes().length+<span class="string">"), args("</span> + args.length+<span class="string">")"</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    method.invoke(c,args);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">                    Log.e(TAG,<span class="string">"Notifiy client method invoke error."</span>,e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            Log.e(TAG,<span class="string">"Notify client error"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，它是通过遍历之前内部的ArrayMap，把注册在里面的方法找出，根据传入的参数进行匹配，使用反射调用。</p><p>#####接口+路由</p><p>接口+路由实现方式则相对容易理解点，我之前实践的一个项目就是通过这种方式实现的。具体地址如下：<a href="https://github.com/cr330326/DemoComponent" target="_blank" rel="noopener">DemoComponent</a> 实现思路是专门抽取一个LibModule作为路由服务，每个组件声明自己提供的服务 Service API，这些 Service 都是一些接口，组件负责将这些 Service 实现并注册到一个统一的路由 Router 中去，如果要使用某个组件的功能，只需要向Router 请求这个 Service 的实现，具体的实现细节我们全然不关心，只要能返回我们需要的结果就可以了。</p><p>比如定义两个路由地址，一个登陆组件，一个设置组件，核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterPath</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意路由的命名，路径第一个开头需要不一致，保证唯一性</span></span><br><span class="line">    <span class="comment">//Login Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTER_PATH_TO_LOGIN_SERVICE = <span class="string">"/login/service"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Setting Service</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTER_PATH_TO_SETTING_SERVICE = <span class="string">"/setting/service"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就相应着就有两个接口API，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoginProvider</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goToLogin</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISettingProvider</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goToSetting</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个接口API对应着是向外暴露这两个组件的能提供的通信能力，然后每个组件对接口进行实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = RouterPath.ROUTER_PATH_TO_LOGIN_SERVICE, name = <span class="string">"登陆页面"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginService</span> <span class="keyword">implements</span> <span class="title">ILoginProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToLogin</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        Intent loginIntent = <span class="keyword">new</span> Intent(activity, LoginActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        activity.startActivity(loginIntent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其中使用的到了阿里的<a href="https://github.com/alibaba/Arouter" target="_blank" rel="noopener">ARouter</a>页面跳转方式，内部本质也是接口+实现方式进行组件间通信。</p><p>调用则很简单了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ILoginProvider loginService = (ILoginProvider) ARouter.getInstance().build(RouterPath.ROUTER_PATH_TO_LOGIN_SERVICE).navigation();</span><br><span class="line"><span class="keyword">if</span>(loginService != <span class="keyword">null</span>)&#123;</span><br><span class="line">    loginService.goToLogin(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个组件化框架，就是<a href="https://github.com/SpinyTech/ModularizationArchitecture" target="_blank" rel="noopener">ModularizationArchitecture</a> ，它本质实现方式也是接口+实现，但是封装形式稍微不一样点，它是每个功能模块中需要使用注解建立Action事件，每个Action完成一个事件动作。invoke只是方法名为反射，并未用到反射，而是使用接口方式调用，参数是通过HashMap&lt;String,String&gt;传递的，无法传递对象。具体详解可以看这篇文章 <a href="http://blog.spinytech.com/2016/12/28/android_modularization/" target="_blank" rel="noopener">Android架构思考(模块化、多进程)</a>。</p><h3 id="页面跳转">页面跳转</h3><p>页面跳转也算是一种组件间的通信，只不过它相对粒度更细化点，之前我们描述的组件间通信粒度会更抽象点，页面跳转则是定位到某个组件的某个页面，可能是某个Activity，或者某个Fragment，要跳转到另外一个组件的Activity或Fragment，是这两者之间的通信。甚至在一般没有进行组件化架构的工程项目中，往往也会封装页面之间的跳转代码类，往往也会有路由中心的概念。不过一般 UI 跳转基本都会单独处理，一般通过短链的方式来跳转到具体的 Activity。每个组件可以注册自己所能处理的短链的 Scheme 和 Host，并定义传输数据的格式，然后注册到统一的 UIRouter 中，UIRouter 通过 Scheme 和 Host 的匹配关系负责分发路由。但目前比较主流的做法是通过在每个 Activity 上添加注解，然后通过 APT 形成具体的逻辑代码。</p><p>下面简单介绍目前比较主流的两个框架核心实现思路：</p><h5 id="arouter"><a href="https://github.com/alibaba/Arouter" target="_blank" rel="noopener">ARouter</a></h5><p>ARouter 核心实现思路是，我们在代码里加入的@Route注解，会在编译时期通过apt生成一些存储path和activityClass映射关系的类文件，然后app进程启动的时候会拿到这些类文件，把保存这些映射关系的数据读到内存里(保存在map里)，然后在进行路由跳转的时候，通过build()方法传入要到达页面的路由地址，ARouter会通过它自己存储的路由表找到路由地址对应的Activity.class(activity.class = map.get(path))，然后new Intent()，当调用ARouter的withString()方法它的内部会调用intent.putExtra(String name, String value)，调用navigation()方法，它的内部会调用startActivity(intent)进行跳转，这样便可以实现两个相互没有依赖的module顺利的启动对方的Activity了。</p><h5 id="activityrouter"><a href="https://github.com/mzule/ActivityRouter" target="_blank" rel="noopener">ActivityRouter</a></h5><p>ActivityRouter 核心实现思路是，它是通过路由 + 静态方法来实现，在静态方法上加注解来暴露服务，但不支持返回值，且参数固定位(context, bundle)，基于apt技术，通过注解方式来实现URL打开Activity功能，并支持在WebView和外部浏览器使用，支持多级Activity跳转，支持Bundle、Uri参数注入并转换参数类型。它实现相对简单点，也是比较早期比较流行的做法，不过学习它也是很有参考意义的。</p><h3 id="小结">小结</h3><p>总的来说，组件间的通信机制在组件化编程和组件化架构中是很重要的一个环节，可能在每个组件独自开发阶段，不需要与其他组件进行通信，只需要在内部通信即可，当处于组件集成阶段，那就需要大量组件进行互相通信，体现在每个业务互相协作，如果组件间设计的不好，打开一个页面或调用一个方法，想当耗时或响应慢，那么体现的则是这个APP使用比较卡顿，仅仅打开一个页面就是需要好几秒才能打开，则严重影响使用者的体验了，甚至一些大型APP，可能组件分化更小，种类更多，那么组件间的通信则至关重要了。所以，要打造一个良好的组件化框架，如何设计一个更适合自己本身的业务类型的通信机制，就需要多多进行思考了。</p><p>参考文章： 1，https://github.com/luckybilly/AndroidComponentizeLibs 2，http://blog.spinytech.com/2016/12/28/android_modularization/</p>]]></content>
    
    <summary type="html">
    
      在现在主流的Android组件化架构中，组件与组件直接通信机制很是关键，通信方便、快速可以使得组件之间的耦合度降到最低，组件更内聚和高效。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>我所理解的HTTP协议</title>
    <link href="http://cryallen.com/2018/07/21/2018-07-21-httpsay/"/>
    <id>http://cryallen.com/2018/07/21/2018-07-21-httpsay/</id>
    <published>2018-07-21T15:02:38.000Z</published>
    <updated>2020-04-20T03:50:24.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>对于HTTP协议，想必大家都不陌生，在工作中经常用到，特别是针对移动端和前端开发人员来说，要获取服务端数据，基本走的网络请求都是基于HTTP协议，特别是RESTFUL + JSON 这种搭配特别主流。那如果让大家具体讲讲HTTP协议背后的历史、原理、交互流程、与HTTPS区别、身份认证、Web攻防技术等等信息，大家能讲的出来吗，反正我讲的也是一知半解，虽然会经常看这方面的文章，但也只是在具体项目进行开发过程中碰到对某个概念不清楚，才会去特意看下，却没有特意去总结归纳为一直知识点，没有完整的表达描述过，其实对这个知识点还是没掌握好的，所以用写作方式来进行阐述是很好一个方式，目前也正在践行着。</p><h3 id="思维导图">思维导图</h3><p>在写作之前，这篇文章主要想讲的内容在以下这张图中，通过做思维导图方式来表达一篇文章内容，我觉得逻辑会特别清楚，同时也是对某个知识点会很好进行总结归纳。</p><figure><img src="./http.png" alt="HTTP"><figcaption>HTTP</figcaption></figure><p>###HTTP历史</p><p><strong>发展由来</strong></p><p>在1989 年 3 月， 互联网还只属于少数人。 在这一互联网的黎明期， HTTP 诞生了。CERN（ 欧洲核子研究组织）的蒂姆 • 伯纳斯 - 李（ Tim BernersLee）博士提出了一种能让远隔两地的研究者们共享知识的设想。 最初设想 的 基本理念是： 借助多文档之间相互关联形成的超文本（ HyperText），连成可相互参阅的 WWW（ World Wide Web，万维网）。并且版本从 HTTP 1.0 到 HTTP 1.1 再到现在的 HTTP 2.0，目前主流版本还是基于 HTTP 1.1，HTTP 协议同时也是目前互联网上应用最为广泛的一种网络协议，所有的 WWW 文件都必须遵守这个标准，设计HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。</p><p><strong>TCP/IP</strong></p><p>我们都知道 HTTP 协议在 根据 TCP/IP 网络分层来看，它是属于应用层，TCP/IP 网络分层总共有5层，它是属于最上层，它的下一层则是 TCP/IP 传输层，如图所示：</p><figure><img src="/2018/07/21/2018-07-21-httpsay/tcpip.png" alt="TCP通信过程"><figcaption>TCP通信过程</figcaption></figure><p>从逻辑平行来看，发送方和接受方都是处于同一平行层，发送方每层传递的信息会在下一层进行信息封装加密，然后逐层传递，通过实际物理链路进行传递，然后接收方接收到信息进行解密分析，不断把报文头信息进行还原，最后处理发送方发送过来的信息，处理完之后，再用同样的方式传递回去，两者传输通信方式是全双工模式。在此之前需要一个建立连接过程，所谓的三次握手，通信结束也有断开连接过程，也就是四次握手断开操作。</p><p>在讲述 HTTP 协议为何了解 TCP/IP 内容呢，因为我们需要知道 HTTP 协议实际通信过程是怎么样的，它所依赖的环境是怎么样的，从切面角度去看，实际是经历了这5层通信，从平面去看，默认以为是客户端与服务端仅仅进行平层通信而已，那是因为封装的方便。</p><h3 id="http-1.1">HTTP 1.1</h3><p>因为目前主流在用的还是以 HTTP 1.1 版本为主，那就用这个版本来分析。</p><h4 id="http请求协议详解">HTTP请求协议详解</h4><p>一个典型HTTP1.1的请求协议报文结构，大体上可以分为三块，即请求行、头部、消息主体。</p><figure><img src="./httpRequest.jpeg" alt="HTTP请求报文协议"><figcaption>HTTP请求报文协议</figcaption></figure><p><strong>请求行</strong></p><p>请求行包含HTTP请求方法、请求的URL、HTTP协议版本三个内容，它们之间以空格间隔，并以回车+换行结束。HTTP请求方法有下面几种,常用的有GET、POST请求。</p><ul><li>OPTIONS</li><li>GET</li><li>HEAD</li><li>POST</li><li>DELETE</li><li>TRACE</li><li>CONNECT</li></ul><p><strong>请求头部</strong></p><p>头部可以分成三个部分，为常用头域、请求头域、实体头域。其中常用头域和实体头域部分内容在响应协议部分也有相同的定义。</p><p><strong>常用头域</strong></p><table><thead><tr class="header"><th>常用头域名称</th><th>作用描述</th></tr></thead><tbody><tr class="odd"><td>Cache-Control</td><td>缓存控制</td></tr><tr class="even"><td>Connection</td><td>HTTP 1.1默认是支持长连接的(Keep-Alive)，如果不希望支持长连接则需要在此域中写入close</td></tr><tr class="odd"><td>Date</td><td>表明消息产生的日期和时间</td></tr><tr class="even"><td>Pragma</td><td></td></tr><tr class="odd"><td>Trailer</td><td></td></tr><tr class="even"><td>Transfer-Encoding</td><td>告知接收端为了保证报文的可靠传输，对报文采用了什么编码方式</td></tr><tr class="odd"><td>Upgrade</td><td>给出了发送端可能想要”升级”使用的新版本或协议</td></tr><tr class="even"><td>Via</td><td>显示了报文经过的中间节点(代理、网关)</td></tr><tr class="odd"><td>Warning</td><td></td></tr></tbody></table><p><strong>请求头域</strong></p><table><colgroup><col style="width: 24%"><col style="width: 75%"></colgroup><thead><tr class="header"><th>请求头域名称</th><th>作用描述</th></tr></thead><tbody><tr class="odd"><td>Accept</td><td>指明请求端可以接受处理的媒体类型</td></tr><tr class="even"><td>Accept-Charset</td><td>指明请求端可以接受的字符集</td></tr><tr class="odd"><td>Accept-Encoding</td><td>指明请求端可以接受的编码格式</td></tr><tr class="even"><td>Authorization</td><td>授权</td></tr><tr class="odd"><td>Expect</td><td>允许客户端列出某请求所要求的服务器行为</td></tr><tr class="even"><td>From</td><td>提供了客户端用户的E-mail地址</td></tr><tr class="odd"><td>Host</td><td>指明请求端的网络主机和端口号</td></tr><tr class="even"><td>If-Match</td><td>服务端在响应头部里面返回ETag信息，客户端请求时在头部添加If-Match（值为响应的ETag），服务端接收后判断ETag是否相同，若相同则处理请求，否则不处理请求。</td></tr><tr class="odd"><td>If-Modified-Since</td><td>客户端在请求某一资源文件时，在头部加上If-Modified-Since(值为该资源文件的最后修改时间)，服务端接收后将客户端上报的修改时间与服务器存储的文件的最后修改时间做对比，如果相同，说明资源文件没有更新，返回304状态码，告诉客户端使用原来的缓存文件。否则返回资源内容。</td></tr><tr class="even"><td>If-None-Match</td><td>服务端在响应头部里面返回ETag信息，客户端请求时在头部添加If-None-Match(值为响应的ETag)，服务端接收后判断ETag是否相同，若相同，说明资源没有更新，返回304状态码，告诉客户端使用原来的缓存文件。否则返回资源内容。</td></tr><tr class="odd"><td>If-Range</td><td>该头域与Range头域一起使用，服务端在响应头部里面返回ETag信息,客户端请求时在头部添加If-Range（值为响应的ETag)，服务端接收后判断ETag是否相同，若相同，则返回状态码206，返回内容为Range指定的字节范围。若不相同，则返回状态码200，返回内容为整个实体。</td></tr><tr class="even"><td>If-Unmodified-Since</td><td>客户端在请求某一资源文件时，在头部加上If-Modified-Since(值为该资源文件的最后修改时间)，端接收后将客户端上报的修改时间与服务器存储的文件的最后修改时间做对比，如果相同，则返回资源内容，如果不相同则返回状态码412。</td></tr><tr class="odd"><td>Max-Forwards</td><td>配合TRACE、OPTIONS方法使用，限制在通往服务器的路径上的代理或网关的数量。</td></tr><tr class="even"><td>Proxy-Authorization</td><td>代理授权</td></tr><tr class="odd"><td>Range</td><td>表示客户端向服务端请求指定范围的字节数量:Range:bytes=0-500表示请求第1个到第501个的字节数量。Range:bytes=100-表示请求第101到文件倒数第一个字节的字节数量。Range:bytes=-500表示请求最后500个字节的数量。Range可以同时指定多组(Range:bytes=500-600,601-999)。并不是所有的服务端都支持字节范围请求的，如果支持字节范围请求，服务端会返回状态码206，若不支持则会返回200，客户端需要根据状态码来判断服务端是否支持字节范围操作。此域可用于断点下载，即在断点处请求后面的内容，也可用于多线程下载同一个文件，每个线程负责一个文件的一部分下载工作，多个线程协同完成整个文件的下载。</td></tr><tr class="even"><td>Referer</td><td>用于指定客户端请求的来源，是从搜索引擎过来的？还是从其它网站链接过来的？服务器根据此域，有时可以用做防盗链处理，不在指定范围内的来源，统统拒绝。</td></tr><tr class="odd"><td>TE</td><td>指明客户端可以接受哪些传输编码。</td></tr></tbody></table><p><strong>实体头域</strong></p><table><thead><tr class="header"><th>实体头域名称</th><th>作用描述</th></tr></thead><tbody><tr class="odd"><td>Allow</td><td>指明被请求的资源所支持的方法，如GET、HEAD、PUT</td></tr><tr class="even"><td>Content-Encoding</td><td>指明实体内容所采用的编码方式</td></tr><tr class="odd"><td>Content-Language</td><td>指明实体内容使用的语言</td></tr><tr class="even"><td>Content-Length</td><td>指明请求实体的字节数量</td></tr><tr class="odd"><td>Content-Location</td><td>可以用来为实体提供对应资源的位置</td></tr><tr class="even"><td>Content-MD5</td><td>指定实体内容的MD5，用于内容的完整性校验(base64的128位MD5)</td></tr><tr class="odd"><td>Content-Range</td><td></td></tr><tr class="even"><td>Content-Type</td><td>指定实体的媒体类型</td></tr><tr class="odd"><td>Expires</td><td>指明实体的过期时间</td></tr><tr class="even"><td>Last-Modified</td><td>指明实体最后被修改的时间</td></tr></tbody></table><h4 id="http响应协议详解">HTTP响应协议详解</h4><p>HTTP1.1的响应协议报文结构，大体上可以分为三块，即状态行、头部、消息主体。</p><figure><img src="./httpResponse.jpeg" alt="HTTP响应报文协议"><figcaption>HTTP响应报文协议</figcaption></figure><p><strong>状态行</strong></p><p>状态行包含HTTP协议版本、状态码、原因短语三个内容，它们之间以空格间隔，并以回车+换行结束。</p><p>状态码由三位数字组成，第一位数字定义了响应类型，主要有如下五种类型的状态码</p><table><thead><tr class="header"><th>状态码类型</th><th>作用描述</th></tr></thead><tbody><tr class="odd"><td>1xx</td><td>报告（请求被接收，继续处理）</td></tr><tr class="even"><td>2xx</td><td>成功（请求被成功的接收并处理）</td></tr><tr class="odd"><td>3xx</td><td>重发</td></tr><tr class="even"><td>4xx</td><td>客户端出错（客户端错误的协议格式和不能处理的请求）</td></tr><tr class="odd"><td>5xx</td><td>服务器出错（服务器无法完成有效的请求处理）</td></tr></tbody></table><p>状态码和对应的原因短语详细描述</p><table><thead><tr class="header"><th>状态码</th><th>原因短语</th><th>中文描述</th></tr></thead><tbody><tr class="odd"><td>100</td><td>Continue</td><td>继续</td></tr><tr class="even"><td>101</td><td>Switching Protocols</td><td>切换协议</td></tr><tr class="odd"><td>200</td><td>OK</td><td>成功</td></tr><tr class="even"><td>201</td><td>Created</td><td>已创建</td></tr><tr class="odd"><td>202</td><td>Accepted</td><td>接受</td></tr><tr class="even"><td>203</td><td>Non-Authoritative information</td><td>非权威信息</td></tr><tr class="odd"><td>204</td><td>No Content</td><td>无内容</td></tr><tr class="even"><td>205</td><td>Reset Content</td><td>重置内容</td></tr><tr class="odd"><td>206</td><td>Partial Content</td><td>部分内容</td></tr><tr class="even"><td>300</td><td>Multiple Choices</td><td>多个选择</td></tr><tr class="odd"><td>301</td><td>Moved Permanently</td><td>永久移动</td></tr><tr class="even"><td>302</td><td>Found</td><td>发现</td></tr><tr class="odd"><td>303</td><td>See Other</td><td>见其它</td></tr><tr class="even"><td>304</td><td>Not Modified</td><td>没有改变</td></tr><tr class="odd"><td>305</td><td>Use Proxy</td><td>使用代理</td></tr><tr class="even"><td>307</td><td>Temporary Redirect</td><td>临时重发</td></tr><tr class="odd"><td>400</td><td>Bad Request</td><td>坏请求</td></tr><tr class="even"><td>401</td><td>Unauthorized</td><td>未授权的</td></tr><tr class="odd"><td>402</td><td>Payment Required</td><td>必需的支付</td></tr><tr class="even"><td>403</td><td>Forbidden</td><td>禁用</td></tr><tr class="odd"><td>404</td><td>Not Found</td><td>没有找到</td></tr><tr class="even"><td>405</td><td>Method Not Allowed</td><td>方法不被允许</td></tr><tr class="odd"><td>406</td><td>Not Acceptable</td><td>不可接受的</td></tr><tr class="even"><td>407</td><td>Proxy Authentication Required</td><td>需要代理验证</td></tr><tr class="odd"><td>408</td><td>Request Timeout</td><td>请求超时</td></tr><tr class="even"><td>409</td><td>Confilict</td><td>冲突</td></tr><tr class="odd"><td>410</td><td>Gone</td><td>不存在</td></tr><tr class="even"><td>411</td><td>Length Required</td><td>长度必需</td></tr><tr class="odd"><td>412</td><td>Precondition Failed</td><td>先决条件失败</td></tr><tr class="even"><td>413</td><td>Request Entity Too Large</td><td>请求实体太大</td></tr><tr class="odd"><td>414</td><td>Request-URI Too Long</td><td>请求URI太长</td></tr><tr class="even"><td>415</td><td>Unsupported Media Type</td><td>不支持的媒体类型</td></tr><tr class="odd"><td>416</td><td>Requested Range Not Satisfiable</td><td>请求范围不被满足</td></tr><tr class="even"><td>417</td><td>Expectation Failed</td><td>期望失败</td></tr><tr class="odd"><td>500</td><td>Internal Server Error</td><td>内部服务器错误</td></tr><tr class="even"><td>501</td><td>Not Implemented</td><td>服务端没有实现</td></tr><tr class="odd"><td>502</td><td>Bad Gateway</td><td>坏网关</td></tr><tr class="even"><td>503</td><td>Service Unavailable</td><td>服务不能获得</td></tr><tr class="odd"><td>504</td><td>Gateway Timeout</td><td>网关超时</td></tr><tr class="even"><td>505</td><td>HTTP Version Not Supported</td><td>HTTP协议版本不支持</td></tr></tbody></table><p><strong>响应头域</strong></p><table><thead><tr class="header"><th>响应头域名称</th><th>作用描述</th></tr></thead><tbody><tr class="odd"><td>Accept-Ranges</td><td>服务器向客户端指明服务器对范围请求的接受度</td></tr><tr class="even"><td>Age</td><td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td></tr><tr class="odd"><td>ETag</td><td>实体标签</td></tr><tr class="even"><td>Location</td><td>指定重定向的URI</td></tr><tr class="odd"><td>Proxy-Autenticate</td><td>它指出认证方案和可应用到代理的该URL上的参数</td></tr><tr class="even"><td>Retry-After</td><td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td></tr><tr class="odd"><td>Server</td><td>指明服务器用于处理请求的软件信息</td></tr><tr class="even"><td>Vary</td><td>告诉下游代理是使用缓存响应还是从原始服务器请求</td></tr><tr class="odd"><td>WWW-Authenticate</td><td>表明客户端请求实体应该使用的授权方案</td></tr></tbody></table><p><strong>交互流程</strong></p><figure><img src="./httpCommunication.jpg" alt="HTTP通信过程"><figcaption>HTTP通信过程</figcaption></figure><p>整体通信其实就是发送/响应过程，一个请求过去，对方有响应内容来返回，请求发送和响应回答方式，同时 HTTP 1.1 的特点是无状态的、快速响应的，一次连接则马上就断开。HTTP 2.0 则是相反，完善了 HTTP 1.1 出现的问题，两者连接是可复用的，同时可支持并行发送，一次多个文件传递，多个文件响应，支持传递的文件大小以二进制方式，这样确保可支持更大文件，在安全性上比 HTTP 1.1上更强大，具体细节可查阅相关文档。</p><p><strong>URL 和 URI</strong></p><p>这里有必要提下 URL 和 URI 这个两个名词的区别。URL表示标记了一个WWW互联网资源（用地址标记），并给出了他的访问地址。而URI表示一个网络资源，仅此而已。</p><h3 id="https">HTTPS</h3><p><strong>通信流程</strong></p><figure><img src="./httpsCommunication.png" alt="HTTPS通信过程"><figcaption>HTTPS通信过程</figcaption></figure><p>具体步骤：</p><p>步骤 1：客户端通过发送 Client Hello 报文开始 SSL 通信。 报文中包含客户端支持的 SSL 的指定版本、 加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</p><p>步骤 2：服务器可进行 SSL 通信时， 会以 Server Hello 报文作为应答。 和客户端一样， 在报文中包含 SSL 版本 以及加密组件。 服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</p><p>步骤 3：之后服务器发送 Certificate 报文。 报文中包含公开密钥证书。</p><p>步骤 4：最后服务器发送 Server Hello Done 报文通知客户端， 最初阶段的 SSL 握手协商部分结束。</p><p>步骤 5：SSL 第一次握手结束之后， 客户端以 Client Key Exchange 报文作为回应。 报文中包含通信加密中使用 的一种被称为 Pre- master secret 的随机密码串。 该报文已用步骤 3 中的公开密钥进行加密。</p><p>步骤 6：接着客户端继续发送 Change Cipher Spec 报文。 该报文会提示服务器， 在此报文之后的通信会采用 Pre- master secret 密钥加密。</p><p>步骤 7：客户端发送 Finished 报文。 该报文包含连接至今全部报文的整体校验值。 这次握手协商是否能够成功， 要以服务器是否能够正确解密该报文作为判定标准。</p><p>步骤 8：服务器同样发送 Change Cipher Spec 报文。</p><p>步骤 9：服务器同样发送 Finished 报文。</p><p>步骤 10：服务器和客户端的 Finished 报文交换完毕之后， SSL 连接就算建立完成。 当然， 通信会受到 SSL 的保护。 从此处开始进行应用层协议的通信， 即发送 HTTP 请求。</p><p>步骤 11： 应用层协议通信， 即发送 HTTP 响应。</p><p>步骤 12： 最后 由 客户 端断开连接。 断开连接时， 发送 close_ notify 报文。 上图做了一些省略， 这步之后再 发送 TCP FIN 报文来关闭与 TCP 的通信。</p><p><strong>加密算法</strong></p><p>常见的加密<strong>算法</strong>可以分成三类，对称加密算法，非对称加密算法和Hash算法。</p><blockquote><p><strong>对称加密</strong></p><p>指加密和解密使用相同密钥的加密算法。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。假设两个用户需要使用对称加密方法加密然后交换数据，则用户最少需要2个密钥并交换使用，如果企业内用户有n个，则整个企业共需要n×(n-1) 个密钥，密钥的生成和分发将成为企业信息部门的恶梦。对称加密算法的安全性取决于加密密钥的保存情况，但要求企业中每一个持有密钥的人都保守秘密是不可能的，他们通常会有意无意的把密钥泄漏出去——如果一个用户使用的密钥被入侵者所获得，入侵者便可以读取该用户密钥加密的所有文档，如果整个企业共用一个加密密钥，那整个企业文档的保密性便无从谈起。</p><p><strong>常见的对称加密算法：</strong>DES、3DES、DESX、Blowfish、IDEA、RC4、RC5、RC6和AES</p></blockquote><blockquote><p><strong>非对称加密</strong></p><p>指加密和解密使用不同密钥的加密算法，也称为公私钥加密。假设两个用户要加密交换数据，双方交换公钥，使用时一方用对方的公钥加密，另一方即可用自己的私钥解密。如果企业中有n个用户，企业需要生成n对密钥，并分发n个公钥。由于公钥是可以公开的，用户只要保管好自己的私钥即可，因此加密密钥的分发将变得十分简单。同时，由于每个用户的私钥是唯一的，其他用户除了可以可以通过信息发送者的公钥来验证信息的来源是否真实，还可以确保发送者无法否认曾发送过该信息。非对称加密的缺点是加解密速度要远远慢于对称加密，在某些极端情况下，甚至能比非对称加密慢上1000倍。</p><p><strong>常见的非对称加密算法：</strong>RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）</p></blockquote><blockquote><p><strong>Hash算法</strong></p><p>Hash算法特别的地方在于它是一种单向算法，用户可以通过Hash算法对目标信息生成一段特定长度的唯一的Hash值，却不能通过这个Hash值重新获得目标信息。因此Hash算法常用在不可还原的密码存储、信息完整性校验等。</p><p><strong>常见的Hash算法：</strong>MD2、MD4、MD5、HAVAL、SHA、SHA-1、HMAC、HMAC-MD5、HMAC-SHA1</p></blockquote><p><strong>数字证书和数字签名证书</strong></p><blockquote><p>数字证书是由权威的CA机构颁发的无法被伪造的证书，用于校验发送方实体身份的认证。解决如上问题，只需要发送方A找一家权威的CA机构申请颁发数字证书，证书内包含A的相关资料信息以及A的公钥，然后将正文A、数字证书以及A生成的数字签名发送给B，此时中间人M是无法篡改正文内容而转发给B的，因为M不可能拥有这家CA的私钥，无法随机制作数字证书。当然，如果M也申请了同一家CA的数字证书并替换发送修改后的正文、M的数字证书和M的数字签名，此时B接收到数据时，会校验数字证书M中的信息与当前通信方是否一致，发现数字证书中的个人信息为M并非A，说明证书存在替换风险，可以选择中断通信。</p><p>为什么CA制作的证书是无法被伪造的？其实CA制作的数字证书内还包含CA对证书的数字签名，接收方可以使用CA公开的公钥解密数字签名，并使用相同的摘要算法验证当前数字证书是否合法。制作证书需要使用对应CA机构的私钥，因此CA颁发的证书是无法被非法伪造的（CA的私钥泄露不在考虑讨论与考虑范围内）。</p><p>数字证书签名的基础就是非对称加密算法和数字签名，其无法伪造的特性使得其应用面较广，HTTPS中就使用了数字证书来保证握手阶段服务端传输的公钥的可靠性。</p><p>数字签名是非对称加密算法和摘要算法的一种应用，能够保证信息在传输过程中不被篡改，也能保证数据不能被伪造。使用时，发送方使用摘要算法获得发布内容的摘要，然后使用私钥对摘要进行加密（加密后的数据就是数字签名），然后将发布内容、数字签名和公钥一起发送给接收方即可。接收方接收到内容后，首选取出公钥解密数字签名，获得正文的摘要数据，然后使用相同的摘要算法计算摘要数据，将计算的摘要与解密的摘要进行比较，若一致，则说明发布内容没有被篡改。</p></blockquote><h3 id="身份认证">身份认证</h3><p>计算机本身无法判断坐在显示器前的使用者的身份。 进一步说， 也无法确认网络的那头究竟有谁。 可见，为了 弄清究竟是谁在访问服务器， 就得让对方的客户端自报家门。 比如，就算正在访问服务器的对方声称自己是 小明， 身份是否属实这点却也无从谈起。 为确认小明本人是否真的具有访问系统的权限， 就需要核对“ 登录者 本人才知道的信息”、“ 登录者本人才会有的信息”。所以才需要以下几种验证。</p><ul><li><strong>Basic认证</strong>：Basic 认证是HTTP中非常简单的认证方式，因为简单，所以不是很安全，不过仍然非常常用。当一个客户端向一个需要认证的HTTP服务器进行数据请求时，如果之前没有认证过，HTTP服务器会返回401状态码，要求客户端输入用户名和密码。用户输入用户名和密码后，用户名和密码会经过BASE64加密附加到请求信息中再次请求HTTP服务器，HTTP服务器会根据请求头携带的认证信息，决定是否认证成功及做出相应的响应。</li><li><strong>Digest认证：</strong>Digest 认证试图解决 Basic 认证的诸多缺陷而设计，用户密码在整个认证过程中是个关键性要素。</li><li><strong>SSL客户端认证：</strong>从使用用户 ID 和密码的认证方式方面来讲， 只要二者的内容正确， 即可认证是本人的 行为。 但如果用户 ID 和密码被盗， 就很有可能被第三者冒充。 利用 SSL 客户端认证则可以避免 该情况的发生。 SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。 凭借客户端证书认证， 服务器可确认访问是否来自已登录的客户 端。</li></ul><h3 id="web攻防技术">Web攻防技术</h3><p>常见的web攻击技术有哪些呢，如下：</p><p>1，XSS 跨站攻击技术：主要是攻击者往网页里嵌入恶意脚本，或者通过改变 HTML 元素属性来实现攻击，主要原因在于开发者对用户的变量直接使用导致进入 HTML 中会被直接编译成 JS，通常的 GET 请求通过 URL 来传参，可以在 URL 中传入恶意脚本，从而获取信息，解决方法：特殊字符过滤。</p><p>2，SQL 注入攻击：主要是就是通过把 SQL 命令插入到 Web <strong>表单</strong> 提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令，比如 select * from test where username=&quot;wuxu&quot; or 1=1，这样会使用户跳过密码直接登录，具体解决方案：</p><ul><li>特殊字符过滤，不要用拼接字符串的方法来凑sql语句。</li><li>对 sql 语句进行预编译，比如 java 的 preparedstatement。</li><li>关闭错误信息，攻击者可能会通过不断的尝试来得到数据库的一些信息，所以关闭错误信息变得重要起来。</li><li>客户端对数据进行加密，使原来传进来的参数因为加密而被过滤掉。</li><li>控制数据库的权限，比如只能 select，不能 insert，防止攻击者通过 select * from test ；drop tables这种操作。</li></ul><p>3，OS 命令注入攻击：系统提供命令执行类函数主要方便处理相关应用场景的功能.而当不合理的使用这类函数，同时调用的变量未考虑安全因素，就会执行恶意的命令调用，被攻击利用。主要原因是服务端在调用系统命令时采用的是字符串连接的方式，比如 a=&quot;a.txt;rm -rf *&quot;,system(&quot;rm -rf {$a}&quot;)，这会给服务端带去惨痛的代价，具体解决方案：</p><ul><li>在程序开发时少用系统命令，执行命令的参数尽量不要从外部获取。</li><li>参数特殊字符过滤</li></ul><p>4，HTTP 首部注入攻击</p><p>5，邮件首部注入攻击：它允许恶意攻击者注入任何邮件头字段,BCC、CC、主题等,它允许 <strong>黑客</strong> 通过注入手段从受害者的邮件服务器发送垃圾邮件。主要是利用邮件系统传参的bug来进行攻击，解决方法：1、使用正则表达式来过滤用用户提交的数据。例如,我们可以在输入字符串中搜索(r 或 n)。2、永远不要信任用户的输入。3、使用外部组建和库</p><p>6，目录遍历攻击：目录遍历是Http所存在的一个安全漏洞，它使得攻击者能够访问受限制的目录，并在Web服务器的根目录以外执行命令。</p><p>7，远程目录包含攻击，原理就是注入一段用户能控制的脚本或代码，并让服务端执行。比如 php 中的include($filename)，而此 filename 由用户传入，用户即可传入一段恶意脚本，从而对服务其造成伤害，解决方法：当采用文件包含函数的时候，不应动态传入，而应该有具体的文件名，如果动态传入，要保证动态变量不被用户所控制</p><p>8，会话劫持：这是一种通过获取用户Session ID后，使用该 Session ID 登录目标账号的攻击方法，此时攻击者实际上是使用了目标账户的有效 Session。会话劫持的第一步是取得一个合法的会话标识来伪装成合法用户，因此需要保证会话标识不被泄漏，通俗一点就是用户在登录时，唯一标示用户身份的 session id被劫持，使得攻击者可以用这个 session id 来进行登录后操作，而攻击者主要是通过 窃取：使用网络嗅探，XSS 攻击等方法获得。而第一种方式网络嗅探，我们可以通过 ssl 加密，也就是 https 来对报文进行加密，从而防止报文被截获，而第二种方式xss 攻击，方式在第一种已经给出，不再赘述。此外通过设置 HttpOnly。通过设置 Cookie 的 HttpOnly 为 true，可以防止客户端脚本访问这个 Cookie，从而有效的防止 XSS 攻击，还有就是设置 token 验证。关闭透明化Session ID。透明化 Session ID 指当浏览器中的 Http 请求没有使用 Cookie 来存放 Session ID 时，Session ID 则使用URL来传递。</p><p>9，会话固定：会话固定是会话劫持的一种，区别就是，会话固定是攻击者通过某种手段重置目标用户的SessionID，然后监听用户会话状态；用户携带sessionid进行登录，攻击者获取sessionid来进行会话，解决方案：服务端设置用户登录后的sessionid与登录前不一样即可，另外会话劫持的方法也可以用在会话固定上</p><p>10，csrf跨站伪造请求攻击：其实就是攻击者盗用了你的身份，以你的名义发送恶意请求。</p><p>总的来说，通过输出这么一篇文章，自己的对 HTTP 协议有了进一步的认知，同时也通过写作整理过程让自己对某一个知识点有很好的联想和串联，积累从点开始，然后形成面，最后就会有一个知识树生长起来。</p>]]></content>
    
    <summary type="html">
    
      对于HTTP协议，想必大家都不陌生，那如果让你讲讲来源、用途、HTTPS协议区别，你能讲出所以然来吗，我目前就是因为讲不是很清楚，所以有必要做个总结。
    
    </summary>
    
    
      <category term="基础" scheme="http://cryallen.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="基础" scheme="http://cryallen.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android组件化框架设计与实践</title>
    <link href="http://cryallen.com/2018/02/05/2018-02-05-AndroidComponent/"/>
    <id>http://cryallen.com/2018/02/05/2018-02-05-AndroidComponent/</id>
    <published>2018-02-05T14:47:50.000Z</published>
    <updated>2020-04-20T03:40:13.485Z</updated>
    
    <content type="html"><![CDATA[<p>在目前移动互联网时代，每个 APP 就是流量入口，与过去 PC Web 浏览器时代不同的是，APP 的体验与迭代速度影响着用户的粘性，这同时也对从事移动开发人员提出更高要求，进而移动端框架也层出不穷。</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image1.png" alt="服务端与移动端对比"><figcaption>服务端与移动端对比</figcaption></figure><p>上图显示的是传统的服务端架构和客户端 App 架构对比。传统的服务端架构中最底下是一个 OS，一般是 Linux，最上面服务端的业务，而中间有非常多的层次可以在架构上，按照我们的意愿搭建中间的各个层次的衔接环节，使得架构具有足够的灵活性和扩展性。但是到了 App 就会面对一个完全不同的现状，App 的OS（Android或iOS）本质上并不是一个很瘦的像 Linux 这样的 OS，而是在 OS 上有一个很重的 App Framework，开发一个普通的客户端应用所要用到的绝大多数接口都在 Framework 里，而上面的业务也是一个非常复杂多样化的业务，最后会发现“架构”是在中间的一个非常尴尬的夹心层，因为会遇到很多在服务端架构中不需要面临的挑战。比如以下两点：</p><ul><li>体积的制约。体积对用户来说是一个非常敏感的概念，如果我们要在架构上做很多事情的话，通常意味着架构占据的代码量会比较大。在服务端架构中我们可以容忍我们在架构层面去做几十兆的代码。但是对于客户端架构，即使你的架构只有一两兆，对于一个客户端可能都占据了 10%，20%的容量。</li><li>性能的挑战。从性能上来看，对于服务端架构我们通常关注的是吞吐率，我们不会去关注启动速度。一个服务端的启动哪怕是花了一两分钟，只要它运作起来吞吐率足够高，支持的并发能力足够好，响应速度足够快，我们就认为这是一个良好的架构。但客户端不同，客户端的进程对用户而言，往往是一个栈态的，手机里面使用完一个应用，退出之后可能过不了多久就会被回收掉，当用户下次再打开的时候，它会再次启动进程，需要重新完成一次初始化的流程。如果在这个上面做了很多事情的话，会导致程序启动的速度会很慢，在很多用户看来，这就是一种不可接受的用户体验。</li></ul><p>客户端 APP 与服务端在架构上是有着一定的区别，在选择对客户端架构需要谨慎对待，需要有许多权衡的条件，在此前提上，是否有一种归一的方式呢，可以分而治之，并行开发，把业务分隔成一个个单独的组件，整个架构围绕组件开发，构建也是组件，一切皆组件。答案是有的，那就是打造客户端组件框架。</p><h3 id="起源为何组件化">起源，为何组件化</h3><p>客户端 APP 自身在飞速发展，APP 版本不断迭代，新功能不断增加，业务模块数量不断增加，业务上的处理逻辑越变越复杂，同时每个模块代码也变得越来越多，这就引发一个问题，所维护的代码成本越来越高，稍微一改动可能就牵一发而动全身，改个小的功能点就需要回归整个 APP 测试，这就对开发和维护带来很大的挑战。同时原来APP 架构方式是单一工程模式，业务规模扩大，随之带来的是团队规模扩大，那就涉及到多人协作问题，每个移动端软件开发人员势必要熟悉如此之多代码，如果不按照一定的模块组件机制去划分，将很难进行多人协作开发，随着单一项目变大，而且 Andorid 项目在编译代码方面就会变得非常卡顿，在单一工程代码耦合严重，每修改一处代码后都需要重新编译打包测试，导致非常耗时，最重要的是这样的代码想要做单元测试根本无从下手，所以必须要有一个更灵活的架构去代替过去单一工程模式。</p><p>同样这样的问题在我们工作具体项目中处处碰到，就拿我们组内负责的某个移动端 APP 来说，就碰到如下几个问题：</p><ol type="1"><li>代码量膨胀，不利于维护，不利于新功能的开发。</li><li>项目工程构建速度慢，在一些电脑上写两句代码，重新编译测试的话编译速度起码 10-20 分钟，有的甚至更长。</li><li>不同模块之间代码耦合严重，比如消息模块严重耦合视频模块，如果修改视频模块，相应的消息模块也需要修改，不然会产生一连串问题。</li><li>每个模块之间都有引用第三方库，但有些第三方库版本不一致，导致打包 APP 时候代码冗余，容易引起版本冲突。</li><li>有些定制项目如果只需要消息模块，其他模块不需要的话，做不到按需加载打包，因为模块之间有互联依赖。</li><li>现有项目基于以前其他人项目基础上开发，经手的人次过多，存在着不同的代码风格，项目中代码规范乱，类似的功能写法却不一样，导致不统一。</li></ol><p>项目工程架构模式改变是大势所趋，那又该如何做呢？那就是：<strong>打造组件化开发框架</strong>，用以解决目前所面临问题，在讲解如何打造之前，需要谈谈组件化概念，组件化框架是什么。</p><h3 id="概念组件化是什么">概念，组件化是什么</h3><p>问：什么是组件，什么是组件化？</p><p>答：在软件开发领域，<strong>组件（Component）</strong>是对数据和方法的简单封装，功能单一，高内聚，并且是业务能划分的最小粒度。举个我们生活中常见的例子就是电脑主板上每个元件电容器件，每个元件负责的功能单一、容易组装、即插即拔，但作用有限，需要一定的依赖条件才可使用。如下图：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image2.jpg" alt="电容元件"><figcaption>电容元件</figcaption></figure><p>那么同样，<strong>组件化</strong> 就是基于组件可重用的目的上，将一个大的软件系统按照分离关注点的形式，拆分成多个独立的组件，使得整个软件系统也做到电路板一样，是单个或多个组件元件组装起来，哪个组件坏了，整个系统可继续运行，而不出现崩溃或不正常现象，做到更少的耦合和更高的内聚。</p><p>问：组件化、模块化容易混淆，两者区别又是什么？</p><p>答：模块化就是将一个程序按照其功能做拆分，分成相互独立的模块，以便于每个模块只包含与其功能相关的内容，模块我们相对熟悉,比如登录功能可以是一个模块,搜索功能可以是一个模块等等。而组件化就是更关注可复用性，更注重关注点分离，如果从集合角度来看的话，可以说往往一个模块包含了一个或多个组件，或者说模块是一个容器，由组件组装而成。简单来说，组件化相比模块化粒度更小，两者的本质思想都是一致的，都是把大往小的方向拆分，都是为了复用和解耦，只不过模块化更加侧重于业务功能的划分，偏向于复用，组件化更加侧重于单一功能的内聚，偏向于解耦。</p><p>问：组件化能带来什么好处？</p><p>答：简单来说就是提高工作效率，解放生产力，好处如下：</p><ul><li>代码简洁，冗余量少，维护方便，易扩展新功能。</li><li>提高编译速度，从而提高并行开发效率。</li><li>避免模块之间的交叉依赖，做到低耦合、高内聚。</li><li>引用的第三方库代码统一管理，避免版本统一，减少引入冗余库。</li><li>定制项目可按需加载，组件之间可以灵活组建，快速生成不同类型的定制产品。</li><li>制定相应的组件开发规范，可促成代码风格规范，写法统一。</li><li>系统级的控制力度细化到组件级的控制力度，复杂系统构建变成组件构建。</li><li>每个组件有自己独立的版本，可以独立编译、测试、打包和部署。</li></ul><h3 id="设计构建组件化框架">设计，构建组件化框架</h3><p>回到刚开始讲的 APP 单一工程模式，看张常见 APP 单一工程模式架构图：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image3.png" alt="APP单一工程模式架构"><figcaption>APP单一工程模式架构</figcaption></figure><p>上图是目前比较普遍使用的 Android APP 技术架构，往往是在一个界面中存在大量的业务逻辑，而业务逻辑中充斥着各种网络请求、数据操作等行为，整个项目中也没有模块的概念，只有简单的以业务逻辑划分的文件夹，并且业务之间也是直接相互调用、高度耦合在一起的。单一工程模型下的业务关系，总的来说就是：你中有我，我中有你，相互依赖，无法分离。如下图：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image4.png" alt="业务模块互相耦合"><figcaption>业务模块互相耦合</figcaption></figure><p>组件化的指导思想是：分而治之，并行开发，一切皆组件。要实现组件化，无论采用什么样的技术方式，需要考虑以下七个方面问题：</p><ol type="1"><li>代码解耦。如何将一个庞大的工程分成有机的整体？</li><li><p>组件单独运行。因为每个组件都是高度内聚的，是一个完整的整体，如何让其单独运行和调试？</p></li><li>组件间通信。由于每个组件具体实现细节都互相不了解，但每个组件都需要给其他调用方提供服务，那么主项目与组件、组件与组件之间如何通信就变成关键？</li><li>UI 跳转。UI 跳转指的是特殊的数据传递，跟组件间通信区别有什么不同？</li><li>组件生命周期。这里的生命周期指的是组件在应用中存在的时间，组件是否可以做到按需、动态使用、因此就会涉及到组件加载、卸载等管理问题。</li><li>集成调试。在开发阶段如何做到按需编译组件？一次调试中可能有一两个组件参与集成，这样编译时间就会大大降低，提高开发效率。</li><li><p>代码隔离。组件之间的交互如果还是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用，也就是如何从根本上杜绝耦合的产生？</p></li></ol><p>组件化架构目标：告别结构臃肿，让各个业务变得相对独立，业务组件在组件模式下可以独立开发，而在集成模式下又可以变为 AAR 包集成到“ APP 壳工程”中，组成一个完整功能的 APP。</p><p>先给出框架设计图，然后再对这七个问题进行一一解答。</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image5.png" alt="A组件化框架架构"><figcaption>A组件化框架架构</figcaption></figure><p>从图中可以看到，<strong>业务组件之间是独立的，互相没有关联</strong>，这些业务组件在集成模式下是一个个 Library，被 APP 壳工程所依赖，组成一个具有完整业务功能的 APP 应用，但是在组件开发模式下，业务组件又变成了一个个 Application，它们可以独立开发和调试，由于在组件开发模式下，业务组件们的代码量相比于完整的项目差了很远，因此在运行时可以显著减少编译时间。</p><p>各个业务组件通信是通过路由转发，如图：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image6.png" alt="路由转发通信"><figcaption>路由转发通信</figcaption></figure><p>这是组件化工程模型下的业务关系，业务之间将不再直接引用和依赖，而是通过“路由”这样一个中转站间接产生联系。</p><p>那么针对以上提出的七个问题，具体解决如下：</p><p>1，代码解耦问题</p><p>对已存在的项目进行模块拆分，模块分为两种类型，一种是功能组件模块，封装一些公共的方法服务等，作为依赖库对外提供，一种是业务组件模块，专门处理业务逻辑等功能，这些业务组件模块最终负责组装APP。</p><p>2，组件单独运行问题</p><p>通过 <strong>Gradle</strong> 脚本配置方式，进行不同环境切换。比如只需要把 Apply plugin: 'com.android.library' 切换成Apply plugin: 'com.android.application' 就可以，同时还需要在 AndroidManifest 清单文件上进行设置，因为一个单独调试需要有一个入口的 Activity。比如设置一个变量 isModule，标记当前是否需要单独调试，根据isModule 的取值，使用不同的 gradle 插件和 AndroidManifest 清单文件，甚至可以添加 Application 等 Java 文件，以便可以做一下初始化的操作。</p><p>3，组件间通信问题</p><p>通过接口+实现的结构进行组件间的通信。每个组件声明自己提供的服务 Service API，这些 Service 都是一些接口，组件负责将这些 Service 实现并注册到一个统一的路由 Router 中去，如果要使用某个组件的功能，只需要向Router 请求这个 Service 的实现，具体的实现细节我们全然不关心，只要能返回我们需要的结果就可以了。在组件化架构设计图中 Common 组件就包含了路由服务组件，里面包括了每个组件的路由入口和跳转。</p><p>4，UI 跳转问题</p><p>可以说 UI 跳转也是组件间通信的一种，但是属于比较特殊的数据传递。不过一般 UI 跳转基本都会单独处理，一般通过短链的方式来跳转到具体的 Activity。每个组件可以注册自己所能处理的短链的 Scheme 和 Host，并定义传输数据的格式，然后注册到统一的 UIRouter 中，UIRouter 通过 Scheme 和 Host 的匹配关系负责分发路由。但目前比较主流的做法是通过在每个 Activity 上添加注解，然后通过 APT 形成具体的逻辑代码。目前方式是引用阿里的 <a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">ARouter</a> 框架，通过注解方式进行页面跳转。</p><p>5，组件生命周期问题</p><p>在架构图中的核心管理组件会定义一个组件生命周期接口，通过在每个组件设置一个配置文件,这个配置文件是通过使用注解方式在编译时自动生成，配置文件中指明具体实现组件生命周期接口的实现类，来完成组件一些需要初始化操作并且做到自动注册，暂时没有提供手动注册的方式。</p><p>6，集成调试问题</p><p>每个组件单独调试通过并不意味着集成在一起没有问题，因此在开发后期我们需要把几个组件机集成到一个 APP 里面去验证。由于经过前面几个步骤保证了组件之间的隔离，所以可以任意选择几个组件参与集成，这种按需索取的加载机制可以保证在集成调试中有很大的灵活性，并且可以加大的加快编译速度。需要注意的一点是，每个组件开发完成之后，需要把 isModule 设置为 true并同步，这样主项目就可以通过参数配置统一进行编译。</p><p>7，代码隔离问题</p><p>如果还是 compile project(xxx:xxx.aar) 来引入组件，我们就完全可以直接使用到其中的实现类，那么主项目和组件之间的耦合就没有消除，那之前针对接口编程就变得毫无意义。我们希望只在 assembleDebug 或者 assembleRelease 的时候把 AAR 引入进来，而在开发阶段，所有组件都是看不到的，这样就从根本上杜绝了引用实现类的问题。</p><p>目前做法是主项目只依赖 Common 的依赖库，业务组件通过路由服务依赖库按需进行查找，用反射方式进行组件加载，然后在主工程中调用组件服务，组件与组件之间调用则是通过接口+实现进行通信，后续规划通过自定义Gradle 插件，通过字节码自动插入组件的依赖进行编译打包，实现自动筛选 assembleDebug 或 assembleRelease 这两个编译命任务，只有属于包含这两个任务的命令才引入具体实现类，其他的则不引入。</p><h3 id="代码具体项目实践">代码，具体项目实践</h3><p><strong>一，创建工程</strong></p><p>1，APP空壳工程</p><p>通过AndroidStudio创建一个APP空壳工程，如图：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image7.png" alt="APP空壳工程"><figcaption>APP空壳工程</figcaption></figure><p>然后在 APP 工程添加依赖具体业务组件 Module。比如：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image8.png" alt="依赖关系"><figcaption>依赖关系</figcaption></figure><p>2，具体业务组件Module</p><p>需要遵循一定组件命名规范，为何需要规范呢，因为需要通过组件命名规范来约束和保证组件的统一性和一致性，避免出现冲突。比如登陆组件，那么名称：b(类型)-ga(部门缩写)-login(组件名称)，这就是我们基于共同的约定进行命名的，为后期维护和扩展都带来辨识度。</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image9.png" alt="Login业务组件"><figcaption>Login业务组件</figcaption></figure><p><strong>二，业务组件配置文件</strong></p><p>1，build.gradle配置文修改。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isModule.toBoolean()) &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion rootProject.ext.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isModule.toBoolean()) &#123;</span><br><span class="line">            applicationId <span class="string">"com.hik.ga.business.login"</span></span><br><span class="line">            versionCode <span class="number">1</span></span><br><span class="line">            versionName <span class="string">"1.0"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//ARouter</span></span><br><span class="line">            javaCompileOptions &#123;</span><br><span class="line">                annotationProcessorOptions &#123;</span><br><span class="line">                    arguments = [ moduleName : project.getName() ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            <span class="keyword">if</span> (isModule.toBoolean()) &#123;</span><br><span class="line">                manifest.srcFile <span class="string">'src/main/module/AndroidManifest.xml'</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                manifest.srcFile <span class="string">'src/main/AndroidManifest.xml'</span></span><br><span class="line">                <span class="comment">//集成开发模式下排除debug文件夹中的所有Java文件</span></span><br><span class="line">                java &#123;</span><br><span class="line">                    exclude <span class="string">'debug/**'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">dependencies </span>&#123;</span><br><span class="line">    <span class="function">implementation <span class="title">project</span><span class="params">(<span class="string">':b-ga-common-function-comlib'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(!isModule.toBoolean()</span>) </span>&#123;</span><br><span class="line">        annotationProcessor <span class="string">"com.alibaba:arouter-compiler:$&#123;rootProject.annotationProcessor&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要有几点说明一下：</p><p>1，通过 isModule.toBoolean() 方法来进行组件间集成模式和组件模式的切换，包括模块是属于Application 还是 Library，由于集成了 ARouter，所以需要对 ARouter 配置文件进行处理。</p><p>2，如果组件模式下， 则需要重新设置 AndroidManifest.xml 文件，里面配置新的Application路径。比如Login组件单独运行 AndroidManifest 清单文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="keyword">package</span>=<span class="string">"hik.ga.business.applogin"</span> &gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:name=<span class="string">"debug.LoginApplication"</span></span><br><span class="line">        android:allowBackup=<span class="string">"false"</span></span><br><span class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span></span><br><span class="line">        android:label=<span class="string">"@string/login_btn_str"</span></span><br><span class="line">        android:supportsRtl=<span class="string">"true"</span></span><br><span class="line">        android:theme=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;activity</span><br><span class="line">            android:name=<span class="string">"hik.ga.business.applogin.login.views.LoginActivity"</span></span><br><span class="line">            android:label=<span class="string">"@string/login_btn_str"</span></span><br><span class="line">            android:launchMode=<span class="string">"singleTop"</span></span><br><span class="line">            android:screenOrientation=<span class="string">"portrait"</span></span><br><span class="line">            android:theme=<span class="string">"@style/AppTheme.NoActionBarFullScreen"</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span><br><span class="line">                &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>3，实现组件全局应用配置类，这个类的目的是在组件加载时初始化一些组件自身的资源，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginApplicationDelegate</span> <span class="keyword">implements</span> <span class="title">IApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LoginApplicationDelegate"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"*------------------onCreate()----------------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"*------------------enterBackground()----------------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterForeground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"*------------------enterForeground()----------------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveRemoteNotification</span><span class="params">(Map&lt;String, String&gt; message)</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"receiveRemoteNotification msg = "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"*------------------onTerminate()----------------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"*------------------onConfigurationChanged()----------------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"*------------------onLowMemory()----------------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">        EFLog.d(TAG, <span class="string">"*------------------onTrimMemory()----------------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三，路由服务</strong></p><p>1，定义公共组件路由API和入口，通过路由服务组件查找，如图：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image10.png" alt="公共路由服务"><figcaption>公共路由服务</figcaption></figure><p>2，组件路由实现</p><p>每个组件对外提供什么能力，首先需要在路由服务组件创建一个接口文件，如下是登陆组件接口声明和实现。</p><p>Login 接口：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image11.png" alt="定义Login接口"><figcaption>定义Login接口</figcaption></figure><p>具体实现：</p><figure><img src="/2018/02/05/2018-02-05-AndroidComponent/image12.png" alt="Login接口具体实现"><figcaption>Login接口具体实现</figcaption></figure><p>路由使用：比如我们想从设置页面跳转到登陆页面，使用 Login 接口里的方法，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ILoginProvider loginService = (ILoginProvider) ARouter.getInstance().build(RouterPath.ROUTER_PATH_TO_LOGIN_SERVICE).navigation();</span><br><span class="line"><span class="keyword">if</span>(loginService != <span class="keyword">null</span>)&#123;</span><br><span class="line">loginService.accountToLogin(AccountActivity.<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结">小结</h3><p>总的来说，通过应用组件化框架，使得我们工作中的具体项目变得更轻、好组装、编译构建更快，不仅提高工作效率，同时自我对移动应用开发认知有进一步的提升。因为组件化框架具有通用性，特别适用于业务模块迭代多，量大的大中型项目，是一个很好的解决方案。至于组件化框架之后演化的道路，则是打造组件仓库，完善组件开发规范，丰富组件功能库，有一些粒度大的业务组件可以进一步的细化，对组件功能进行更单一的内聚，同时基于现有组件化框架，便于过度在未来打造插件化框架，进一步升级 APP 动态能力，比如热加载、热修复等，那又是另一种使用场景和设计架构了，其实组件化和插件化框架最大的区别就是在是否具备动态更新能力。</p><p>把项目简化下，github地址：<a href="https://github.com/cr330326/DemoComponent" target="_blank" rel="noopener">DemoComponent</a>，感兴趣的可以下过去看看。</p><p>参考文章：</p><p>1，<a href="http://blog.csdn.net/guiying712/article/details/55213884" target="_blank" rel="noopener">Android组件化方案</a></p><p>2，<a href="https://www.jianshu.com/p/1b1d77f58e84" target="_blank" rel="noopener">Android彻底组件化方案实践</a></p>]]></content>
    
    <summary type="html">
    
      组件化概念很早就有了，并且在服务端开放，对于组件的理解会更深刻，那么在移动端又是一番怎么样的景象呢，设计实现如何呢，让我们去看看。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Android进阶之路</title>
    <link href="http://cryallen.com/2018/01/31/2018-01-31-AndroidAdvance/"/>
    <id>http://cryallen.com/2018/01/31/2018-01-31-AndroidAdvance/</id>
    <published>2018-01-31T15:26:22.000Z</published>
    <updated>2020-04-20T03:24:55.413Z</updated>
    
    <content type="html"><![CDATA[<p>过去十年是移动互联网蓬勃发展的黄金期，相信每个人也都享受到了移动互联网红利，在此期间，移动互联网经历了曙光期、成长期、成熟期、现在来说已经进入饱和期。依然记得在 2010-2013 年期间，从事移动开发工作不知有多火，有工作 1-2 年经验的开发者薪资基本是上万，对招的人专业素质要求也不高，入门即可。从 2016 年底至今来看，局面而是另外一番景象，移动开发市场过度饱和，市场上充斥着太多初级开发者，网上一直流传着移动互联网的寒冬，很多开发者找工作都没以前好找，一些岗位常常面临着百里挑一景象，没有个三五年经验，现在 HR 都是刷刷的翻过。</p><p>那么不禁要反问一句，现在从事移动开发，无论是 Android 还是 IOS，未来还有发展空间吗？还有随着移动开发越来越向大前端靠拢，甚至原本一些属于原生开发者的岗位也被前端开发人员胜任，想想在本来拥挤的房间里，还要分割本来属于自己那么点空间给他人用，变得更拥挤了，那滋味肯定是不好受了，那么未来我们的容身之地又在哪里呢？</p><p>笔者是从 2013 年底开始从事移动开发，刚毕业那么还是从事服务端开发，写着<strong>.NET</strong> 技术栈代码，至今也有接近 5 年的经验了。我想说，如果仅仅停留在表面的框架上，仅仅停留在使用别人的轮子上，而对于里面实现机制和原理不求甚解的话，那是很容易被淘汰的。但是如果，在移动开发上有一门深度的技能，比如在 Android 中你对移动架构有一定独特的见解，在性能优化上有一定的造诣，对于Android 系统体系有着清晰的认知，并且在一个行业积累了丰富的行业经验，也是亮点所在，那基本就是属于吃香的类型了。所以简单来说，对于一个概念不能停留在使用层面，要深入研究里面构造如何，为何会有这么一个概念，如果没有这个概念，那又会是呈现什么样的局面呢？开发编程也是一样，要追寻的是编程的道，而不是编程的术，别看现在各种流行框架大行其道，要是深入研究下去，一层一层拨开，你也会惊讶里面的实现机制无外乎就那么几种，套来套去，只不过一些开源库作者或组织封装的好而已。</p><p>基于目前市场表现，我们都知道下一个风口是 AI，但是作为一个移动开发者如何在即将来临的 AI 时代吃口红利呢。我的回答是：致力于做一个终身学习者，追本溯源去探寻代码世界哪些不变的道，你又会说了，哪些是道呢，简单举例下，比如编程思想、常用的设计模式、设计原则、算法和数据结构、网络通信机制、操作系统、重构原则、架构思维等等。同时在目前发展情形下，也越来越趋向全栈工程师的路线，借用之前在网上看到一篇文章的图，想进阶全栈工程师之路看需要哪些技能，如下： <img src="/2018/01/31/2018-01-31-AndroidAdvance/image1.png" alt="全栈工程师技能"></p><p>从图中可以看到技能被分成基础软技能、技术软硬技能，不仅要熟悉移动端开发套路，还要对大前端技术栈也有一定要掌握，同时对于服务端开发流程也要了解，我们很多从事移动开发人员，基本一开始就是从移动端入手，对于服务端开发很多时候是没有概念，这些跟那种从服务端开发转型做移动开发相比起来就处于一定的劣势了，有些甚至不知道 Restful 是什么，还以为是一种框架呢，其实这仅仅只是服务端约定好的接口编码风格而已。</p><h3 id="进阶之路">进阶之路</h3><p>为何会想起写这么一篇文章呢，一方面这几天工作需要，组内正好想规划 2018 年 Android 技术路线，简单来说就是目前我们组处在什么样的水平程度，目前所做项目用的技术处在什么阶段，在未来一年内，项目技术迭代该如何走，走到什么程度。另一方面是从事 Android 开发这几年，一直也没好好规划自己的技术路线，想认真整理下未来进阶之路。我们都知道 Android 技术体系一直很庞大，刚开始学的时候基本是从一个点一个点开始，没有系统全局观概念，同时也是学不过来，从做上层应用开始，到做 Framework 层，然后再到系统层做驱动开发各个层面的开发者都有，绝大部分开发者都是从应用层开发，往往做到 Framework 层就浅尝辄止了，一直以来，做Android 开发有这么两个说法，如果是做应用开发，往应用架构方向发展比较合适，如果是做系统层开发，往往底层驱动比较合适。</p><p>看张图： <img src="/2018/01/31/2018-01-31-AndroidAdvance/image2.png" alt="Android高级进阶"></p><p>挑些图中几个点简单来谈谈自己的一些想法。</p><p><strong>移动架构</strong></p><p>移动架构是 2017 移动技术年度TOP5话题之一，从中就体会到架构是有多火，记得刚开始学 Android 时候，哪有现在那么框架，那时候谈架构的更多是在服务端开发，比如多层架构，有展示层、业务逻辑层、数据访问层这就是最简单的三层模式，Android系统则是基于事件驱动响应机制设计的单页面架构，其实跟浏览器中的窗口页面是一样的， 系统中一直有个消息轮询监听机制，哪个事件被触发了，相应的响应代码进行处理，这些处理操作是被提前注册到系统中。</p><p>最早开始的开发模式基本是基于Android 系统自带 MVC 模式，Activity 基本类似于Control 的作用了，View 和Mode 互相耦合，后来才演化出现在主流的 MVP、MVVM 模式，顺便提一句，MVVM 模式其实是在微软 WPF 技术体系中提出来。</p><p>图中显示两个方面：</p><ul><li><p>展示层： MVC、MVP、MVVM、Clean、Flux、Android Architecture Components</p></li><li><p>架构层：模块化-&gt;组件化-&gt;插件化-&gt;沙盒/双开技术，比如可以双开微信，类似Docker， 每个页面都是插件，类似Vue.js中每个页面都是组件。</p></li></ul><p><strong>性能优化</strong></p><p>简单来说，一个APP 是需要从三个方面被关注的，业务功能、符合逻辑的交互、性能响应。如果我们在使用一个 APP 时候，经常滑动时经常卡顿、时不时崩溃、有些功能设计简直非常规，比如在 Web 网站有树层级等面包屑点击，你非要在手机也搞一个类似树级点击加载，那是不是有点强人所难了，我上拉下拉、左滑右滑不行吗，非要通过点击才行吗？那么性能优化核心是什么呢？追求快、稳、省、小，关注卡顿、内存泄漏和崩溃、代码质量和逻辑、安装包大小四个方面。想进一步的了解的话，可以查阅下笔者这篇文章《<a href="https://www.jianshu.com/p/9755da0f4e8f" target="_blank" rel="noopener">Android APP 性能优化的一些思考</a>》</p><p><strong>APP安全</strong></p><p>APP从代码安全、到传输安全，再到存储安全。代码可以通过混淆、加固来保证、传输安全基本基于加密算法和Token来保证传输的唯一性、存储应用不可逆加密算法进行设置、所以掌握一些密码学理论尤为重要，起码要知道哈希散列算法，对称加密和非对称加密等一些常见的加密算法。</p><p><strong>基础进阶</strong></p><p>我们平常在工作中碰到的View滑动冲突问题、其实通过掌握View工作机制和Android触摸事件体系就能轻易解决掉，常见解决方式有外部拦截法和内部拦截法，基于横坐标滑动距离与纵坐标滑动距离相减得出的值，判断出是左右滑动还是上下滑动。还有对于需要开发绚丽的动画效果，那么对于视图动画和属性动画一些特性必须有一定的了解。JNI 和 NDK 开发也是比较常见，特别对于一些做 SDK 项目为主的，这一块开发流程也是需要掌握，Android 中的四大组件工作机制其实底层应用的是Binder机制，我们不妨从 AIDL 这个接口来了解 Binder。</p><p><strong>持续集成</strong></p><p>持续集成编译环境是敏捷开发中很重要的一个组成部分，它能够有效地提高整个团队的生产效率，最大化的减少人为的出错的可能。比如，通过代码的持续提交，可以减少代码合并的痛苦，更快地与其他人代码集成，通过集成编译，能够及早地发现代码库存在的错误，并支持产品、测试等人员及时取包进行功能验证，所以对于Git、Gradle工具、Jenkins服务器需要掌握起来。</p><p><strong>开发语言</strong></p><p>今年可以说是 Kotlin 年，在 Google IO 之后 Kotlin 着实风光了一把，开发者对于效率的追求是 Kotlin 如此受欢迎的最大原因，而它的势头也很不错，跨平台的野心让更多人有了使用它的理由，如今看起来，它甚至比 Swift 更有前途。既然 Kotlin 已然成为 Android 世界的头等公民，与 Java 完全兼容，我们有什么理由不去拥抱它呢。</p><p><strong>大前端</strong></p><p>其实移动端开发也是属于前端开发，只不过原来我们所指的前端往往都是Web的前端开发人员，开发的是网站，而移动端何尝不是一种展示载体，同样有入口，只不过相比网站端移动端具体天然的可移动性、可便捷性等特性。随着 H5 兴起，原生能实现的功能同样在 H5 端也能实现，并且在体验性方面也逐渐提高，并且H5天生就具有动态性和跨平台，这也是 H5 能够一时潮流的原因之一。</p><p><strong>设计原则</strong></p><p>这些设计原创才是本质，才是不变的，才是我们需要真正要掌握的，开发语言特性、开发框架发展实在是太快了，我们更不上，不是有这么一句话吗，封装具体变化的，抽象起来就行，去追寻哪些不变的内容。掌握一种设计模式其实也就掌握一种解决方案，这些都是前人总结的知识结晶，基本都是基于特定领域解决特定的问题，我们需要学会在前人肩膀上解决问题。</p><p><strong>服务端开发</strong></p><p>最近微服务火的一塌糊涂，虽然我们基本是做移动端开发，但是基于全栈发展的趋势，对于服务端开发势必要了解，可能没有实战项目让你真刀真枪的干，但是对于微服务的结构理论、服务与服务之间通信、聚合是什么样的流程也是需要有所耳闻，在自己擅长领域深入专研的同时横向扩展关注也是需要的，不能关起门来闭门造车，两耳不闻窗外事那是不行的。</p><p><strong>阅读源码</strong></p><p>对于Android源码和第三方库源码阅读，可以根据自己感兴趣的类型，选择相应的源码库或模块，给自己约定一个时间点，看完之后最后有个流程图，哪些是核心类，类与类之间都有什么关系，这些开源代码实现的机制是什么，用到哪些解决思想，这些要点最终可以通过文章输出，我觉得输出倒逼输入是一种很不错的学习方式。</p><p><strong>移动AI</strong></p><p>AI，也称人工智能，1956年，在<strong>达特茅斯学院</strong>举行的一次会议上正式确立了<strong>人工智能</strong>的研究领域。会议的参加者在接下来的数十年间是AI研究的领军人物，他们中有许多人预言，经过一代人的努力，与人类具有同等智能水平的机器将会出现。现在来看AI这个概念很早就存在了，之前没发展很大原因是基础设施不够完善、研究成本高，现在能够大力发展是基于我们的网络带宽变大、计算机性能提升、计算成本降低等等因素备齐了。AI是需要通过算法来落地，那么对于算法理论背景就是数学，所以想进阶AI开发，就需要去学习相关数学知识，特别是线性代数和概率论这两门，是支撑很多算法的理论知识。</p><h3 id="小结">小结</h3><p>总的来说，技术发展能推动社会的进步，解放生产力，进而提高人的社会生产效率，创造价值。技术落地是需要商业应用场景配合，如何配合呢，就是通过每个不同商业模式来实现。最终一门技术是需要与具体使用业务紧密结合起来，如果脱离技术谈业务显得空洞，脱离业务谈技术显得偏理论，最好是两者相结合。这也就要求我们这些从事软件开发人员在追求技术积累的同时要注重业务积累，让业务驱动技术发展，用技术手段来解决实际业务问题，在技术积累中，辨别哪些是不变的道，哪些又是一时流行的而已，这就需要练就一双火眼金睛了。</p>]]></content>
    
    <summary type="html">
    
      个人对于Android进阶开发之路的一些理解和看法。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android APP 性能优化的一些思考</title>
    <link href="http://cryallen.com/2017/12/22/2017-12-22-AndroidAPP/"/>
    <id>http://cryallen.com/2017/12/22/2017-12-22-AndroidAPP/</id>
    <published>2017-12-22T13:38:29.000Z</published>
    <updated>2020-04-20T03:19:29.823Z</updated>
    
    <content type="html"><![CDATA[<p>说到 Android 系统手机，大部分人的印象是用了一段时间就变得有点卡顿，有些程序在运行期间莫名其妙的出现崩溃，打开系统文件夹一看，发现多了很多文件，然后用手机管家 APP 不断地进行清理优化 ，才感觉运行速度稍微提高了点，就算手机在各种性能跑分软件面前分数遥遥领先，还是感觉无论有多大的内存空间都远远不够用。相信每个使用 Android 系统的用户都有过以上类似经历，确实，Android 系统在流畅性方面不如 IOS 系统，为何呢，明明在看手机硬件配置上时，Android 设备都不会输于 IOS 设备，甚至都强于它，关键是在于软件上。造成这种现象的原因是多方面的，简单罗列几点如下：</p><ul><li><p>其实近年来，随着 Android 版本不断迭代，Google 提供的Android 系统已经越来越流畅，目前最新发布的版本是 <strong>Android 8.0 Oreo</strong> 。但是在国内大部分用户用的 Android 手机系是各大厂商定制过的版本，往往不是最新的原生系统内核，可能绝大多数还停留在 Android 5.0 系统上，甚至 Android 6.0 以上所占比例还偏小，更新存在延迟性。</p></li><li><p>由于 Android 系统源码是开放的，每个人只要遵从相应的协议，就可以对源码进行修改，那么国内各个厂商就把基于 Android  源码改造成自己对外发布的系统，比如我们熟悉的小米手机 Miui 系统、华为手机 EMUI 系统、Oppo 手机 ColorOS 系统等。由于每个厂商都修改过 Android 原生系统源码，这里面就会引发一个问题，那就是著名的<strong>Android 碎片化</strong>问题，本质就是不同 Android 系统的应用兼容性不同，达不到一致性。</p></li><li><p>由于存在着各种 <strong>Android 碎片化和兼容性</strong>问题，导致 Android 开发者在开发应用时需要对不同系统进行适配，同时每个 Android 开发者的开发水平参差不齐，写出来的应用性能也都存在不同类型的问题，导致用户在使用过程中用户体验感受不同，那么有些问题用户就会转化为 Android 系统问题，进而影响对Android 手机的评价。</p></li></ul><h3 id="性能优化">性能优化</h3><p>今天想说的重点是<strong>Android APP</strong> 性能优化，也就是在开发应用程序时应该注意的点有哪些，如何更好地提高用户体验。一个好的应用，除了要有吸引人的功能和交互之外，在性能上也应该有高的要求，即使应用非常具有特色，在产品前期可能吸引了部分用户，但是用户体验不好的话，也会给产品带来不好的口碑。那么一个好的应用应该如何定义呢？主要有以下三方面：</p><ul><li><p>业务/功能</p></li><li><p>符合逻辑的交互</p></li><li><p>优秀的性能</p></li></ul><p>众所周知，Android 系统作为以移动设备为主的操作系统，硬件配置是有一定的限制的，虽然配置现在越来越高级，但仍然无法与 PC 相比，在 CPU 和内存上使用不合理或者耗费资源多时，就会碰到内存不足导致的稳定性问题、CPU 消耗太多导致的卡顿问题等。</p><p>面对问题时，大家想到的都是联系用户，然后查看日志，但殊不知有关性能类问题的反馈，原因也非常难找，日志大多用处不大，为何呢？因为性能问题大部分是非必现的问题，问题定位很难复现，而又没有关键的日志，当然就无法找到原因了。这些问题非常影响用户体验和功能使用，所以了解一些性能优化的一些解决方案就显得很重要了，并在实际的项目中优化我们的应用，进而提高用户体验。</p><h3 id="四个方面">四个方面</h3><p>可以把用户体验的性能问题主要总结为4个类别：</p><ul><li><p>流畅</p></li><li><p>稳定</p></li><li><p>省电、省流量</p></li><li><p>安装包小</p></li></ul><p>性能问题的主要原因是什么，原因有相同的，也有不同的，但归根到底，不外乎内存使用、代码效率、合适的策略逻辑、代码质量、安装包体积这一类问题，整理归类如下：</p><figure><img src="/2017/12/22/2017-12-22-AndroidAPP/image1.png" alt="性能优化图"><figcaption>性能优化图</figcaption></figure><p>从图中可以看到，打造一个高质量的应用应该以4个方向为目标：快、稳、省、小。</p><p>快：使用时避免出现卡顿，响应速度快，减少用户等待的时间，满足用户期望。</p><p>稳：减低 crash 率和 ANR 率，不要在用户使用过程中崩溃和无响应。</p><p>省：节省流量和耗电，减少用户使用成本，避免使用时导致手机发烫。</p><p>小：安装包小可以降低用户的安装成本。</p><p>要想达到这4个目标，具体实现是在右边框里的问题：卡顿、内存使用不合理、代码质量差、代码逻辑乱、安装包过大，这些问题也是在开发过程中碰到最多的问题，在实现业务需求同时，也需要考虑到这点，多花时间去思考，如何避免功能完成后再来做优化，不然的话等功能实现后带来的维护成本会增加。</p><h3 id="卡顿优化">卡顿优化</h3><p>Android 应用启动慢，使用时经常卡顿，是非常影响用户体验的，应该尽量避免出现。卡顿的场景有很多，按场景可以分为4类：UI 绘制、应用启动、页面跳转、事件响应，如图：</p><figure><img src="/2017/12/22/2017-12-22-AndroidAPP/image2.png" alt="卡顿场景"><figcaption>卡顿场景</figcaption></figure><p>这4种卡顿场景的根本原因可以分为两大类：</p><ul><li><p>界面绘制。主要原因是绘制的层级深、页面复杂、刷新不合理，由于这些原因导致卡顿的场景更多出现在 UI 和启动后的初始界面以及跳转到页面的绘制上。</p></li><li><p>数据处理。导致这种卡顿场景的原因是数据处理量太大，一般分为三种情况，一是数据在处理 UI 线程，二是数据处理占用 CPU 高，导致主线程拿不到时间片，三是内存增加导致 GC 频繁，从而引起卡顿。</p></li></ul><p>引起卡顿的原因很多，但不管怎么样的原因和场景，最终都是通过设备屏幕上显示来达到用户，归根到底就是显示有问题，所以，要解决卡顿，就要先了解 Android 系统的显示原理。</p><h5 id="android系统显示原理">Android系统显示原理</h5><p>Android 显示过程可以简单概括为：Android 应用程序把经过测量、布局、绘制后的 surface 缓存数据，通过 SurfaceFlinger 把数据渲染到显示屏幕上， 通过 Android 的刷新机制来刷新数据。也就是说应用层负责绘制，系统层负责渲染，通过进程间通信把应用层需要绘制的数据传递到系统层服务，系统层服务通过刷新机制把数据更新到屏幕上。</p><p>我们都知道在 Android 的每个 View 绘制中有三个核心步骤：Measure、Layout、Draw。具体实现是从 ViewRootImp 类的performTraversals() 方法开始执行，Measure 和 Layout都是通过递归来获取 View 的大小和位置，并且以深度作为优先级，可以看出层级越深、元素越多、耗时也就越长。</p><p>真正把需要显示的数据渲染到屏幕上，是通过系统级进程中的 SurfaceFlinger 服务来实现的，那么这个SurfaceFlinger 服务主要做了哪些工作呢？如下：</p><ul><li><p>响应客户端事件，创建 Layer 与客户端的 Surface 建立连接。</p></li><li><p>接收客户端数据及属性，修改 Layer 属性，如尺寸、颜色、透明度等。</p></li><li><p>将创建的 Layer  内容刷新到屏幕上。</p></li><li><p>维持 Layer 的序列，并对 Layer 最终输出做出裁剪计算。</p></li></ul><p>既然是两个不同的进程，那么肯定是需要一个跨进程的通信机制来实现数据传递，在 Android 显示系统中，使用了 Android 的匿名共享内存：SharedClient，每一个应用和 SurfaceFlinger 之间都会创建一个SharedClient ，然后在每个 SharedClient 中，最多可以创建 31 个 SharedBufferStack，每个 Surface 都对应一个 SharedBufferStack，也就是一个 Window。</p><p>一个 SharedClient 对应一个Android 应用程序，而一个 Android 应用程序可能包含多个窗口，即 Surface 。也就是说 SharedClient 包含的是 SharedBufferStack的集合，其中在显示刷新机制中用到了双缓冲和三重缓冲技术。最后总结起来显示整体流程分为三个模块：应用层绘制到缓存区，SurfaceFlinger 把缓存区数据渲染到屏幕，由于是不同的进程，所以使用 Android 的匿名共享内存 SharedClient 缓存需要显示的数据来达到目的。</p><p>除此之外，我们还需要一个名词：FPS。FPS 表示每秒传递的帧数。在理想情况下，60 FPS 就感觉不到卡，这意味着每个绘制时长应该在16 ms 以内。但是 Android 系统很有可能无法及时完成那些复杂的页面渲染操作。Android 系统每隔 16ms 发出 VSYNC 信号，触发对 UI 进行渲染，如果每次渲染都成功，这样就能够达到流畅的画面所需的 60FPS。如果某个操作花费的时间是 24ms ，系统在得到 VSYNC 信号时就无法正常进行正常渲染，这样就发生了丢帧现象。那么用户在 32ms 内看到的会是同一帧画面，这种现象在执行动画或滑动列表比较常见，还有可能是你的 Layout 太过复杂，层叠太多的绘制单元，无法在 16ms 完成渲染，最终引起刷新不及时。</p><h5 id="卡顿根本原因">卡顿根本原因</h5><p>根据Android 系统显示原理可以看到，影响绘制的根本原因有以下两个方面：</p><ul><li><p>绘制任务太重，绘制一帧内容耗时太长。</p></li><li><p>主线程太忙，根据系统传递过来的 VSYNC 信号来时还没准备好数据导致丢帧。</p></li></ul><p>绘制耗时太长，有一些工具可以帮助我们定位问题。主线程太忙则需要注意了，主线程关键职责是处理用户交互，在屏幕上绘制像素，并进行加载显示相关的数据，所以特别需要避免任何主线程的事情，这样应用程序才能保持对用户操作的即时响应。总结起来，主线程主要做以下几个方面工作：</p><ul><li><p>UI 生命周期控制</p></li><li><p>系统事件处理</p></li><li><p>消息处理</p></li><li><p>界面布局</p></li><li><p>界面绘制</p></li><li><p>界面刷新</p></li></ul><p>除此之外，应该尽量避免将其他处理放在主线程中，特别复杂的数据计算和网络请求等。</p><h5 id="性能分析工具">性能分析工具</h5><p>性能问题并不容易复现，也不好定位，但是真的碰到问题还是需要去解决的，那么分析问题和确认问题是否解决，就需要借助相应的的调试工具，比如查看 Layout 层次的 Hierarchy View、Android 系统上带的 GPU Profile 工具和静态代码检查工具 Lint 等，这些工具对性能优化起到非常重要的作用，所以要熟悉，知道在什么场景用什么工具来分析。</p><p>1，Profile GPU Rendering</p><p>在手机开发者模式下，有一个卡顿检测工具叫做：Profile GPU Rendering，如图：</p><figure><img src="/2017/12/22/2017-12-22-AndroidAPP/image3.png" alt="Profile GPU Rendering"><figcaption>Profile GPU Rendering</figcaption></figure><p>它的功能特点如下：</p><ul><li><p>一个图形监测工具，能实时反应当前绘制的耗时</p></li><li><p>横轴表示时间，纵轴表示每一帧的耗时</p></li><li><p>随着时间推移，从左到右的刷新呈现</p></li><li><p>提供一个标准的耗时，如果高于标准耗时，就表示当前这一帧丢失</p></li></ul><p>2，TraceView</p><p>TraceView 是 Android SDK 自带的工具，用来分析函数调用过程，可以对 Android 的应用程序以及 Framework 层的代码进行性能分析。它是一个图形化的工具，最终会产生一个图表，用于对性能分析进行说明，可以分析到每一个方法的执行时间，其中可以统计出该方法调用次数和递归次数，实际时长等参数维度，使用非常直观，分析性能非常方便。</p><p>3，Systrace UI 性能分析</p><p>Systrace  是 Android 4.1及以上版本提供的性能数据采样和分析工具，它是通过系统的角度来返回一些信息。它可以帮助开发者收集 Android  关键子系统，如 surfaceflinger、WindowManagerService 等 Framework 部分关键模块、服务、View系统等运行信息，从而帮助开发者更直观地分析系统瓶颈，改进性能。Systrace  的功能包括跟踪系统的 I/O 操作、内核工作队列、CPU 负载等，在 UI 显示性能分析上提供很好的数据，特别是在动画播放不流畅、渲染卡等问题上。</p><h5 id="优化建议">优化建议</h5><p>1，布局优化</p><p>布局是否合理主要影响的是页面测量时间的多少，我们知道一个页面的显示测量和绘制过程都是通过递归来完成的，多叉树遍历的时间与树的高度h有关，其时间复杂度 O(h)，如果层级太深，每增加一层则会增加更多的页面显示时间，所以布局的合理性就显得很重要。</p><p>那布局优化有哪些方法呢，主要通过减少层级、减少测量和绘制时间、提高复用性三个方面入手。总结如下：</p><ul><li><p>减少层级。合理使用 RelativeLayout 和 LinerLayout，合理使用Merge。</p></li><li><p>提高显示速度。使用 ViewStub，它是一个看不见的、不占布局位置、占用资源非常小的视图对象。</p></li><li><p>布局复用。可以通过<strong><include></include></strong> 标签来提高复用。</p></li><li><p>尽可能少用wrap_content。wrap_content 会增加布局 measure 时计算成本，在已知宽高为固定值时，不用wrap_content 。</p></li><li><p>删除控件中无用的属性。</p></li></ul><p>2，避免过度绘制</p><p>过度绘制是指在屏幕上的某个像素在同一帧的时间内被绘制了多次。在多层次重叠的 UI 结构中，如果不可见的 UI 也在做绘制的操作，就会导致某些像素区域被绘制了多次，从而浪费了多余的 CPU 以及 GPU 资源。</p><p>如何避免过度绘制呢，如下：</p><ul><li><p>布局上的优化。移除 XML 中非必须的背景，移除 Window 默认的背景、按需显示占位背景图片</p></li><li><p>自定义View优化。使用 canvas.clipRect()来帮助系统识别那些可见的区域，只有在这个区域内才会被绘制。</p></li></ul><p>3，启动优化</p><p>通过对启动速度的监控，发现影响启动速度的问题所在，优化启动逻辑，提高应用的启动速度。启动主要完成三件事：UI 布局、绘制和数据准备。因此启动速度优化就是需要优化这三个过程：</p><ul><li><p>UI 布局。应用一般都有闪屏页，优化闪屏页的 UI 布局，可以通过 Profile GPU Rendering 检测丢帧情况。</p></li><li><p>启动加载逻辑优化。可以采用分布加载、异步加载、延期加载策略来提高应用启动速度。</p></li><li><p>数据准备。数据初始化分析，加载数据可以考虑用线程初始化等策略。</p></li></ul><p>4，合理的刷新机制</p><p>在应用开发过程中，因为数据的变化，需要刷新页面来展示新的数据，但频繁刷新会增加资源开销，并且可能导致卡顿发生，因此，需要一个合理的刷新机制来提高整体的 UI 流畅度。合理的刷新需要注意以下几点：</p><ul><li><p>尽量减少刷新次数。</p></li><li><p>尽量避免后台有高的 CPU 线程运行。</p></li><li><p>缩小刷新区域。</p></li></ul><p>5，其他</p><p>在实现动画效果时，需要根据不同场景选择合适的动画框架来实现。有些情况下，可以用硬件加速方式来提供流畅度。</p><h3 id="内存优化">内存优化</h3><p>在 Android 系统中有个垃圾内存回收机制，在虚拟机层自动分配和释放内存，因此不需要在代码中分配和释放某一块内存，从应用层面上不容易出现内存泄漏和内存溢出等问题，但是需要内存管理。Android 系统在内存管理上有一个 Generational Heap Memory 模型，内存回收的大部分压力不需要应用层关心， Generational Heap Memory 有自己一套管理机制，当内存达到一个阈值时，系统会根据不同的规则自动释放系统认为可以释放的内存，也正是因为 Android 程序把内存控制的权力交给了 Generational Heap Memory，一旦出现内存泄漏和溢出方面的问题，排查错误将会成为一项异常艰难的工作。除此之外，部分 Android 应用开发人员在开发过程中并没有特别关注内存的合理使用，也没有在内存方面做太多的优化，当应用程序同时运行越来越多的任务，加上越来越复杂的业务需求时，完全依赖 Android 的内存管理机制就会导致一系列性能问题逐渐呈现，对应用的稳定性和性能带来不可忽视的影响，因此，解决内存问题和合理优化内存是非常有必要的。</p><h5 id="android内存管理机制">Android内存管理机制</h5><p>Android 应用都是在 Android  的虚拟机上运行，应用 程序的内存分配与垃圾回收都是由虚拟机完成的。在 Android 系统，虚拟机有两种运行模式：Dalvik 和 ART。</p><p>1，Java对象生命周期</p><figure><img src="/2017/12/22/2017-12-22-AndroidAPP/image4.jpeg" alt="Java对象生命周期"><figcaption>Java对象生命周期</figcaption></figure><p>一般Java对象在虚拟机上有7个运行阶段：</p><p>创建阶段-&gt;应用阶段-&gt;不可见阶段-&gt;不可达阶段-&gt;收集阶段-&gt;终结阶段-&gt;对象空间重新分配阶段</p><p>2，内存分配</p><p>在 Android 系统中，内存分配实际上是对堆的分配和释放。当一个 Android 程序启动，应用进程都是从一个叫做 Zygote 的进程衍生出来，系统启动 Zygote 进程后，为了启动一个新的应用程序进程，系统会衍生 Zygote 进程生成一个新的进程，然后在新的进程中加载并运行应用程序的代码。其中，大多数的 RAM pages 被用来分配给Framework 代码，同时促使 RAM 资源能够在应用所有进程之间共享。</p><p>但是为了整个系统的内存控制需要，Android 系统会为每一个应用程序都设置一个硬性的 Dalvik Heap Size 最大限制阈值，整个阈值在不同设备上会因为 RAM 大小不同而有所差异。如果应用占用内存空间已经接近整个阈值时，再尝试分配内存的话，就很容易引起内存溢出的错误。</p><p>3，内存回收机制</p><p>我们需要知道的是，在 Java 中内存被分为三个区域：Young Generation(年轻代)、Old Generation(年老代)、Permanent Generation(持久代)。最近分配的对象会存放在 Young Generation 区域。对象在某个时机触发 GC 回收垃圾，而没有回收的就根据不同规则，有可能被移动到 Old Generation，最后累积一定时间在移动到 Permanent Generation 区域。系统会根据内存中不同的内存数据类型分别执行不同的 GC 操作。GC 通过确定对象是否被活动对象引用来确定是否收集对象，进而动态回收无任何引用的对象占据的内存空间。但需要注意的是频繁的 GC 会增加应用的卡顿情况，影响应用的流畅性，因此需要尽量减少系统 GC 行为，以便提高应用的流畅度，减小卡顿发生的概率。</p><h5 id="内存分析工具">内存分析工具</h5><p>做内存优化前，需要了解当前应用的内存使用现状，通过现状去分析哪些数据类型有问题，各种类型的分布情况如何，以及在发现问题后如何发现是哪些具体对象导致的，这就需要相关工具来帮助我们。</p><p>1，Memory Monitor</p><p>Memory Monitor 是一款使用非常简单的图形化工具，可以很好地监控系统或应用的内存使用情况，主要有以下功能：</p><ul><li><p>显示可用和已用内存，并且以时间为维度实时反应内存分配和回收情况。</p></li><li><p>快速判断应用程序的运行缓慢是否由于过度的内存回收导致。</p></li><li><p>快速判断应用是否由于内存不足导致程序崩溃。</p></li></ul><p>2，Heap Viewer</p><p>Heap Viewer 的主要功能是查看不同数据类型在内存中的使用情况，可以看到当前进程中的 Heap Size 的情况，分别有哪些类型的数据，以及各种类型数据占比情况。通过分析这些数据来找到大的内存对象，再进一步分析这些大对象，进而通过优化减少内存开销，也可以通过数据的变化发现内存泄漏。</p><p>3，Allocation Tracker</p><p>Memory Monitor 和 Heap Viewer 都可以很直观且实时地监控内存使用情况，还能发现内存问题，但发现内存问题后不能再进一步找到原因，或者发现一块异常内存，但不能区别是否正常，同时在发现问题后，也不能定位到具体的类和方法。这时就需要使用另一个内存分析工具 Allocation Tracker，进行更详细的分析， Allocation Tracker 可以分配跟踪记录应用程序的内存分配，并列出了它们的调用堆栈，可以查看所有对象内存分配的周期。</p><p>4，Memory Analyzer Tool(MAT)</p><p>MAT 是一个快速，功能丰富的 Java Heap 分析工具，通过分析 Java 进程的内存快照 HPROF 分析，从众多的对象中分析，快速计算出在内存中对象占用的大小，查看哪些对象不能被垃圾收集器回收，并可以通过视图直观地查看可能造成这种结果的对象。</p><h5 id="常见内存泄漏场景">常见内存泄漏场景</h5><p>如果在内存泄漏发生后再去找原因并修复会增加开发的成本，最好在编写代码时就能够很好地考虑内存问题，写出更高质量的代码，这里列出一些常见的内存泄漏场景，在以后的开发过程中需要避免这类问题。</p><ul><li><p>资源性对象未关闭。比如Cursor、File文件等，往往都用了一些缓冲，在不使用时，应该及时关闭它们。</p></li><li><p>注册对象未注销。比如事件注册后未注销，会导致观察者列表中维持着对象的引用。</p></li><li><p>类的静态变量持有大数据对象。</p></li><li><p>非静态内部类的静态实例。</p></li><li><p>Handler临时性内存泄漏。如果Handler是非静态的，容易导致 Activity 或 Service 不会被回收。</p></li><li><p>容器中的对象没清理造成的内存泄漏。</p></li><li><p>WebView。WebView 存在着内存泄漏的问题，在应用中只要使用一次 WebView，内存就不会被释放掉。</p></li></ul><p>除此之外，内存泄漏可监控，常见的就是用LeakCanary 第三方库，这是一个检测内存泄漏的开源库，使用非常简单，可以在发生内存泄漏时告警，并且生成 leak tarce 分析泄漏位置，同时可以提供 Dump 文件进行分析。</p><h5 id="优化内存空间">优化内存空间</h5><p>没有内存泄漏，并不意味着内存就不需要优化，在移动设备上，由于物理设备的存储空间有限，Android 系统对每个应用进程也都分配了有限的堆内存，因此使用最小内存对象或者资源可以减小内存开销，同时让GC 能更高效地回收不再需要使用的对象，让应用堆内存保持充足的可用内存，使应用更稳定高效地运行。常见做法如下：</p><ul><li><p>对象引用。强引用、软引用、弱引用、虚引用四种引用类型，根据业务需求合理使用不同，选择不同的引用类型。</p></li><li><p>减少不必要的内存开销。注意自动装箱，增加内存复用，比如有效利用系统自带的资源、视图复用、对象池、Bitmap对象的复用。</p></li><li><p>使用最优的数据类型。比如针对数据类容器结构，可以使用ArrayMap数据结构，避免使用枚举类型，使用缓存Lrucache等等。</p></li><li><p>图片内存优化。可以设置位图规格，根据采样因子做压缩，用一些图片缓存方式对图片进行管理等等。</p></li></ul><h3 id="稳定性优化">稳定性优化</h3><p>Android 应用的稳定性定义很宽泛，影响稳定性的原因很多，比如内存使用不合理、代码异常场景考虑不周全、代码逻辑不合理等，都会对应用的稳定性造成影响。其中最常见的两个场景是：Crash 和 ANR，这两个错误将会使得程序无法使用，比较常用的解决方式如下：</p><ul><li><p>提高代码质量。比如开发期间的代码审核，看些代码设计逻辑，业务合理性等。</p></li><li><p>代码静态扫描工具。常见工具有Android Lint、Findbugs、Checkstyle、PMD等等。</p></li><li><p>Crash监控。把一些崩溃的信息，异常信息及时地记录下来，以便后续分析解决。</p></li><li><p>Crash上传机制。在Crash后，尽量先保存日志到本地，然后等下一次网络正常时再上传日志信息。</p></li></ul><h3 id="耗电优化">耗电优化</h3><p>在移动设备中，电池的重要性不言而喻，没有电什么都干不成。对于操作系统和设备开发商来说，耗电优化一致没有停止，去追求更长的待机时间，而对于一款应用来说，并不是可以忽略电量使用问题，特别是那些被归为“电池杀手”的应用，最终的结果是被卸载。因此，应用开发者在实现需求的同时，需要尽量减少电量的消耗。</p><p>在 Android5.0 以前，在应用中测试电量消耗比较麻烦，也不准确，5.0 之后专门引入了一个获取设备上电量消耗信息的 API:Battery Historian。Battery Historian 是一款由 Google 提供的 Android 系统电量分析工具，和Systrace 一样，是一款图形化数据分析工具，直观地展示出手机的电量消耗过程，通过输入电量分析文件，显示消耗情况，最后提供一些可供参考电量优化的方法。</p><p>除此之外，还有一些常用方案可提供：</p><ul><li><p>计算优化，避开浮点运算等。</p></li><li><p>避免 WaleLock 使用不当。</p></li><li><p>使用 Job Scheduler。</p></li></ul><h3 id="安装包大小优化">安装包大小优化</h3><p>应用安装包大小对应用使用没有影响，但应用的安装包越大，用户下载的门槛越高，特别是在移动网络情况下，用户在下载应用时，对安装包大小的要求更高，因此，减小安装包大小可以让更多用户愿意下载和体验产品。</p><p>常用应用安装包的构成，如图所示：</p><figure><img src="/2017/12/22/2017-12-22-AndroidAPP/image5.png" alt="应用安装包构成"><figcaption>应用安装包构成</figcaption></figure><p>从图中我们可以看到：</p><ul><li><p>assets文件夹。存放一些配置文件、资源文件，assets不会自动生成对应的 ID，而是通过 AssetManager 类的接口获取。</p></li><li><p>res。res 是 resource 的缩写，这个目录存放资源文件，会自动生成对应的 ID 并映射到 .R 文件中，访问直接使用资源 ID。</p></li><li><p>META-INF。保存应用的签名信息，签名信息可以验证 APK 文件的完整性。</p></li><li><p>AndroidManifest.xml。这个文件用来描述 Android 应用的配置信息，一些组件的注册信息、可使用权限等。</p></li><li><p>classes.dex。Dalvik 字节码程序，让 Dalvik 虚拟机可执行，一般情况下，Android 应用在打包时通过 Android  SDK 中的 dx 工具将 Java 字节码转换为 Dalvik 字节码。</p></li><li><p>resources.arsc。记录着资源文件和资源 ID 之间的映射关系，用来根据资源 ID 寻找资源。</p></li></ul><p>减少安装包大小的常用方案</p><ul><li><p>代码混淆。使用proGuard 代码混淆器工具，它包括压缩、优化、混淆等功能。</p></li><li><p>资源优化。比如使用 Android Lint 删除冗余资源，资源文件最少化等。</p></li><li><p>图片优化。比如利用 AAPT 工具对 PNG 格式的图片做压缩处理，降低图片色彩位数等。</p></li><li><p>避免重复功能的库，使用 WebP图片格式等。</p></li><li><p>插件化。比如功能模块放在服务器上，按需下载，可以减少安装包大小。</p></li></ul><h3 id="小结">小结</h3><p>性能优化不是更新一两个版本就可以解决的，是持续性的需求，持续集成迭代反馈。在实际的项目中，在项目刚开始的时候，由于人力和项目完成时间限制，性能优化的优先级比较低，等进入项目投入使用阶段，就需要把优先级提高，但在项目初期，在设计架构方案时，性能优化的点也需要提早考虑进去，这就体现出一个程序员的技术功底了。</p><p>什么时候开始有性能优化的需求，往往都是从发现问题开始，然后分析问题原因及背景，进而寻找最优解决方案，最终解决问题，这也是日常工作中常会用到的处理方式。</p>]]></content>
    
    <summary type="html">
    
      介绍了Android APP 优化的几个方面，总结起来就是四个字快、稳、省、小。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>有关 Hybrid 开发模式实践总结</title>
    <link href="http://cryallen.com/2017/10/26/2017-10-26-AndroidHybrid/"/>
    <id>http://cryallen.com/2017/10/26/2017-10-26-AndroidHybrid/</id>
    <published>2017-10-26T14:06:57.000Z</published>
    <updated>2020-04-20T04:46:51.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>随着公司业务不断发展，移动开发项目越来越多，项目任务时间紧，我们内部开发流程是以项目为导向，有别于一般公司对产品不断迭代的做法，但移动端开发人员资源有限，需要在不同项目之间做业务场景切换开发，就会经常出现项目完成时间 Delay。面对这样的问题，我们该如何去解决呢？现在了解到的现状是每个业务组都有配备 Web 前端开发人员，那么是否能把涉及到业务模块分发给具体业务组 Web 前端开发人员去开发，剥离业务模块，我们移动端开发人员则专注于框架的开发或者手机端设备能力开发，比如可支持调用摄像头，监听网络状态变化，提供地理位置信息等等，有没有这样一套适合的解决方案呢，答案当然是有的。我们引入了可利用 Web 前端能力和移动端操作系统原生能力相结合开发模式，叫做 Hybrid 混合开发。</p><h3 id="目录">目录</h3><ul><li><p>为何选择 Hybrid 开发模式</p></li><li><p>在实践过程中碰到什么问题和解决</p></li><li><p>小结</p></li></ul><h3 id="为何选择-hybrid-开发模式">为何选择 Hybrid 开发模式</h3><p><strong>1，目前工作中碰到的问题</strong></p><p>随着公司业务飞速发展，移动端定制的项目越来越多，同时每个项目的业务逻辑呈现出复杂化和差异化特点，每个项目都需要提供 Android 版本和 IOS 版本，增加开发成本，开发周期往往又会被拖长。同时近年来前端技术蓬勃发展，HTML5 大行其道，很多主流 APP 厂商都利用 HTML5 前端能力来编写业务模块并结合原生设备能力进行混合开发，常见的比如淘宝、京东、微信、携程等等。虽然目前业务项目多，但是用户交互体验要求不高，常见页面也是列表，表单居多，适合充分利用HTML 5能力，因此引入Hybrid 混合开发模式，这样只需要 Web 前端开发人员写一遍前端业务代码，却能同时在Android 系统和 IOS 系统中执行。</p><p><strong>2，Web APP、Hybrid APP、Native APP 对比</strong></p><p>目前主流应用程序大体分为三类：Web App、Hybrid App、 Native App，如图：</p><figure><img src="/2017/10/26/2017-10-26-AndroidHybrid/app1.png" alt="三种模式"><figcaption>三种模式</figcaption></figure><p><strong>Web APP</strong></p><p>Web App 指采用Html5 语言写出的 App，不需要下载安装。类似于现在所说的轻应用。生存在浏览器中的应用，基本上可以说是触屏版的网页应用。</p><p>优点</p><p>（1）开发成本低，更新快</p><p>（2）更新无需通知用户，不需要手动升级</p><p>（3）能够跨多个平台和终端</p><p>缺点：</p><p>（1）临时性的入口</p><p>（2）无法获取系统级别的通知，提醒，动效等等</p><p>（3）用户留存率低</p><p>（4）设计受限制诸多</p><p>（5）体验较差</p><p><strong>Hybrid App </strong></p><p>Hybrid App 从外观上来看是一个Native App ，实则只有一个UIWebView，里面访问的是一个Web App ，如新闻类和视频类的应用普遍采取该策略：Native 的框架加上Web 的内容。不同于Native App 需要针对不同的平台使用不同的开发语言（如使用Objective-C、Swift开发iOS应用，使用Java等开发Android应用），Hybrid App 允许开发者仅使用一套网页语言代码（HTML5+CSS+JavaScript），即可开发能够在不同平台上部署的类原生应用 。由于Hybrid App 结合了Native app良好用户交互体验和Web App 跨平台开发的优势，能够显著节省移动应用开发的时间和成本，Hybrid App 得到越来越多公司的青睐。</p><p>按照网页语言和程序语言的混合，Hybrid App 通常可以分为三种类型：</p><ol type="1"><li><p><strong>多View混合型：</strong>Native View 和 Web View 独立展示，交替出现。 其应用主体通常是Native App，Web技术作为补充。即在需要的时候，将 Web View作为独立的 View 运行，在 Web View内完成相关的展示操作。开发难度与Native App相当.比如：微信里的公众号文章使用的是Web View 。</p></li><li><p><strong>单View混合型：</strong>在同一个View 内，Native View 和Web View 为层叠关系，同时出现。开发成本较高，难度较大，但是体验较好。比如：百度搜索同时实现充分的灵活性和较好的用户体验。</p></li><li><p><strong>Web主体型：</strong>应用主体是Web View ，穿插 Native 功能，主要以网页语言编写。整体开发难度低，基本可以实现跨平台，而用户体验好坏，主要取决于底层中间件的交互与跨平台能力。比如：项目管理工具 Basecamp 使用Web view呈现内容，调用系统原生 API 实现界面导航等功能来提高用户体验。</p></li></ol><p>Hybrid App 也并非是完美的解决方案。由于其使用 HTML5，某些依赖于复杂的原生功能或者繁重的过渡动画的应用会出现卡顿。同时，为了模拟Native App 的UI和感官，需要投入额外的时间和精力；尽管可以跨平台，但是并不能完全支持所有的设备和操作系统。最后，如果应用的体验不够原生化，如一个简单的网站，则还有被Apple App Store拒绝的风险。</p><p><strong>Native App</strong></p><p>Native APP 指的是原生程序，一般依托于操作系统，有很强的交互，是一个完整的 App，可拓展性强。需要用户下载安装使用。</p><p>优点：</p><p>（1）打造完美的用户体验，性能稳定</p><p>（2）操作速度快，上手流畅</p><p>（3）访问本地资源（通讯录，相册）</p><p>（4）设计出色的动效，转场，</p><p>（5）拥有系统级别的贴心通知或提醒，用户留存率高</p><p>缺点：</p><p>（1）分发成本高（不同平台有不同的开发语言和界面适配）</p><p>（2）维护成本高（例如一款App已更新至V5版本，但仍有用户在使用V2， V3， V4版本，需要更多的开发人员维护之前的版本）</p><p>（3）更新缓慢，根据不同平台，提交–审核–上线 等等不同的流程，需要经过的流程较复杂</p><p><strong>三者技术特性</strong></p><p>如下图表中对比了Native App、 Hybrid App、Web App在不同方面的表现，可以根据实际情况选择最佳的解决方案。</p><figure><img src="/2017/10/26/2017-10-26-AndroidHybrid/app2.png" alt="三者比较对比"><figcaption>三者比较对比</figcaption></figure><p><strong>3，主流 APP Hybrid 应用比例</strong></p><p>那么在实际应用场景中，有哪些选择了Hybrid app呢？实际上，我们很可能使用过很多Hybrid app，却并没有意识到它们是借了Native台子唱戏的Web app。根据<a href="http://link.zhihu.com/?target=http%3A//www.appcelerator.com/">Appcelerator</a>的官网，目前单是运行基于它的平台搭建的Hybrid app的设备就有近2.86亿台。国外常见的有LinkedIn、Yelp、Netflix、Wunderlist ，国内主流的大厂基本也是采用了Hybrid 模式，应该是应用很广泛，同时技术上也是成熟稳定。</p><figure><img src="/2017/10/26/2017-10-26-AndroidHybrid/app3.png" alt="主流比例"><figcaption>主流比例</figcaption></figure><p><strong>4，选择 Hybrid 混合开发的原因</strong></p><ol type="1"><li><p>Hybrid 开发模式在开发页面 UI 上有天生的便利，而原生的则如果需要一个比较华丽的界面，就需要花很长的时间去开发。</p></li><li><p>在业务上，看具体情况，有些简单业务在 Web上就可以处理，而如果涉及到复杂的业务，则可以用原生来写。</p></li><li><p>在基本能力上，原生的强，可以提供手机端独有的特性，但 Hybrid 则需要依赖 Javascript 中间层进行转化获取设备能力。</p></li><li><p>对于少界面，重业务的可以用原生，对于多界面，重效果的，可以用 Web 方式进行开发。</p></li></ol><h3 id="在实践过程中碰到什么问题和解决">在实践过程中碰到什么问题和解决</h3><p><strong>项目背景介绍</strong></p><p>目前在一个项目实行的开发模式就是 Hybrid 混合开发，Web 技术与 Android 原生能力结合开发，Web 技术负责界面开发和相关业务， Android 原生能力则提供手机端特有设备能力，比如调用摄像头，网络状态监听，数据库操作等等。但这个项目的特殊性相关业务与我们提供的 Android 原生插件能力高度耦合，比如为这个项目提供数据库插件就是专门定制开发的，对于 Excel 插件的能力也是高度依赖一机一档相关字段，这跟我们选型用Hybrid 混合开发模式 的初心是相背离。我们初心是希望 Web 开发人员只需要专注于业务开发和界面绘制，原生部分则是提供相应的Android 设备能力集即可，每个插件跟业务是完全无关，这样就可以做到原生开发和Web开发互相解耦，两者之间通过接口隔离即可。</p><p><strong>实践过程中碰到的问题</strong></p><p>无论如何，一机一档项目是第一个应用 Hybrid 混合开发进行实战的项目，遇到的问题或者坑都是很正常，积极面对解决，并且不断进行总结和反思。把之前碰到的问题，简单罗列总结下：</p><ol type="1"><li><p>开发人员调试困难问题。前端人员在开发时候是编写HTML5页面，所运行的环境跟 PC 端有很大的不同，因为需要运行在具体手机的环境上，因此需要每次编写完，需要通过移动端人员集成打包出一个APP 包进行安装验证，每新增或修改一个页面就需要重新打包验证，每次都需要集成测试，步骤繁琐，效率低下。</p></li><li><p>项目集成测试问题。Android 系统 Webview 和 PC 端浏览器内核版本差异问题导致加载效果不一致。</p></li><li><p>前端开发框架兼容问题。前端开发人员技术选型是基于 Vue.js 框架，这是一个渐进式 Javascript 框架，刚开始不支持。</p></li><li><p>文档不规范问题。在前期开发阶段，文档提供不详细，开发人员使用规则不清楚，导致沟通成本增加。</p></li><li><p>Webview 性能问题。</p></li></ol><p><strong>如何解决</strong></p><ol type="1"><li><p>关于调试困难问题。提供一个调试工具叫做 Chrome DevTool，通过 Inspect 模式加载手机端里的 HTML5 页面，为何选择用 Chrome，因为Chrome 是目前主流前端开发调试利器，不仅能支持 Web 端开发，对于 HTML5 页面调试开发同样是能监听到 Javascript 报错或 CSS 报错，对于资源、网络、日志、内存等等，都是一步到位。同时在 APP 里提供一个在线调试环境，就是 Web 前端开发人员布置一个站点，在手机端通过 IP 地址远程访问站点，这样就可以在手机端实时看到刚刚修改内容是什么。</p></li><li><p>关于项目集成测试问题。在集成测试阶段，对Android 系统 Webview 和 PC 端浏览器内核版本区别有进一步认识，在Android 5.0 之前选用的是 Webkit 内核来加载 Web 资源文件，而在 Android 5.0 之后，则选用 Chromium 作为内核来加载，那么在为 PC 端浏览器端，如果你选择的是 Chorme 作为你默认浏览器的话，它的内核也是 Chromium 。尽管两者内核类型一样，都是 Chromium ，但两者加载 Javascript 效果上表现也不一样，比如最新浏览器版本可支持 ES 6 特性，但是在最新版的手机上就不一定 ES 6特性，目前通过调查 Android 5.0 之前的系统市场占有率，发现比例为不到20%，暂时适配到 Android 5.0 版本。</p></li><li><p>关于前端开发框架兼容问题。刚开始选用 Hybrid 开发模式时，对于公司内部 前端开发人员选用何种前端框架不甚了解，我们这边提供的 Demo 则是最原始的 HTML + Javascript + CSS 写法，以为前端人员只需要简单了解下就能上手，但在实践中发现却不是这样的。他们选型的前端技术是基于 Vue.js ，因为 Vue.js 是需要编译打包，生成发布的内容是混淆过的HTML + Javascript ，里面 Javascript 文件加载顺序使得我们开发 Javascript 插件调用引起问题，那样就会导致前端人员在调用具体插件能力时候，发现这个插件里的某个方法还没定义，就导致页面数据出错。后来通过了解 Vue.js 开发方式，调整项目工程中 Javascript 执行顺序， 确保具体插件调用在 Vue.js 执行前触发。</p></li><li><p>关于文档不规范问题。在前期开发阶段，前端人员没有统一查找目前已有插件能力的地方，仅仅根据我们提供的 Javascript 文件里的方法注释，虽然是针对每个方法的 Demo 用法，但是在实际开发中，前端开发人员也会调用出错。不是这个方法回调方法写错，就是参数类型传入传错，这样就导致的一个结果，前端开发人员不断地过来询问这个方法是如何调用的，我明明已经根据你的 Demo 写法进行编码了，为何还是报错的，前期的沟通成本还是很高。所以需要一个提供统一文档地方，里面写明了具体配置如何，写法如何，怎么是一步一步走，基本上可以避免类似的错误，更好的提高工作效率，减少沟通成本，所以一个规范的文档是很有必要的。</p></li><li><p>关于 WebView 性能加载问题。这是在解决 WebView 加载 HTML + Javascript + CSS 等资源时发现一个白屏问题，同时用 HTML5 做页面本身就会比原生加载来的慢。为了提高用户体验，在加载等待时，提供一个加载框来提示，等 HTML 资源文件全部渲染完毕后，等待框再消失，这样就可以避免一定的白屏现象。</p></li></ol><h3 id="小结">小结</h3><p>整体来说，为何会选择 Hybrid 混合开发模式是基于当前业务场景需要，技术是服务于业务发展，业务场景变化导致技术解决方案的选型也需要相应变化。面对以项目导向的开发现状，不能一昧追求最新最酷的技术，也不能对过时的技术方案过分保守，应该需要对当前业务场景进行判断，选择合适的解决方案才最佳的策略，没有一劳永逸的技术手段，只有时刻变化的业务需求和不断更新迭代技术方案。通过在一机一档项目中实战，面对问题，积极解决问题，也正是在解决问题过程中，产生新的想法和尝试，不断地完善框架能力，使得框架功能越来越全，进而更好的服务于业务开发问题，提高业务响应能力，降低开发成本，提升工作效率。</p>]]></content>
    
    <summary type="html">
    
      Hybrid到底是什么鬼，肯定是需要去了解了解。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>开发人员必备的技能——单元测试</title>
    <link href="http://cryallen.com/2017/08/20/2017-08-20-AndroidUnitTest/"/>
    <id>http://cryallen.com/2017/08/20/2017-08-20-AndroidUnitTest/</id>
    <published>2017-08-20T04:17:19.000Z</published>
    <updated>2017-08-20T04:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起软件测试四个字，想必大家脑海中浮现的有集成测试、系统测试、黑盒测试、白盒测试等，可能就是没想到会有单元测试。 对于大学是学习软件工程专业出身的同学来说可能会听过这四个字，对工作好几年的职场老鸟可能也听过但是没实际用过居多。绝大多数的开发人员都是忙于把手头的工作开发好，并不会把单元测试纳入工作范畴，他们会说，我连功能开发都忙不过来了，哪有时间去做单元测试，况且还要写测试代码，那不是重复写一篇代码功能吗？但，单元测试真的不值得花时间去做吗，那是因为可能你并不清楚单元测试的投入产出比有多高，下面就简单介绍单元测试到底能给开发人员带来多少好处。</p><ul><li><p>什么是单元测试</p></li><li>为什么要做单元测试</li><li>不写单元测试借口</li><li>主流框架 JUnit 和 TestNG</li><li>Android 中的单元测试</li><li><p>小结</p></li></ul><h3 id="什么是单元测试">什么是单元测试</h3><p>单元测试本质上也是代码，与普通代码的区别在于它是验证代码正确性的代码。可简单做个定义：单元测试是开发人员编写的、用于检测在特定条件下目标代码正确性的代码。</p><p>软件开发天生就具有复杂性，没人敢打包票说自己写的代码一点问题都没有，或者不经测试就能保证代码正确运行，可能你在这个执行路径下能够执行，殊不知还有其他路径，有一一去验证过吗，因此，要保证程序的正确性就必须要对我们代码进行严格测试。</p><p>举个简单例子：比如有个计算类，里面有个 add 方法，操作就是两个数进行相加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> one, <span class="keyword">int</span> another)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//只是简单的两个数相加</span></span><br><span class="line">        <span class="keyword">return</span> one + another;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常规做法：假如你写好了这个方法，你想进行验证 add 方法的正确性，需要写个使用 add 方法的 main 函数，首先实例化 Calculator 类，然后调用 add 方法并传入两个参数，比如 1 和 2。然后你运行这个工程，看得出结果是否为 3 ，如果是 3 ，则表明我这个方法写的没有错误，可能就不测试了，就继续开发后续的功能，如果不是 3 ，则返回去看看代码中哪里出错了，重新进行调试，甚至有时候肉眼还看不出代码哪里出错，此时就引入断点去查看，在此期间，很大一部分时间就花在断点、调试、运行上。</p><p>单元测试做法：首先会利用 JUnit 测试框架（至于这个框架后面介绍）写一段测试代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="keyword">int</span> sum = calculator.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 CalculatorTest 是 Calculator 对应的测试类，这里的 testAdd 对应着 add 的测试方法，进行测试一般分为三步骤：</p><ul><li>setup。一般是 new 出你要测试的那个类，比如： Calculator calculator = new Calculator();</li><li>执行操作。一般是调用你要测试的那个方法，获得运行结果： int sum = calculator.add(1, 2);</li><li>验证结果。验证得到的结果跟预期中是一样的： Assert.assertEquals(3, sum);</li></ul><p>看到 Assert 这个关键词了吗，这里可以理解为断言或者期望值，根据入参的值，期望有个什么值输出，而不是靠肉眼去验证是不是自己想要的值，是直接通过判断值是否相等性来验证会具有更客观性。</p><p>以上介绍的只是单元测试一点点，那它能给我们带来哪些更多好处呢？</p><h3 id="为什么要做单元测试">为什么要做单元测试</h3><p>通常我们在做任何工作会先考虑它的回报，编写代码更是如此。如果单元测试的作用不大，没有人会愿意再写一堆无用的代码，那么单元测试到底能够给我们带来什么优点呢？如下：</p><ul><li>便于后期重构。单元测试可以为代码的重构提供保障，只要重构代码之后单元测试全部运行通过，那么在很大程度上表示这次重构没有引入新的BUG，当然这是建立在完整、有效的单元测试覆盖率的基础上。</li><li>优化设计。编写单元测试将使用户从调用者的角度观察、思考，特别是使用TDD驱动开发的开发方式，会让使用者把程序设计成易于调用和可测试，并且解除软件中的耦合。</li><li>文档记录。单元测试就是一种无价的文档，它是展示函数或类如何使用的最佳文档，这份文档是可编译、可运行的、并且它保持最新，永远与代码同步。</li><li>具有回归性。自动化的单元测试避免了代码出现回归，编写完成之后，可以随时随地地快速运行测试，而不是将代码部署到设备之后，然后再手动地覆盖各种执行路径，这样的行为效率低下，浪费时间。</li></ul><p>等等，讲了这么多优点，无非就是良好的接口设计、正确性、可回归、可测试、完善的调用文档、高内聚、低耦合，这些优点已经足以让我们对单元测试重视起来了，但是个人觉得还有更重要的原因。</p><ul><li>首先，带来自信。在接手一个新的项目，或者说是参与一个新的项目开发时，往往这种情况是你半途参加进去的，你需要对已有的代码结构进行解读和理解，对于业务的理解，对于代码个中各个模块关系的理解。如果一开始就理财出错，很可能修改后的代码会引起更多的BUG出现，到那时候又需要修复更多的BUG，改了一个地方，很有可能会莫名其妙地影响另外一个地方，这种现象是很常见的。还有一种情况，假设你修改的功能没问题，但是需要去测试验证，在测试的时候就需要考虑这个功能点它原有的测试路径有哪些，又需要一一去验证功能路径，以证明本次修改对于已存在的功能点不造成影响。这其中就存在着很大的时间成本，导致效率不高。那是否存在着这么一种方式，我需要修改我想改动的地方，不需要关心修改完之后它所造成的影响，也不需要关心它的测试回归性，有，此时就是单元测试登场的时候。写单元测试代码，可以让我自己写的代码足够自信，它是经得起考验的。</li><li>其次，更快反馈。对于有一定编程经验的开发人员来说，当他拿到一个新需求的时候，首先想到的不是动手 Coding ，而是会先想想代码的结构，有些类，数据结构该是如何，然后才开始敲代码。如果没有单元测试，一般流程基本是这个模块功能全部写完才开始测试，比如利用 MVP 架构的功能。一般都是开始 Model 模块,然后完善 Presenter 模块，最后写 View 模块，等这几个模块都写完了，再把 APP 跑起来，验证自己写的功能模块是否符合需求，没有符合则继续回去修改代码，这中间需要花费很长的时间才能知道当下自己写的代码是否符合要求，是否正确。那有没有一种即时反馈的方式呢，有，写单元测试即可，当你写完一个函数，马上就匹配一个单元测试函数，这样即写即测的方式可以保证你当场写的代码马上进行修改，测试通过一个，就表示完成一个小的功能点，最后，把函数组装起来，就是我们想要大的功能点。</li><li>最后，节约时间。对于 Android 开发来说，一遍一遍的运行 APP ，然后执行相应的用户操作，看界面是否正确的显示，通过这种方式来测试功能，其实是非常浪费时间，而且效率不高，而用单元测试，可以几乎不用打开 APP 来执行，当然有些需要一些资源文件的是需要 APP 运行条件，绝大部分的功能在单元测试阶段就能验证完毕，那么速度就相对快很多。此外，单元测试还能帮忙减少 BUG ，从而减少调试 BUG 的时间，一些低级犯的错误在单元测试阶段就能避免掉。</li></ul><h3 id="不写单元测试借口">不写单元测试借口</h3><p>很多开发人员不写单元测试，最重要的一个原因是他们并不知道单元测试能够带来什么好处，甚至根本不了解单元测试这个词，那自然就像平行线般与之毫无交集。还有一个比较重要的原因是一些开发人员的编程思想还处在一个相对初级的阶段，开发软件只管实现功能，什么高内聚、低耦合、重构、设计、可测试等认为太过专业，对于这些名词以及意义还不了解，这自然不会考虑使用了。还有一些非思想层面的理由，如下：</p><ul><li>单元测试太花时间了。软件开发工作那么忙，代码都写不完哪有时间写单元测试。这可能是开发人员用的最多的借口，从某些方面来说，这不能算借口，因为很多开发人员确实在工作上投入的时间特别多。但真的是这样的吗，你有没有想过，导致加班的原因也许就是花了太多时间在手动测试、调试程序上：或许你没有考虑到灵活性与设计，使得在需求发生变更时你需要花很多时间在复杂的代码堆中完成特定的功能，而这些修改又可能引入新的 BUG ，又将导致你需要进行耗时的手动测试、调试等等，如此反复，代码将变得越来越乱，越来越难以维护，最终导致无休止的加班。</li><li>测试不是我的工作。测试确实不是开发人员的工作，但单元测试确实是开发人员的工作，测试包含很多种，而只有单元测试是开发人员的工作范畴。开发人员为应用编写代码，那么自然需要保证代码的正确性，而单元测试正是这种保证代码正确性的白盒测试，也就是在了解代码内部结构逻辑的情况下进行有目的的测试，既然说到了解代码，那么开发者自然是最权威的人。因此，编写单元测试并且为测试人员提交正确的代码进行其他测试是开发人员的职责所在。</li><li>代码都编译通过了，还测什么。一般来说，这是一个不会放在嘴上但可能藏在心里的借口。代码编译通过只能说你写的代码符合语法要求，并不代表能保证正确性。</li><li>代码原来就没有单元测试，并且难以测试。这个问题基本是接受和维护别人开发的代码，而原来的代码本身就没有单元测试了，再加入如果代码的耦合性较高，那么就更难以为这些代码写单元测试。此时正是你了解代码时候，首先为能够测试的部分添加单元测试，保证这些可测试的部分不会被污染，然后在对代码有足够的了解之后再对代码进行重构，降低代码的耦合性，并且慢慢补充测试用例，使得代码的耦合性、可测试性慢慢建立起来。</li></ul><h3 id="主流框架-junit-和-testng">主流框架 JUnit 和 TestNG</h3><p><strong>JUnit</strong> 是一个 Java 语言的单元测试框架，它是 <strong>xUnit</strong> 单元测试架构体系的一个实例，用于编写和运行可重复的测试。它包括以下特性：</p><ul><li>用于测试期望结果的断言（Assertion）</li><li>用于共享共同测试数据的测试工具</li><li>用于方便的组织和运行测试的测试套件</li><li>图形和文本的测试运行器</li></ul><p><strong>TestNG</strong> 是一个测试框架，其灵感来自 <strong>JUnit</strong> 和 <strong>NUnit</strong> ，但引入了一些新的功能，使其功能更强大，使用更方便。<strong>TestNG</strong> 消除了大部分的旧框架的限制，使开发人员能够编写更加灵活和强大的测试。 因为它在很大程度上借鉴了Java注解( JDK5.0 引入的)来定义测试，它也可以显示如何使用这个新功能在真实的Java语言生产环境中。</p><p>特点如下：</p><ul><li>注解</li><li>TestNG 使用 Java 和面向对象的功能</li><li>支持综合类测试(例如，默认情况下，不用创建一个新的测试每个测试方法的类的实例)</li><li>独立的编译时测试代码和运行时配置/数据信息</li><li>灵活的运行时配置</li><li>主要介绍“测试组”。当编译测试，只要要求 TestNG 运行所有的“前端”的测试，或“快”，“慢”，“数据库”等</li><li>支持依赖测试方法，并行测试，负载测试，局部故障</li><li>灵活的插件 API</li><li>支持多线程测试</li></ul><h3 id="android-中的单元测试">Android 中的单元测试</h3><p>因为 JUnit 测试框架是基于 Java 语言，当然 Android 开发也是基于 Java 语言，所以在 Android 中我们可以用 Junit4 单元测试框架进行回归测试，但同时，Google 也提供了一个 AndroidJUnit4 测试框架，看名字就知道它是基于 JUnit 4 框架适合在 Android 环境中做单元测试。</p><p>那么，AndroidJUnit4 和 Junit4 有什么区别呢？很大一个区别在于：</p><p>1，AndroidJUnit4 测试可以在真机的环境下进行。比如你要测文件读取SD卡，或者操作 SqlLite 数据库，这些条件只有在真机上才有的，此时你用 AndroidJUnit4 框架测试，可以直接跑起来用真实的环境做相应的单元测试。</p><p>2，JUnit4 测试是运行在工程项目中，也就是在编译阶段。此时如果想要模拟 Android 环境，比如我想用 JUnit4 来测试 Activity 类，那么就需要引用第三方库来支持，引用 Mockito 和 Robolectric 框架来模拟 Android 环境进行相应的单元测试。</p><p>所以何时用 AndroidJUnit4 和 JUnit4 不同的框架进行单元测试，就看你待测试的方法前置条件是什么，然后做不同的选择。</p><h3 id="小结">小结</h3><p>总的来说，单元测试不是集成测试，单元测试只是测试一个方法单元，不是测试一整个流程。集成测试是一种End To End的系统测试，测试相关模块集成在一起是否能够按照预期工作，一般都是接口或者功能层面的测试，可能会依赖很多系统因素，测试的代码逻辑一般比较复杂，运行时间会比较长，出错之后的修复成本高。单元测试则是开发者在集成测试之前就已经进行自测过，同时呢，进行单元测试之后，对于某个方法的执行路径组合进行了一一验证，它只关注三个目标：</p><ul><li>有明确的返回值。比如对某个函数进行单元测试，验证其返回值是否符合预期结果。</li><li>这个函数只改变其对象内部的一些属性或者状态，函数本身没有返回值，就验证它所改变的属性和状态。</li><li>一些函数没有返回值，也没有直接改变哪个值的状态，这就需要验证其行为，比如点击事件。</li></ul>]]></content>
    
    <summary type="html">
    
      说起软件测试四个字，想必大家脑海中浮现的有集成测试、系统测试、黑盒测试、白盒测试等，可能就是没想到会有单元测试。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>有关Android插件化思考</title>
    <link href="http://cryallen.com/2017/07/22/2017-07-22-AndroidPlugin/"/>
    <id>http://cryallen.com/2017/07/22/2017-07-22-AndroidPlugin/</id>
    <published>2017-07-22T08:48:02.000Z</published>
    <updated>2017-07-22T11:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近几年移动开发业界兴起了「 插件化技术 」的旋风，各个大厂都推出了自己的插件化框架，各种开源框架都评价自身功能优越性，令人目不暇接。随着公司业务快速发展，项目增多，开发资源却有限，如何能在有限资源内满足需求和项目的增长，同时又能快速响应问题和迭代新需求，这就是一个矛盾点。此时，插件化技术正好风生水起，去了解各个主流框架实现思路，看看能对目前工作是否有帮助，是很有必要的。</p><p>主要分为以下几个部分</p><ul><li>插件化介绍</li><li>入门知识</li><li>实现原理</li><li>主流框架</li><li>实战</li><li>小结</li><li>进阶资料</li></ul><h3 id="插件化介绍">插件化介绍</h3><p>百度百科里是这么定义插件的：「 是一种遵循一定规范的<strong>应用程序接口</strong>编写出来的程序，只能运行在程序规定的系统平台下，而不能脱离指定的平台单独运行。」，也就是说，插件可以提供一种动态扩展能力，使得应用程序在运行时加载原本不属于该应用的功能，并且做到动态更新和替换。</p><p>那么在 Android 中，何为「 插件化 」，顾名思义，就是把一些核心复杂依赖度高的业务模块封装成独立的插件，然后根据不同业务需求进行不同组合，动态进行替换，可对插件进行管理、更新，后期对插件也可进行版本管理等操作。在插件化中有两个概念需要讲解下：</p><ul><li><p>宿主</p><p>所谓宿主，就是需要能提供运行环境，给资源调用提供上下文环境，一般也就是我们主 APK ，要运行的应用，它作为应用的主工程所在，实现了一套插件的加载和管理的框架，插件都是依托于宿主的APK而存在的。</p></li><li><p>插件</p><p>插件可以想象成每个独立的功能模块封装为一个小的 APK ，可以通过在线配置和更新实现插件 APK 在宿主 APK 中的上线和下线，以及动态更新等功能。</p></li></ul><p>那么为何要使用插件化技术，它有何优势，能给我们带来什么样好处，这里简单列举了以下几点：</p><ul><li>让用户不用重新安装 APK 就能升级应用功能，减少发版本频率，增加用户体验。</li><li>提供一种快速修复线上 BUG 和更新的能力。</li><li>按需加载不同的模块，实现灵活的功能配置，减少服务器对旧版本接口兼容压力。</li><li>模块化、解耦合、并行开发、 65535 问题。</li></ul><h3 id="入门知识">入门知识</h3><p>首先我们要知道插件化技术是属于比较复杂一个领域，复杂点在于它涉及知识点广泛，不仅仅是上层做应用架构能力，还要求我们对 Android 系统底层知识需要有一定的认知，这里简单罗列了其中会涉及的知识点：</p><figure><img src="/2017/07/22/2017-07-22-AndroidPlugin/pluginIntro_2.jpg" alt="入门知识"><figcaption>入门知识</figcaption></figure><p>首先，要介绍的是 Binder ，我们都知道 Android 多进程通信核心就是 Binder ，如果没有它真的寸步难行。 Binder 涉及两层技术，你可以认为它是一个中介者模式，在客户端和服务器端之间， Binder 就起到中介的作用。如果要实现四大组件的插件化，就需要在 Binder 上做修改， Binder 服务端的内容没办法修改，只能改客户端的代码，而且四大组件的每个组件的客户端都不一样，这个就需要深入研究了。学习Binder的最好方式是 AIDL ，这方面在网上有很多资料，最简单的方式就是自己写个 aidl 文件自动生成一个 Java 类，然后去查看这个Java类的每个方法和变量，然后再去看四大组件，其实都是跟 AIDL 差不多的实现方式。</p><p>其次，是 App 打包的流程。代码写完了，执行一次打包操作，中途经历了资源打包、 Dex 生成、签名等过程。其中最重要的就是资源的打包，即 AAPT 这一步，如果宿主和插件的资源id冲突，一种解决办法就是在这里做修改。</p><p>第三， App 在手机上的安装流程也很重要。熟悉安装流程不仅对插件化有帮助，在遇到安装 Bug 的时候也非常重要。手机安装 App 的时候，经常会有下载异常，提示资源包不能解析，这时需要知道安装 App 的这段代码在什么地方，这只是第一步。第二步需要知道， App 下载到本地后，具体要做哪些事情。手机有些目录不能访问， App 下载到本地之后，放到哪个目录下，然后会生成哪些文件。插件化有个增量更新的概念，如何下载一个增量包，从本地具体哪个位置取出一个包，这个包的具体命名规则是什么，等等。这些细节都必须要清楚明白。</p><p>第四，是 App 的启动流程。 Activity 启动有几种方式？一种是写一个 startActivity ，第二种是点击手机 App ，通过手机系统里的 Launcher 机制，启动 App 里默认的 Activity 。通常， App 开发人员喜闻乐见的方式是第二种。那么第一种方式的启动原理是什么呢？另外，启动的时候，Main 函数在哪里？这个 Main 函数的位置很重要，我们可以对它所在的类做修改，从而实现插件化。</p><p>第五点更重要，做 Android 插件化需要控制两个地方。首先是插件 Dex 的加载，如何把插件 Dex 中的类加载到内存？另外是资源加载的问题。插件可能是 Apk 也可能是 so 格式，不管哪一种，都不会生成 R.id ，从而没办法使用。这个问题有好几种解决方案。一种是是重写 Context 的 getAsset 、 getResource 之类的方法，偷换概念，让插件读取插件里的资源，但缺点就是宿主和插件的资源 id 会冲突，需要重写 AAPT 。另一种是重写 AMS中保存的插件列表，从而让宿主和插件分别去加载各自的资源而不会冲突。第三种方法，就是打包后，执行一个脚本，修改生成包中资源id。</p><p>第六点，在实施插件化后，如何解决不同插件的开发人员的工作区问题。比如，插件1和插件2，需要分别下载哪些代码，如何独立运行？就像机票和火车票，如何只运行自己的插件，而不运行别人的插件？这是协同工作的问题。火车票和机票，这两个 Android 团队的各自工作区是不一样的，这时候就要用到 Gradle 脚本了，每个项目分别有各自的仓库，有各自不同的打包脚本，只需要把自己的插件跟宿主项目一起打包运行起来，而不用引入其他插件，还有更厉害的是，也可以把自己的插件当作一个 App 来打包并运行。</p><p>上面介绍了插件化的入门知识，一共六点，每一点都需要花大量时间去理解。否则，在面对插件化项目的时候，很多地方你会一头雾水。而只要理解了这六点核心，一切可迎刃而解。</p><h3 id="实现原理">实现原理</h3><p>在Android中应用插件化技术，其实也就是动态加载的过程，分为以下几步：</p><ul><li>把可执行文件（ .so/dex/jar/apk 等）拷贝到应用 APP 内部。</li><li>加载可执行文件，更换静态资源</li><li>调用具体的方法执行业务逻辑</li></ul><p>Android 项目中，动态加载技术按照加载的可执行文件的不同大致可以分为两种：</p><ol type="1"><li>动态加载 .so 库</li><li>动态加载 dex/jar/apk文件（现在动态加载普遍说的是这种）</li></ol><p>第一点， Android 中 NDK 中其实就使用了动态加载，动态加载 .so 库并通过 JNI 调用其封装好的方法。后者一般是由 C/C++ 编译而成，运行在 Native 层，效率会比执行在虚拟机层的 Java 代码高很多，所以 Android 中经常通过动态加载 .so 库来完成一些对性能比较有需求的工作（比如 Bitmap 的解码、图片高斯模糊处理等）。此外，由于 .so 库是由 C/C++ 编译而来的，只能被反编译成汇编代码，相比中 dex 文件反编译得到的 Smali 代码更难被破解，因此 .so 库也可以被用于安全领域。</p><p>其二，“基于 ClassLoader 的动态加载 dex/jar/apk 文件”，就是我们指在 Android 中 动态加载由 Java 代码编译而来的 dex 包并执行其中的代码逻辑，<strong>这是常规 Android 开发比较少用到的一种技术</strong>，目前说的动态加载指的就是这种。</p><p>Android 项目中，所有 Java 代码都会被编译成 dex 文件，Android 应用运行时，就是通过执行 dex 文件里的业务代码逻辑来工作的。使用动态加载技术可以在 Android 应用运行时加载外部的 dex 文件，而通过网络下载新的 dex 文件并替换原有的 dex 文件就可以达到不安装新 APK 文件就升级应用（改变代码逻辑）的目的。</p><p>所以说，在 Android 中的 ClassLoader 机制主要用来加载 dex 文件，系统提供了两个 API 可供选择：</p><ul><li>PathClassLoader：只能加载已经安装到 Android 系统中的 APK 文件。因此不符合插件化的需求，不作考虑。</li><li>DexClassLoader：支持加载外部的 APK、Jar 或者 dex 文件，正好符合文件化的需求，所有的插件化方案都是使用 DexClassloader 来加载插件 APK 中的 .class文件的。</li></ul><h3 id="主流框架">主流框架</h3><p>在 Android 中实现插件化框架，需要解决的问题主要如下：</p><ul><li>资源和代码的加载</li><li>Android 生命周期的管理和组件的注册</li><li>宿主 APK 和插件 APK 资源引用的冲突解决</li></ul><p>下面分析几个目前主流的开源框架，看看每个框架具体实现思路和优缺点。</p><p><strong>DL 动态加载框架</strong> ( 2014 年底)</p><p>是基于代理的方式实现插件框架，对 App 的表层做了处理，通过在 Manifest 中注册代理组件，当启动插件组件时，首先启动一个代理组件，然后通过这个代理组件来构建，启动插件组件。 需要按照一定的规则来开发插件 APK，插件中的组件需要实现经过改造后的 Activity、FragmentActivity、Service 等的子类。</p><p>优点如下：</p><ul><li>插件需要遵循一定的规则，因此安全方面可控制。</li><li>方案简单，适用于自身少量代码的插件化改造。</li></ul><p>缺点如下：</p><ul><li>不支持通过 This 调用组件的方法，需要通过 that 去调用。</li><li>由于 APK 中的 Activity 没有注册，不支持隐式调用 APK 内部的 Activity。</li><li>插件编写和改造过程中，需要考虑兼容性问题比较多，联调起来会比较费时费力。</li></ul><p><strong>DroidPlugin</strong> ( 2015 年 8 月)</p><p>DroidPlugin 是 360 手机助手实现的一种插件化框架，它可以直接运行第三方的独立 APK 文件，完全不需要对 APK 进行修改或安装。一种新的插件机制，一种免安装的运行机制，是一个沙箱（但是不完全的沙箱。就是对于使用者来说，并不知道他会把 apk 怎么样）， 是模块化的基础。</p><p>实现原理：</p><ul><li>共享进程：为android提供一个进程运行多个 apk 的机制，通过 API 欺骗机制瞒过系统。</li><li>占坑：通过预先占坑的方式实现不用在 manifest 注册，通过一带多的方式实现服务管理。</li><li>Hook 机制：动态代理实现函数 hook ，Binder 代理绕过部分系统服务限制，IO 重定向（先获取原始 Object –&gt; Read ，然后动态代理 Hook Object 后–&gt; Write 回去，达到瞒天过海的目的）。</li></ul><p>插件 Host 的程序架构：</p><figure><img src="/2017/07/22/2017-07-22-AndroidPlugin/DroidPluginHost.png" alt="架构图"><figcaption>架构图</figcaption></figure><p>优点如下：</p><ul><li>支持 Android 四大组件，而且插件中的组件不需要在宿主 APK 中注册。</li><li>支持 Android 2.3 及以上系统，支持所有的系统 API。</li><li>插件与插件之间，插件与宿主之间的代码和资源完全隔阂。</li><li>实现了进程管理，插件的空进程会被及时回收，占用内存低。</li></ul><p>缺点如下：</p><ul><li>插件 APK 中不支持自定义资源的 Notification，通知栏限制。</li><li>插件 APK 中无法注册具有特殊的 IntentFilter 的四大组件。</li><li>缺乏对 Native 层的 Hook 操作，对于某些带有 Native 代码的插件 APK 支持不友好，可能无法正常运行。</li><li>由于插件与插件，插件与宿主之间的代码完全隔离，因此，插件与插件，插件与宿主之间的通信只能通过 Android 系统级别的通信方式。</li><li>安全性担忧（可以修改，hook一些重要信息）。</li><li>机型适配（不是所有机器上都能行，因为大量用反射相关，如果rom厂商深度定制了framework层，反射的方法或者类不在，容易插件运用失败）</li></ul><p><strong>Small</strong> ( 2015 年底)</p><p>Small 是一种实现轻巧的跨平台插件化框架，基于“轻量、透明、极小化、跨平台”的理念，实现原理有以下三点。</p><ul><li>动态加载类：我们知道插件化很多都从 DexClassLoader 类有个 DexPathList 清单，支持 dex/jar/zip/apk 文件格式，却没有支持 .so 文件格式，因此 Small 框架则是把 .so 文件包装成 zip 文件格式，插入到 DexPathList 集合中，改写动态加载的代码。</li><li>资源分段：由于 Android 资源的格式是 <strong>0xPPTTNNNN</strong> ，PP 是包 ID ，00-02 是属于系统，7f 属于应用程序，03-7e 则保留，可以在这个范围内做文章 ， TT 则是 Type 比如，attr 、layout 、string 等等，NNNN 则是资源全局 ID。那么这个框架则是对资源包进行重新打包，每个插件重新分配资源 ID ，这样就保证了宿主和插件的资源不冲突。</li><li>动态代理注册：在 Android 中要使用四大组件，都是需要在 manifest 清单中注册，这样才可以使用，那如何在不注册情况也能使用呢，这里就是用到动态代理机制进行 Hook ，在发送 AMS 之前用占坑的组件来欺骗系统，通过认证后，再把真正要调用的组件还原回来，达到瞒天过海目的。</li></ul><p>架构图： <img src="/2017/07/22/2017-07-22-AndroidPlugin/small.png" alt="架构图"></p><p>优点如下：</p><ul><li>所有插件支持内置宿主包中。</li><li>插件的编码和资源文件的使用与普通开发应用没有差别。</li><li>通过设定 URI ，宿主以及 Native 应用插件，Web 插件，在线网页等能够方便进行通信。</li><li>支持 Android 、 iOS 、和 Html5 ，三者可以通过同一套 Javascript 接口实现通信。</li></ul><p>缺点如下：</p><ul><li>暂不支持 Service 的动态注册，不过这个可以通过将 Service 预先注册在宿主的 AndroidManifest.xml 文件中进行规避，因为 Service 的更新频率通常非常低。</li></ul><p>与其他主流框架的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DyLA  : Dynamic-load-apk          @singwhatiwanna  </span><br><span class="line">DiLA  : Direct-Load-apk           @FinalLody  </span><br><span class="line">APF   : Android-Plugin-Framework  @limpoxe  </span><br><span class="line">ACDD  : ACDD                      @bunnyblue  </span><br><span class="line">DyAPK : DynamicAPK                @TediWang  </span><br><span class="line">DPG   : DroidPlugin               @cmzy, 360</span><br></pre></td></tr></table></figure><ul><li>功能</li></ul><table><thead><tr class="header"><th></th><th>DyLA</th><th>DiLA</th><th>ACDD</th><th>DyAPK</th><th>DPG</th><th>APF</th><th>Small</th></tr></thead><tbody><tr class="odd"><td>加载非独立插件</td><td>×</td><td>x</td><td>√</td><td>√</td><td>×</td><td>√</td><td>√</td></tr><tr class="even"><td>加载.so后缀插件</td><td>×</td><td>×</td><td>!</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr class="odd"><td>Activity生命周期</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr class="even"><td>Service动态注册</td><td>×</td><td>×</td><td>√</td><td>×</td><td>√</td><td>√</td><td>x</td></tr><tr class="odd"><td>资源分包共享</td><td>×</td><td>×</td><td>!</td><td>!</td><td>×</td><td>!</td><td>√</td></tr><tr class="even"><td>公共插件打包共享</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr class="odd"><td>支持AppCompat</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr class="even"><td>支持本地网页组件</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr class="odd"><td>支持联调插件</td><td>×</td><td>x</td><td>×</td><td>×</td><td>×</td><td>×</td><td>√</td></tr></tbody></table><ul><li>透明度</li></ul><table><thead><tr class="header"><th></th><th>ACDD</th><th>DyAPK</th><th>APF</th><th>Small</th></tr></thead><tbody><tr class="odd"><td>插件Activity代码无需修改</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr class="even"><td>插件引用外部资源无需修改name</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr class="odd"><td>插件模块无需修改build.gradle</td><td>×</td><td>x</td><td>×</td><td>√</td></tr></tbody></table><p><a href="https://github.com/didi/VirtualAPK" target="_blank" rel="noopener">VirtualAPK</a> (2017年 6 月 )</p><p>VirtualAPK 是滴滴开源的一套插件化框架，支持几乎所有的 Android 特性，四大组件方面。</p><p>架构图：</p><p><img src="/2017/07/22/2017-07-22-AndroidPlugin/va.jpg" alt="架构图"> 实现思路：</p><p>VirtualAPK 对插件没有额外的约束，原生的 apk 即可作为插件。插件工程编译生成 apk后，即可通过宿主 App 加载，每个插件 apk 被加载后，都会在宿主中创建一个单独的 LoadedPlugin 对象。如下图所示，通过这些 LoadedPlugin 对象，VirtualAPK 就可以管理插件并赋予插件新的意义，使其可以像手机中安装过的 App 一样运行。</p><ul><li><strong>合并宿主和插件的ClassLoader</strong> 需要注意的是，插件中的类不可以和宿主重复</li><li><strong>合并插件和宿主的资源</strong> 重设插件资源的 packageId，将插件资源和宿主资源合并</li><li><strong>去除插件包对宿主的引用</strong> 构建时通过 Gradle 插件去除插件对宿主的代码以及资源的引用 <img src="/2017/07/22/2017-07-22-AndroidPlugin/va1.png" alt="架构图"></li></ul><p>特性如下：</p><p><strong>四大组件均不需要在宿主manifest中预注册，每个组件都有完整的生命周期。</strong></p><ol type="1"><li>Activity：支持显示和隐式调用，支持Activity的<code>theme</code>和<code>LaunchMode</code>，支持透明主题；</li><li>Service：支持显示和隐式调用，支持Service的<code>start</code>、<code>stop</code>、<code>bind</code>和<code>unbind</code>，并支持跨进程bind插件中的Service；</li><li>Receiver：支持静态注册和动态注册的Receiver；</li><li>ContentProvider：支持provider的所有操作，包括<code>CRUD</code>和<code>call</code>方法等，支持跨进程访问插件中的Provider。</li></ol><ul><li>自定义View：支持<code>自定义 View</code>，支持自定义属性和<code>style</code>，支持动画；</li><li>PendingIntent：支持<code>PendingIntent</code>以及和其相关的<code>Alarm</code>、<code>Notification</code>和<code>AppWidget</code>；</li><li>支持插件<code>Application</code>以及插件manifest中的<code>meta-data</code>；</li><li>支持插件中的<code>so</code>。</li></ul><p><strong>优秀的兼容性</strong></p><ul><li>兼容市面上几乎所有的Android手机，这一点已经在滴滴出行客户端中得到验证。</li><li>资源方面适配小米、Vivo、Nubia 等，对未知机型采用自适应适配方案。</li><li>极少的 Binder Hook，目前仅仅 hook了两个Binder：<code>AMS</code>和<code>IContentProvider</code>，hook 过程做了充分的兼容性适配。</li><li>插件运行逻辑和宿主隔离，确保框架的任何问题都不会影响宿主的正常运行。</li></ul><p><strong>入侵性极低</strong></p><ul><li>插件开发等同于原生开发，四大组件无需继承特定的基类；</li><li>精简的插件包，插件可以依赖宿主中的代码和资源，也可以不依赖；</li><li>插件的构建过程简单，通过 Gradle 插件来完成插件的构建，整个过程对开发者透明。</li></ul><p>如下是 VirtualAPK 和主流的插件化框架之间的对比。</p><table><thead><tr class="header"><th>特性</th><th>DynamicLoadApk</th><th>DynamicAPK</th><th>Small</th><th>DroidPlugin</th><th>VirtualAPK</th></tr></thead><tbody><tr class="odd"><td>支持四大组件</td><td>只支持Activity</td><td>只支持Activity</td><td>只支持Activity</td><td>全支持</td><td>全支持</td></tr><tr class="even"><td>组件无需在宿主manifest中预注册</td><td>√</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr class="odd"><td>插件可以依赖宿主</td><td>√</td><td>√</td><td>√</td><td>×</td><td>√</td></tr><tr class="even"><td>支持 PendingIntent</td><td>×</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr class="odd"><td>Android 特性支持</td><td>大部分</td><td>大部分</td><td>大部分</td><td>几乎全部</td><td>几乎全部</td></tr><tr class="even"><td>兼容性适配</td><td>一般</td><td>一般</td><td>中等</td><td>高</td><td>高</td></tr><tr class="odd"><td>插件构建</td><td>无</td><td>部署aapt</td><td>Gradle插件</td><td>无</td><td>Gradle插件</td></tr></tbody></table><p><a href="https://github.com/Qihoo360/RePlugin" target="_blank" rel="noopener">RePlugin</a> (2017 年 7 月)</p><p>RePlugin是一套完整的、稳定的、适合全面使用的，占坑类插件化方案，由360手机卫士的RePlugin Team研发，也是业内首个提出”全面插件化“（全面特性、全面兼容、全面使用）的方案。</p><p>框架图： <img src="/2017/07/22/2017-07-22-AndroidPlugin/RePluginFramePic.jpeg" alt="架构图"></p><p>主要优势有： 极其灵活：主程序无需升级（无需在Manifest中预埋组件），即可支持新增的四大组件，甚至全新的插件 非常稳定：Hook 点仅有一处（ClassLoader），无任何 Binder Hook！如此可做到其崩溃率仅为“万分之一”，并完美兼容市面上近乎所有的 Android ROM。 特性丰富：支持近乎所有在“单品”开发时的特性。包括静态 Receiver、 Task-Affinity 坑位、自定义 Theme、进程坑位、AppCompat、DataBinding等。 易于集成：无论插件还是主程序，只需“数行”就能完成接入。 管理成熟：拥有成熟稳定的“插件管理方案”，支持插件安装、升级、卸载、版本管理，甚至包括进程通讯、协议版本、安全校验等。 数亿支撑：有 360 手机卫士庞大的数亿用户做支撑，三年多的残酷验证，确保App用到的方案是最稳定、最适合使用的。</p><h3 id="实战">实战</h3><p>主要是测试各个框架之间上手的容易度如何，并做不同对比，这边写了两个 Demo 例子，一个是基于 Small 框架，一个基于 VirtualAPK 框架，从中能看出不同。</p><p><strong>Small 实践</strong></p><p>要引用官方最新的版本，不然在宿主和插件合并<code>build.gradle</code> 的时候会出现一个 BUG，这是个坑位，注意行走。其次在模块命名上要遵循一定的规则，比如业务模块用 app.* ，公共库模块用 lib.* ，相当于包名 .app.，.lib. 。每次在插件中添加一个 activity 组件，都需要在宿主中配置路由，然后在重新编译插件一遍，不然直接运行的话，在宿主中是找到新添加的 activity 组件，会报该组件没在系统 manifest 中，所以每次新增或修改建议插件都重新编译一遍。官方里说了，对于 Service 支持不太友好，就没去实践了。</p><p><strong>VirtualAPK 实践</strong> 有个坑需要注意的是构建环境，官方说明是要以下版本环境，Gradle 2.14.1 和 com.android.tools.build 2.1.3， 之前编译的是用最新的Gradle版本，导致一直有问题，至于是否有其他问题，可以看官方文档。</p><p><strong>具体代码</strong> Small Demo ：<a href="https://github.com/cr330326/MySmall" target="_blank" rel="noopener" class="uri">https://github.com/cr330326/MySmall</a></p><p>VirtualAPK Demo ：<a href="https://github.com/cr330326/MyVirtualAPKDemo" target="_blank" rel="noopener" class="uri">https://github.com/cr330326/MyVirtualAPKDemo</a></p><h3 id="小结">小结</h3><p>正如开头所说，要实现插件化的框架，无非就是解决那典型的三个问题：插件代码如何加载、插件中的组件生命周期如何管理、插件资源和宿主资源冲突怎么办。每个框架针对这三个问题，都有不同的解决方案，同时呢，根据时间顺序，后出来的框架往往都会吸收已经出的框架精髓，进而修复那些比较有里程碑意义框架的不足。但这些框架的核心思想都是用到了代理模式，有的在表面层进行代理，有的则在系统应用层进行代理，通过代理达到替换和瞒天过海，最终让 Android 系统误以为调用插件功能和调用原生开发的功能是一样的，进而达到插件化和原生兼容编程的目的。</p><h3 id="进阶资料">进阶资料</h3><p>1，<a href="http://www.jianshu.com/p/353514d315a7" target="_blank" rel="noopener">Android插件化从入门到放弃-最强合集</a></p><p>2，<a href="http://www.cnblogs.com/Jax/" target="_blank" rel="noopener">包建强的无线技术空间</a>，写给Android App 开发人员看的 Android 底层知识 置顶8篇</p><p>3，<a href="http://weishu.me/2016/01/28/understand-plugin-framework-overview/" target="_blank" rel="noopener">Android插件化原理解析</a></p><p>4，<a href="http://www.infoq.com/cn/articles/android-plug-ins-from-entry-to-give-up" target="_blank" rel="noopener">Android插件化：从入门到放弃</a></p>]]></content>
    
    <summary type="html">
    
      插件化这么火，没理由不去看看。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Cordova框架的一些理解</title>
    <link href="http://cryallen.com/2017/06/26/2017-06-26-Cordova/"/>
    <id>http://cryallen.com/2017/06/26/2017-06-26-Cordova/</id>
    <published>2017-06-26T14:36:09.000Z</published>
    <updated>2017-07-21T18:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>因为工作原因，最近需要研究Cordova框架，看了其中的源码和实现方式，当场在看的时候马上能理解，但是事后再回去看相关源码时候却发现之前理解的内容又忘记了，又不得不重新开始看，所以总觉得需要记录下来，这样也表明之前也是学习过，俗话说「<strong>好记性不如烂笔头</strong> 」，想必也是体现了笔记的重要性。</p><h3 id="目录">目录</h3><ul><li><p>为何要用Cordova</p></li><li><p>什么是Cordova</p></li><li><p>Cordova中UML类图</p></li><li><p>Cordova实现机制</p></li><li><p>小结</p><p>​</p></li></ul><h3 id="为何要用cordova">为何要用Cordova</h3><p>随着移动互联网的发展，现在基本是APP满天飞，不知在大家印象中，如果我去下载一个APP，那么基本都能看到有两种选择，一种是Android版本，一种是IOS版本。不管我的手机是哪种操作系统，安装完一个APP之后，后续如果有新的版本发布的时候，我还必须去更新，才能享用新版本里的功能，比如我装了“京东”这个APP，前几天正好碰到“618”活动，那么之前一个月APP Store就提醒我要去更新最新的APP版本，以免错过“618”活动中新的功能使用。相对来说IOS系统更新APP比起Android系统用户体验会好一点，但是还是稍显麻烦点。</p><p>那么有没有一种方式，我只需要开发一个APP版本，就能去适配通用的操作系统呢，不仅可以适配Android、IOS，还可以适配其他系统，比如Windows Phone、 Palm WebOS、Blackberry等等。有，Cordova就能提供这种能力，代码写一次，就能到处运行，跟我们日常开发网站效果一样，基于写Web APP，根据输出平台要求不同，就能提供不同类型的安装包。Cordova其设计初衷是希望用户群体能够通过跨平台开发的方法降低原生开发的成本，为此，开发人员需要安装原生开发环境，配置工程，使用<a href="http://lib.csdn.net/base/html5" target="_blank" rel="noopener">HTML5</a>、<a href="http://lib.csdn.net/base/css3" target="_blank" rel="noopener">CSS3</a>、<a href="http://lib.csdn.net/base/javascript" target="_blank" rel="noopener">JS</a>和原生SDK生成应用。</p><h3 id="什么是cordova">什么是Cordova</h3><p>官网定义如下：</p><p><strong>Apache Cordova是一个开源的移动开发框架。允许你用标准的web技术-HTML5,CSS3和JavaScript做跨平台开发。 应用在每个平台的具体执行被封装了起来，并依靠符合标准的API绑定去访问每个设备的功能，比如说：传感器、数据、网络状态等。</strong></p><p>使用Apache Cordova的人群:</p><ul><li><p>移动应用开发者，想扩展一个应用的使用平台，而不通过每个平台的语言和工具集重新实现。</p></li><li><p>web开发者，想包装部署自己的web App将其分发到各个应用商店门户。</p></li><li><p>移动应用开发者，有兴趣混合原生应用组建和一个<em>WebView</em>(一个特别的浏览器窗口) 可以接触设备A级PI，或者你想开发一个原生和WebView组件之间的插件接口。</p><p>​</p></li></ul><p><strong>架构图</strong></p><figure><img src="/2017/06/26/2017-06-26-Cordova/cordovaapparchitecture.png" alt="框架图"><figcaption>框架图</figcaption></figure><p>从图中，我们可以看到它提供了Web APP、WebView、Cordova Plugins。</p><p><strong>Web APP</strong></p><p>这是存放应用程序代码的地方，体现是你的具体业务逻辑模块。应用的实现是通过web页面，默认的本地文件名称是是<em>index.html</em>，这个本地文件应用CSS,JavaScript,图片，媒体文件和其他运行需要的资源。应用执行在原生应用包装的<em>WebView</em>中，这个原生应用是你分发到app stores中的。</p><p><strong>WebView</strong></p><p>Cordova启用的WebView可以给应用提供完整用户访问界面。在一些平台中，他也可以作为一个组件给大的、混合应用，这些应用混合和Webview和原生的应用组件。</p><p><strong>Cordova Plugins</strong></p><p>插件是Cordova生态系统的重要组成部分。他提供了Cordova和原生组件相互通信的接口并绑定到了标准的设备API上，这使你能够通过JavaScript调用原生代码。</p><h3 id="cordova中uml类图">Cordova中UML类图</h3><p>其实Cordova通过命令来添加项目的，但是可以选择哪个平台去编译，比如我们添加Android平台，在Android默认mainActivity类，我们可以看到它其实继承CordovaActivity类，一切初始化条件是从loadUrl方法开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> org.apache.cordova.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">CordovaActivity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// enable Cordova apps to be started in the background</span></span><br><span class="line">        Bundle extras = getIntent().getExtras();</span><br><span class="line">        <span class="keyword">if</span> (extras != <span class="keyword">null</span> &amp;&amp; extras.getBoolean(<span class="string">"cdvStartInBackground"</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            moveTaskToBack(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set by &lt;content src="index.html" /&gt; in config.xml</span></span><br><span class="line">        loadUrl(launchUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进而得到以下UML类图</p><figure><img src="/2017/06/26/2017-06-26-Cordova/cordovaUML.jpg" alt="UML图"><figcaption>UML图</figcaption></figure><p>简单分析下，CordovaActivity内依赖一个WebView类，一个Preferences类，一个CordovaInterface接口，并同时初始化一些配置信息。WebView具体实现是由CordovaWebViewImpl类，CordovaInterface接口具体实现是由CordovaInterfaceImpl类实现。</p><p>CordovaWebViewImpl是核心类，里面会把一些插件能力初始化，用一个PluginManager进行管理，包含一个引擎类—CordovaWebViewEngine，这个引擎是通过反射的方式创建，自身初始化的时候把NativeToJsMessageQueue关联起来，里面包含着以Js字符串为主的双向链表，把每次从前端通过JS代码存储起来，然后通过绑定的桥接方式Pop出到相应的Native代码中去。</p><p>最终实现由SystemWebViewEngine类来对Android系统中WebView控件进行二次包装，这个类的初始化是在CordovaWebViewImpl类反射创建，相关插件和消息传递也是通过SystemWebViewEngine进行绑定。</p><h3 id="cordova实现机制">Cordova实现机制</h3><p>当Cordova框架启动时候，CordovaActivity类中的onCreate方法调用loadUrl方法即可启动，最终在SystemWebViewEngine类的init方法中，会调用webView的addJavascriptInterface方法，看到这个方法是不是很熟悉，我们常规让webView支持开启JavaScript调用接口也是使用此特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exposeJsInterface</span><span class="params">(WebView webView, CordovaBridge bridge)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ((Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR1)) &#123;</span><br><span class="line">           LOG.i(TAG, <span class="string">"Disabled addJavascriptInterface() bridge since Android version is old."</span>);</span><br><span class="line">           <span class="comment">// Bug being that Java Strings do not get converted to JS strings automatically.</span></span><br><span class="line">           <span class="comment">// This isn't hard to work-around on the JS side, but it's easier to just</span></span><br><span class="line">           <span class="comment">// use the prompt bridge instead.</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       SystemExposedJsApi exposedJsApi = <span class="keyword">new</span> SystemExposedJsApi(bridge);</span><br><span class="line">       webView.addJavascriptInterface(exposedJsApi, <span class="string">"_cordovaNative"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>那么SystemExposedJsApi类new出来的对象就等同抛出“_cordovaNative”对象给JS端调用，进去看下SystemExposedJsApi类包含哪些内容，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemExposedJsApi</span> <span class="keyword">implements</span> <span class="title">ExposedJsApi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CordovaBridge bridge;</span><br><span class="line"></span><br><span class="line">    SystemExposedJsApi(CordovaBridge bridge) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bridge = bridge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exec</span><span class="params">(<span class="keyword">int</span> bridgeSecret, String service, String action, String callbackId, String arguments)</span> <span class="keyword">throws</span> JSONException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bridge.jsExec(bridgeSecret, service, action, callbackId, arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNativeToJsBridgeMode</span><span class="params">(<span class="keyword">int</span> bridgeSecret, <span class="keyword">int</span> value)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        bridge.jsSetNativeToJsBridgeMode(bridgeSecret, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">retrieveJsMessages</span><span class="params">(<span class="keyword">int</span> bridgeSecret, <span class="keyword">boolean</span> fromOnlineEvent)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bridge.jsRetrieveJsMessages(bridgeSecret, fromOnlineEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最关键是exec方法，其中bridgeSecret代表选择哪个桥接方式，service一般对应着你本地Java文件类名，action代表java文件中方法名，callbackId代表回调函数的Id，也就是句柄，arguments代表传递的参数。看出其中设计思想了没，service往往是本地能力集的类名，比如web端想调用相机，一般起个Camera类代表这个相机服务类，然后在这个类中定义方法，也就是action参数，这个action名称可扩展，因为方法名称可各种各样，适合自定义功能扩展。</p><p><strong>SystemExposedJsApi对象初始化</strong></p><p>在创建SystemExposedJsApi时需要CordovaBridge类，CordovaBridge类初始化需要CordovaWebView的PluginManager对象和NativeToJsMessageQueue对象。因为所有的JS端与Android native代码交互都是通过SystemExposedJsApi对象的exec方法。在exec方法中执行PluginManager的exec方法，PluginManager去查找具体的Plugin并实例化然后再执行Plugin的execute方法，并根据同步标识判断是同步返回给JS消息还是异步。由NativeToJsMessageQueue统一管理返回给JS的消息。</p><p><strong>何时加载Plugin，如何加载</strong></p><p>Cordova中很重要的部分是插件，Cordova在启动每个Activity的时候都会将配置文件中的所有plugin加载到PluginManager，在第一次loadUrl方法时，就会去初始化PluginManager并加载plugin，PluginManager在加载plugin的时候并不是马上实例化plugin对象，而是只是将plugin的Class名字保存到一个hashmap中，用service名字作为key值。当JS端通过JavascriptInterface接口的SystemExposedJsApi对象请求Android时，PluginManager会从hashmap中查找到plugin，如果该plugin还未实例化，利用java反射机制实例化该plugin，并执行plugin的execute方法。</p><p><strong>Cordova的数据返回</strong></p><p>Cordova中通过exec()函数请求android插件，数据的返回可同步也可以异步于exec()函数的请求。在开发android插件的时候可以重写public boolean isSynch(String action)方法来决定是同步还是异步。Cordova在android端使用了一个队列(NativeToJsMessageQueue)来专门管理返回给JS的数据。</p><p>1，同步 Cordova在执行完exec()后，android会马上返回数据，但不一定就是该次请求的数据，可能是前面某次请求的数据；因为当exec()请求的插件是允许同步返回数据的情况下，Cordova也是从NativeToJsMessageQueue队列头pop头数据并返回。然后再根据callbackID反向查找某个JS请求，并将数据返回给该请求的success函数。 2，异步 Cordova在执行完exec()后并不会同步得到一个返回数据。Cordova在执行exec()的同时启动了一个XMLHttpRequest对象方式或者prompt()函数方式的循环函数来不停的去获取NativeToJsMessageQueue队列中的数据，并根据callbackID反向查找到相对应的JS请求，并将该数据交给success函数。</p><p><strong>webView.sendJavascript 发送到js队列，onNativeToJsMessageAvailable 负责执行js.</strong></p><p>Native 调用 JS 执行方式有三种实现 LoadUrlBridgeMode、 OnlineEventsBridgeMode、PrivateApiBridgeMode</p><p>1、webView.sendJavascript 发送js方法到JS队列</p><p>2、onJsPrompt 方法拦截，获取调用方式</p><ul><li>如果是gap_bridge_mode，则执行 appView.exposedJsApi.setNativeToJsBridgeMode(Integer.parseInt(message));</li><li>如果是gap_poll, 则执行 appView.exposedJsApi.retrieveJsMessages(&quot;1&quot;.equals(message));</li></ul><p>3、调用setBridgeMode 方法调用onNativeToJsMessageAvailable 执行javascript调用</p><h3 id="小结">小结</h3><p>总的来说，使用Cordova框架开发优缺点很明显。</p><p>优点：</p><ul><li>跨平台，开发简单，学习成本低</li><li>框架多，插件多，可自定义插件</li><li>发展最早，社区资源丰富，</li></ul><p>缺点：</p><ul><li>WebView性能低下时，用户体验差，反应慢</li><li>毕竟是老外的框架，中文文档资源少</li><li>调试不方便，既不像原生那么好调试，也不像纯web那种调试</li></ul><p>最后想说一句，无论是选择原生模式开发还是Hybrid混合模式，一定是要基于具体业务场景去选择，而不是盲目和绝对化觉得哪种模式好就不做分析想当然的去选择，还是有选择的结合，要知道应用之美在于药到病除。</p>]]></content>
    
    <summary type="html">
    
      原生开发和Hybrid开发比较都有一段时间了，到底是如何去选择呢，我的理解是根据业务使用场景角度切入，结合着来，这样才能有的放矢。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android触摸事件的应用</title>
    <link href="http://cryallen.com/2017/05/02/2017-05-02-AndroidSlideConflict/"/>
    <id>http://cryallen.com/2017/05/02/2017-05-02-AndroidSlideConflict/</id>
    <published>2017-05-02T06:40:39.000Z</published>
    <updated>2017-07-21T18:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>上一篇讲了Android触摸事件的传递机制，具体可以看这里 <a href="http://cryallen.com/2017/04/25/AndroidTouchEvent/">初识Android触摸事件传递机制</a>。既然知道Android中触摸事件的传递分发，那么它能解决什么样的问题，在我们实际开发中如何应用，这点很重要，知道原理是为了解决问题而准备的。这篇文章的核心讲的如何解决View的滑动冲突，这个问题在日常开发中很常见，比如内部嵌套Fragment视图是左右滑动，外部用一个ScrollView来包含，可以上下滑动，如果不进行滑动冲突处理的话，就会造成外部滑动方向和内部滑动方向不一致。</p><h3 id="目录">目录</h3><ul><li>常见的滑动冲突场景</li><li>滑动冲突的处理规则</li><li>外部拦截法</li><li>内部拦截法</li><li>小结</li></ul><h3 id="常见的滑动冲突场景">常见的滑动冲突场景</h3><p>常见的滑动冲突场景可以简单分为以下三种：</p><ul><li>场景1：外部滑动方向和内部滑动方向不一致</li><li>场景2：外部滑动方向和内部滑动方向一致</li><li>场景3：上面两种情况的嵌套</li></ul><p>如图：</p><figure><img src="/2017/05/02/2017-05-02-AndroidSlideConflict/20170502slidescene.jpg" alt="滑动冲突场景"><figcaption>滑动冲突场景</figcaption></figure><p>场景1，主要是将ViewPager和Fragment配合使用所组成的页面滑动效果，主流应用几乎都会使用这个效果。在这个效果中可以通过左右滑动来切换页面，而每个页面内部往往又是一个ListView，所以就造成了滑动冲突，但是在ViewPager内部处理了这种滑动冲突，因此在采用ViewPager时我们就无须关注这个问题，而如果把ViewPager换成ScrollView，那就必须自己手动处理，不然造成的结果就是内外两层只能一层能够滑动。</p><p>场景2，就复杂一点，当内外两层都在同一个方向可以滑动的时候，显然存在逻辑问题。因为当手指开始滑动的时候，系统无法知道用户到底是想让哪一层滑动，所以当手指滑动的时候就会出现问题，要么只有一层滑动，要么就是内外两层都滑动但很卡顿。</p><p>场景3，是场景1和场景2两种情况的嵌套，显得更复杂了。比如外部有一个SlideMenu效果，内部有一个ViewPager，ViewPager的每一个页面中又是一个ListView。虽然场景3滑动冲突看起来很复杂，但都是几个单一的滑动冲突的叠加，因此需要一一拆解开来即可。</p><h3 id="滑动冲突的处理规则">滑动冲突的处理规则</h3><p>一般来说，不管滑动冲突有多么复杂，它都有既定的规则，根据这些规则我们就可以选择合适的方法去处理。</p><p>对于场景1，它的处理规则就是：当用户左右滑动时，需要让外部的View拦截点击事件，当用户上下滑动，需要让内部View拦截点击事件。具体来说就是根据滑动是水平滑动还是竖直滑动来判断到底是由谁来拦截事件。</p><p>如图：</p><figure><img src="/2017/05/02/2017-05-02-AndroidSlideConflict/20170502slideprocess.jpg" alt="滑动过程图"><figcaption>滑动过程图</figcaption></figure><p>简单来说，就是根据水平方向和竖直方向的距离差来判断，如果是Dx&gt;Dy，那么则是水平滑动，如果是Dy&gt;Dx，那么则是竖直滑动。</p><p>场景2，则是比较特殊，它无法根据滑动的角度，距离差以及速度差来做判断。这个时候就需要从业务上找到突破点，比如，当处于某种状态时需要外部View响应用户的滑动，而处于另外一种状态时需要内部View来响应View的滑动</p><p>对于场景3的话，它的滑动规则也更复杂，和场景2一样，同样是从业务上找到突破点。</p><h3 id="外部拦截法">外部拦截法</h3><p>外部拦截法是指点击事件都是先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件，就不拦截了，这样就可以解决滑动冲突的问题，外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">      <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">      <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">          intercepted = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">          <span class="keyword">if</span> (父容器需要点击当前事件) &#123;</span><br><span class="line">              intercepted = <span class="keyword">true</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              intercepted = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">          intercepted = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      mLastXIntercept = x;</span><br><span class="line">      mLastYIntercept = y;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> intercepted;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先ACTION_DOWN这个事件，父容器必须返回false，这样保证后续move和up的事件可以传递给子View，根据move事件来决定是否拦截，如果父容器拦截就返回true，否则返回false。</p><p>实现一个自定义类似ViewPager的控件，嵌套ListView的效果，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorizontalScrollViewEx</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HorizontalScrollViewEx"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mChildrenSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mChildWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mChildIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别记录上次滑动的坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastY = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastXIntercept = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastYIntercept = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Scroller mScroller;                <span class="comment">//弹性滑动对象</span></span><br><span class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;  <span class="comment">//追踪滑动速度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalScrollViewEx</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalScrollViewEx</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalScrollViewEx</span><span class="params">(Context context, AttributeSet attrs,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mScroller = <span class="keyword">new</span> Scroller(getContext());</span><br><span class="line">        mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">            intercepted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (!mScroller.isFinished()) &#123;</span><br><span class="line">                mScroller.abortAnimation();</span><br><span class="line">                intercepted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">            <span class="keyword">int</span> deltaX = x - mLastXIntercept;</span><br><span class="line">            <span class="keyword">int</span> deltaY = y - mLastYIntercept;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</span><br><span class="line">                intercepted = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                intercepted = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">            intercepted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"intercepted="</span> + intercepted);</span><br><span class="line">        mLastX = x;</span><br><span class="line">        mLastY = y;</span><br><span class="line">        mLastXIntercept = x;</span><br><span class="line">        mLastYIntercept = y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> intercepted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        mVelocityTracker.addMovement(event);</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mScroller.isFinished()) &#123;</span><br><span class="line">                mScroller.abortAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">            <span class="keyword">int</span> deltaX = x - mLastX;</span><br><span class="line">            scrollBy(-deltaX, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">            <span class="keyword">int</span> scrollX = getScrollX();</span><br><span class="line">            mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">float</span> xVelocity = mVelocityTracker.getXVelocity();</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(xVelocity) &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">                mChildIndex = xVelocity &gt; <span class="number">0</span> ? mChildIndex - <span class="number">1</span> : mChildIndex + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mChildIndex = (scrollX + mChildWidth / <span class="number">2</span>) / mChildWidth;</span><br><span class="line">            &#125;</span><br><span class="line">            mChildIndex = Math.max(<span class="number">0</span>, Math.min(mChildIndex, mChildrenSize - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">int</span> dx = mChildIndex * mChildWidth - scrollX;</span><br><span class="line">            smoothScrollBy(dx, <span class="number">0</span>);</span><br><span class="line">            mVelocityTracker.clear();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mLastX = x;</span><br><span class="line">        mLastY = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> measuredWidth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> measuredHeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</span><br><span class="line">            setMeasuredDimension(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(<span class="number">0</span>);</span><br><span class="line">            measuredHeight = childView.getMeasuredHeight();</span><br><span class="line">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(<span class="number">0</span>);</span><br><span class="line">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class="line">            setMeasuredDimension(measuredWidth, heightSpaceSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(<span class="number">0</span>);</span><br><span class="line">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class="line">            measuredHeight = childView.getMeasuredHeight();</span><br><span class="line">            setMeasuredDimension(measuredWidth, measuredHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> childLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">        mChildrenSize = childCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (childView.getVisibility() != View.GONE) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class="line">                mChildWidth = childWidth;</span><br><span class="line">                childView.layout(childLeft, <span class="number">0</span>, childLeft + childWidth,</span><br><span class="line">                        childView.getMeasuredHeight());</span><br><span class="line">                childLeft += childWidth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">smoothScrollBy</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        mScroller.startScroll(getScrollX(), <span class="number">0</span>, dx, <span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class="line">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class="line">            postInvalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mVelocityTracker.recycle();</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个情况的拦截条件就是父容器在滑动过程中水平距离差比垂直距离差大，那么就进行拦截，否则就不拦截，继续传递事件。</p><h3 id="内部拦截法">内部拦截法</h3><p>内部拦截法是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交给父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合requestDisallowInterceptTouchEvent方法才能正常工作，使用起来较外部拦截法复杂。伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">     <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">     <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">         mHorizontalScrollViewEx2.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">         <span class="keyword">int</span> deltaX = x - mLastX;</span><br><span class="line">         <span class="keyword">int</span> deltaY = y - mLastY;</span><br><span class="line">         <span class="keyword">if</span> (父容器需要此类点击事件) &#123;</span><br><span class="line">             mHorizontalScrollViewEx2.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     mLastX = x;</span><br><span class="line">     mLastY = y;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>当子元素调用requestDisallowInterceptTouchEvent(false)方法时，父元素才能继续拦截所需的事件。</p><p>前面是用自定义类似的ViewPager，现在重写一个ListView，我们可以自定义一个ListView，叫做ListViewEx，然后对内部拦截法的模板代码进行修改即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewEx</span> <span class="keyword">extends</span> <span class="title">ListView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ListViewEx"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HorizontalScrollViewEx2 mHorizontalScrollViewEx2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别记录上次滑动的坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewEx</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewEx</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewEx</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHorizontalScrollViewEx2</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HorizontalScrollViewEx2 horizontalScrollViewEx2)</span> </span>&#123;</span><br><span class="line">        mHorizontalScrollViewEx2 = horizontalScrollViewEx2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">            mHorizontalScrollViewEx2.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">            <span class="keyword">int</span> deltaX = x - mLastX;</span><br><span class="line">            <span class="keyword">int</span> deltaY = y - mLastY;</span><br><span class="line">            Log.d(TAG, <span class="string">"dx:"</span> + deltaX + <span class="string">" dy:"</span> + deltaY);</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</span><br><span class="line">                mHorizontalScrollViewEx2.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mLastX = x;</span><br><span class="line">        mLastY = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时对于包含ListViewEx外部布局进行修改，在onInterceptTouchEvent事件上不进行拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorizontalScrollViewEx2</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HorizontalScrollViewEx2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mChildrenSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mChildWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mChildIndex;</span><br><span class="line">    <span class="comment">// 分别记录上次滑动的坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastXIntercept = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastYIntercept = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Scroller mScroller;</span><br><span class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalScrollViewEx2</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalScrollViewEx2</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalScrollViewEx2</span><span class="params">(Context context, AttributeSet attrs,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mScroller = <span class="keyword">new</span> Scroller(getContext());</span><br><span class="line">        mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            mLastX = x;</span><br><span class="line">            mLastY = y;</span><br><span class="line">            <span class="keyword">if</span> (!mScroller.isFinished()) &#123;</span><br><span class="line">                mScroller.abortAnimation();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onTouchEvent action:"</span> + event.getAction());</span><br><span class="line">        mVelocityTracker.addMovement(event);</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mScroller.isFinished()) &#123;</span><br><span class="line">                mScroller.abortAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">            <span class="keyword">int</span> deltaX = x - mLastX;</span><br><span class="line">            <span class="keyword">int</span> deltaY = y - mLastY;</span><br><span class="line">            Log.d(TAG, <span class="string">"move, deltaX:"</span> + deltaX + <span class="string">" deltaY:"</span> + deltaY);</span><br><span class="line">            scrollBy(-deltaX, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">            <span class="keyword">int</span> scrollX = getScrollX();</span><br><span class="line">            <span class="keyword">int</span> scrollToChildIndex = scrollX / mChildWidth;</span><br><span class="line">            Log.d(TAG, <span class="string">"current index:"</span> + scrollToChildIndex);</span><br><span class="line">            mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">float</span> xVelocity = mVelocityTracker.getXVelocity();</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(xVelocity) &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">                mChildIndex = xVelocity &gt; <span class="number">0</span> ? mChildIndex - <span class="number">1</span> : mChildIndex + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mChildIndex = (scrollX + mChildWidth / <span class="number">2</span>) / mChildWidth;</span><br><span class="line">            &#125;</span><br><span class="line">            mChildIndex = Math.max(<span class="number">0</span>, Math.min(mChildIndex, mChildrenSize - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">int</span> dx = mChildIndex * mChildWidth - scrollX;</span><br><span class="line">            smoothScrollBy(dx, <span class="number">0</span>);</span><br><span class="line">            mVelocityTracker.clear();</span><br><span class="line">            Log.d(TAG, <span class="string">"index:"</span> + scrollToChildIndex + <span class="string">" dx:"</span> + dx);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mLastX = x;</span><br><span class="line">        mLastY = y;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> measuredWidth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> measuredHeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</span><br><span class="line">            setMeasuredDimension(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(<span class="number">0</span>);</span><br><span class="line">            measuredHeight = childView.getMeasuredHeight();</span><br><span class="line">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(<span class="number">0</span>);</span><br><span class="line">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class="line">            setMeasuredDimension(measuredWidth, heightSpaceSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(<span class="number">0</span>);</span><br><span class="line">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class="line">            measuredHeight = childView.getMeasuredHeight();</span><br><span class="line">            setMeasuredDimension(measuredWidth, measuredHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"width:"</span> + getWidth());</span><br><span class="line">        <span class="keyword">int</span> childLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">        mChildrenSize = childCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (childView.getVisibility() != View.GONE) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class="line">                mChildWidth = childWidth;</span><br><span class="line">                childView.layout(childLeft, <span class="number">0</span>, childLeft + childWidth,</span><br><span class="line">                        childView.getMeasuredHeight());</span><br><span class="line">                childLeft += childWidth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">smoothScrollBy</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        mScroller.startScroll(getScrollX(), <span class="number">0</span>, dx, <span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class="line">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class="line">            postInvalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mVelocityTracker.recycle();</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个拦截规则也是父容器在滑动过程中水平距离差与垂直距离差相比。</p><h3 id="小结">小结</h3><p>总的来说，滑动冲突的场景可以分为三种，内外部方向不一致、内外部方向一致、嵌套前面两种情况。如何解决，不管多么复杂的滑动冲突，可以进行拆分，根据的一定的规则，第一种情况可根据滑动距离差、速度差和角度差来解决，第二种和第三种情况，可根据业务上找到突破点，业务上一种状态需要响应，切换到另外一种状态时则不响应，根据业务需求得出相应的处理规则，有了处理规则可以进行下一步处理。</p>]]></content>
    
    <summary type="html">
    
      这篇文章的核心讲的如何解决View的滑动冲突，这个问题在日常开发中很常见，比如内部嵌套Fragment视图是左右滑动，外部用一个ScrollView来包含，可以上下滑动，如果不进行滑动冲突处理的话，就会造成外部滑动方向和内部滑动方向不一致。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>初识Android触摸事件传递机制</title>
    <link href="http://cryallen.com/2017/04/25/2017-04-25-AndroidTouchEvent/"/>
    <id>http://cryallen.com/2017/04/25/2017-04-25-AndroidTouchEvent/</id>
    <published>2017-04-25T07:49:22.000Z</published>
    <updated>2017-07-21T18:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>今天总结的一个知识点是Andorid中View事件传递机制，也是核心知识点，相信很多开发者在面对这个问题时候会觉得困惑，另外，View的另外一个难题滑动冲突，比如在ScrollView中嵌套ListView，都是上下滑动，这该如何解决呢，它解决的依据就是View事件的传递机制，所以开发者需要对View的事件传递机制有较深入的理解。</p><h3 id="目录">目录</h3><ul><li>Activity、View、ViewGroup三者关系</li><li>触摸事件类型</li><li>事件传递三个阶段</li><li>View事件传递机制</li><li>ViewGroup事件传递机制</li><li>小结</li></ul><h3 id="activityviewviewgroup三者关系">Activity、View、ViewGroup三者关系</h3><p>我们都知道Android中看到的页面很多是Activity组件，然后在Activity中嵌套控件，比如TextView、RelativeLayout布局等，其实这些控件的基类都是View这个抽象类，而ViewGroup也是View的子类，区别在于ViewGroup是可以当做其他子类的容器，一张关系图如下：</p><figure><img src="/2017/04/25/2017-04-25-AndroidTouchEvent/20170425ViewHierarchy.png" alt="View Hierarchy"><figcaption>View Hierarchy</figcaption></figure><p>简单一句话，这些View控件的载体是Activity，Activity通过从DecorView开始进行绘制。</p><h3 id="触摸事件类型">触摸事件类型</h3><ul><li><code>ACTION_DOWN</code>：用户手指按下操作，往往也代表着一次触摸事件的开始。</li><li><code>ACTION_MOVE</code>：用户手指在屏幕上移动，一般情况下的轻微移动都会触发一系列的移动事件。</li><li><code>ACTION_POINTER_DOWN</code>：额外的手指按下操作。</li><li><code>ACTION_POINTER_UP</code>：额外的手指的离开操作</li><li><code>ACTION_UP</code>：用户手指离开屏幕的操作，一次抬起操作标志着一次触摸事件的结束。</li></ul><p>在一次屏幕触摸操作中，<code>ACTION_DOWN</code>和<code>ACTION_UP</code>是必需的，<code>ACTION_MOVE</code>则是看情况而定，如果只是点击，那么检测到只有按下和抬起操作。</p><h3 id="事件传递三个阶段">事件传递三个阶段</h3><ul><li><p>分发（Dispatch）：事件的分发对应着dispatchTouchEvent方法，在Andorid系统中，所有的触摸事件都是通过这个方法来分发的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span> <span class="params">(MotionEvent ev)</span></span></span><br></pre></td></tr></table></figure><p>这个方法中，可以决定直接消费这个事件或者将事件继续分发给子视图处理。</p></li><li><p>拦截（Intercept）：事件拦截对应着onInterceptTouchEvent方法，这个方法只有在ViewGroup及其子类中才存在，在View和Activity中是不存在的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span> <span class="params">(MotionEvent ev)</span></span></span><br></pre></td></tr></table></figure><p>这个方法用来判断是否拦截某个事件，如果拦截了某个事件，那么在同一序列事件当中，那么这个方法不会被再次调用。</p></li><li><p>消费（Consume）：事件消费对应着onTouchEvent方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span> <span class="params">(MotionEvent event)</span></span></span><br></pre></td></tr></table></figure><p>用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一事件序列中，当前View无法再接收到事件</p></li></ul><p>在Android系统中，拥有事件传递处理能力的有三种：</p><ul><li>Activity：拥有dispatchTouchEvent、onTouchEvent两个方法。</li><li>ViewGroup：拥有dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent三个方法。</li><li>View：拥有dispatchTouchEvent、onTouchEvent两个方法。</li></ul><h3 id="view事件传递机制">View事件传递机制</h3><p>这里说的View指的是除了ViewGroup之外的View控件，比如TextView、Button、CheckBox等，View控件本身就是最小的单位，不能作为其他View的容器，View拥有dispatchTouchEvent、onTouchEvent两个方法，所以这里就定义了一个继承TextView的类MyTextView，通过代码查看日志，看流程如何走。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyTextView"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_CANCEL"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_CANCEL"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时定义一个MainActivity类用来展示MyTextView，在这个Activity中，我们为MyTextView设置了点击onClick和onTouch监听，方便跟踪了解事件传递的流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyTextView mTextView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mTextView = (MyTextView) findViewById(R.id.my_text_view);</span><br><span class="line">        mTextView.setOnClickListener(<span class="keyword">this</span>); <span class="comment">// 设置MyTextView的点击处理</span></span><br><span class="line">        mTextView.setOnTouchListener(<span class="keyword">this</span>); <span class="comment">// 设置MyTextView的触摸处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_CANCEL"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_CANCEL"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.my_text_view:</span><br><span class="line">                Log.e(TAG, <span class="string">"MyTextView onClick"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.my_text_view:</span><br><span class="line">                <span class="keyword">switch</span> (motionEvent.getAction()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                        Log.e(TAG, <span class="string">"MyTextView onTouch ACTION_DOWN"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                        Log.e(TAG, <span class="string">"MyTextView onTouch ACTION_MOVE"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                        Log.e(TAG, <span class="string">"MyTextView onTouch ACTION_UP"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果：</p><figure><img src="/2017/04/25/2017-04-25-AndroidTouchEvent/20170425ViewResult.jpg" alt="View日志结果"><figcaption>View日志结果</figcaption></figure><p>从中可以看到，事件是从down-move-up这样顺序执行，onTouch方法优先于onClick方法调用，如果都是以super方法传递的话，最后的结果是在MyTextView的onTouchEvent方法内被消费的，如果不消费的话，则会把事件返回到它的父级去消费，如果父级也没消费，那么最终会返回到Activity中处理。</p><h3 id="viewgroup事件传递机制">ViewGroup事件传递机制</h3><p>ViewGroup作为View控件的容器存在，ViewGroup拥有dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent三个方法。同样，我们自定义一个ViewGroup，继承自RelativeLayout，实现一个MyRelativeLayout。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRelativeLayout</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyRelativeLayout"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRelativeLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRelativeLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_CANCEL"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.e(TAG, <span class="string">"onInterceptTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.e(TAG, <span class="string">"onInterceptTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.e(TAG, <span class="string">"onInterceptTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                Log.e(TAG, <span class="string">"onTouchEvent ACTION_CANCEL"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果：</p><figure><img src="/2017/04/25/2017-04-25-AndroidTouchEvent/20170425ViewGroupResult.jpg" alt="ViewGroup日志结果"><figcaption>ViewGroup日志结果</figcaption></figure><p>从中可以看到触摸事件的传递顺序也是从Activity到ViewGroup，再由ViewGroup递归传递给它的子View。ViewGroup通过onInterceptTouchEvent方法对事件进行拦截，如果该方法返回true，则事件不会继续传递给子View，如果返回false或者super.onInterceptTouchEvent，则事件会继续传递给子View。在子View中对事件进行消费后，ViewGroup将不接收到任何事件。</p><h3 id="小结">小结</h3><p>在Android系统事件中，View和ViewGroup的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span></span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(onInterceptTouchEvent(ev))&#123;</span><br><span class="line">    consume = onTouchEvent(ev);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    consume = child.dispatchTouchEvent(ev);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> consume;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用三张图来表示Android中触摸机制的流程。</p><p>1，View内触摸事件不消费</p><figure><img src="/2017/04/25/2017-04-25-AndroidTouchEvent/20170425ViewIgnorant.jpg" alt="事件不消费"><figcaption>事件不消费</figcaption></figure><p>2，View内触摸事件消费</p><figure><img src="/2017/04/25/2017-04-25-AndroidTouchEvent/20170425ViewInterested.jpg" alt="事件被消费"><figcaption>事件被消费</figcaption></figure><p>3，ViewGroup拦截触摸事件</p><figure><img src="/2017/04/25/2017-04-25-AndroidTouchEvent/20170425ViewGroupIntercept.jpg" alt="事件被拦截"><figcaption>事件被拦截</figcaption></figure><p>一些总结：</p><ul><li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束。一般是以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</li><li>正常情况下，一个事件序列只能被一个View拦截且消耗。</li><li>某个View一旦决定拦截，那么这个事件序列就只能由它来处理，那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交给它的父元素去处理，即父元素的onTouchEvent会被调用。</li><li>如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件就会消失，此时父元素的onTouchEvent并不会被调用，最终会交给Activity处理。</li><li>ViewGroup默认不拦截任何事件。</li><li>View中没有onInterceptTouchEvent方法。</li><li>View的onTouchEvent默认都会被消耗，除非它是不可点击的。</li><li>事件传递过程是由外向内的，即事件先是传递给父元素，然后再由父元素分发给子View。</li></ul><p>参考地址：</p><p>1，https://www.youtube.com/watch?v=EZAoJU-nUyI</p>]]></content>
    
    <summary type="html">
    
      今天总结的一个知识点是Andorid中View事件传递机制，也是核心知识点，相信很多开发者在面对这个问题时候会觉得困惑，另外，View的另外一个难题滑动冲突，比如在ScrollView中嵌套ListView，都是上下滑动，这该如何解决呢，它解决的依据就是View事件的传递机制，所以开发者需要对View的事件传递机制有较深入的理解。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="知识点" scheme="http://cryallen.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView中装饰者模式应用</title>
    <link href="http://cryallen.com/2017/03/30/2017-03-30-AndroidRecyclerViewDecorator/"/>
    <id>http://cryallen.com/2017/03/30/2017-03-30-AndroidRecyclerViewDecorator/</id>
    <published>2017-03-30T09:09:52.000Z</published>
    <updated>2020-04-20T03:10:32.987Z</updated>
    
    <content type="html"><![CDATA[<p>近段时间一直在加班，在赶一个项目，现在项目接近尾声，那么需要对过去一段时间工作内容进行复盘，总结下比较好的解决方案，积累一些经验，我认为的学习方式，是「理论—实践—总结—分享」，这一种很好的沉淀方式。</p><p>在之前项目中，有个需求是这样的，要显示书的阅读足迹列表，具体要求是显示最近30天阅读情况，布局是用列表项布局，然后如果有更早的书，则显示更早的阅读情况，布局是用网格布局，如图所示：</p><figure><img src="/2017/03/30/2017-03-30-AndroidRecyclerViewDecorator/book.png" alt="显示效果"><figcaption>显示效果</figcaption></figure><p>要是放在之前的做法，一般都是ListView，再对特殊item样式进行单独处理，后来Android在5.0的时候出了一个RecyclerView组件，简单介绍下RecyclerView，一句话：只管回收与复用View，其他的你可以自己去设置，有着高度的解耦，充分的扩展性。至于用法，大家可以去官网查看文档即可，网上也很多文章介绍如何使用，这里不多说。想讲的重点是关于装饰者模式如何在RecyclerView中应用，如下：</p><ul><li>装饰者模式介绍</li><li>RecyclerView中应用</li><li>小结</li></ul><h3 id="装饰者模式介绍">装饰者模式介绍</h3><p>定义：Decorator模式（别名Wrapper），动态将职责附加到对象上，若要扩展功能，装饰者提供了比继承更具弹性的代替方案。</p><p>也就是说动态地给一个对象添加一些额外的职责，比如你可以增加功能，相比继承来说，有些父类的功能我是不需要的，我可能只用到某部分功能，那么我就可以自由组合，这样就显得灵活点，而不是那么冗余。</p><p>有几个要点：</p><ul><li>多用组合，少用继承。利用继承在设计子类的行为，在编译时静态决定的，而且所有子类都会继承相同的行为，然而，如果用到组合，则可以在运行时动态地进行扩展，对一些对象做一些改变。</li><li>类应该对扩展开发，对修改关闭。</li><li>装饰者和被装饰对象有相同的超类型。</li><li>可以用一个或多个装饰者包装一个对象</li><li>装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。</li><li>对象可以在任何时候被装饰，所以可以在运行时动态的，不限量的用你喜欢的装饰者来装饰对象。</li><li>装饰模式中使用继承的关键是想达到装饰者和被装饰对象的类型匹配，而不是获得其行为。</li><li>装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。在实际项目中可以根据需要为装饰者添加新的行为，做到“半透明”装饰者。</li><li>适配器模式的用意是改变对象的接口而不一定改变对象的性能，而装饰模式的用意是保持接口并增加对象的职责。</li></ul><p>UML图：</p><figure><img src="/2017/03/30/2017-03-30-AndroidRecyclerViewDecorator/decorator.jpg" alt="装饰者模式UML"><figcaption>装饰者模式UML</figcaption></figure><h3 id="recyclerview中应用">RecyclerView中应用</h3><p>我们既然知道了装饰者和被装饰对象有相同的超类型，在做书的阅读足迹这个页面的时候，整个页面外部是一个RecyclerView，比如这样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.widget.SwipeRefreshLayout</span><br><span class="line">       android:id=<span class="string">"@+id/swipe_layout"</span></span><br><span class="line">       android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">       android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">       app:layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</span><br><span class="line"></span><br><span class="line">       &lt;com.dracom.android.sfreader.widget.recyclerview.FeedRootRecyclerView</span><br><span class="line">           android:id=<span class="string">"@+id/recycler_view"</span></span><br><span class="line">           android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">           android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">           android:drawSelectorOnTop=<span class="string">"true"</span>/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure><p>同时每个Item项里面又嵌套一个RecyclerView，但外部只有2个Item项，一个Item项代表最近30天要显示的书的内容，一个Item项是显示更早书的内容。其中因为涉及到RecyclerView嵌套的问题，所以需要做滑动冲突的相关处理。所以这里用到自定义扩展的RecyclerView，具体解决滑动冲突代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(e);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            mScrollPointerId = MotionEventCompat.getPointerId(e, <span class="number">0</span>);</span><br><span class="line">            mInitialTouchX = (<span class="keyword">int</span>) (e.getX() + <span class="number">0.5f</span>);</span><br><span class="line">            mInitialTouchY = (<span class="keyword">int</span>) (e.getY() + <span class="number">0.5f</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_DOWN:</span><br><span class="line">            mScrollPointerId = MotionEventCompat.getPointerId(e, actionIndex);</span><br><span class="line">            mInitialTouchX = (<span class="keyword">int</span>) (MotionEventCompat.getX(e, actionIndex) + <span class="number">0.5f</span>);</span><br><span class="line">            mInitialTouchY = (<span class="keyword">int</span>) (MotionEventCompat.getY(e, actionIndex) + <span class="number">0.5f</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = MotionEventCompat.findPointerIndex(e, mScrollPointerId);</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> x = (<span class="keyword">int</span>) (MotionEventCompat.getX(e, index) + <span class="number">0.5f</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> y = (<span class="keyword">int</span>) (MotionEventCompat.getY(e, index) + <span class="number">0.5f</span>);</span><br><span class="line">            <span class="keyword">if</span> (getScrollState() != SCROLL_STATE_DRAGGING) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> dx = x - mInitialTouchX;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> dy = y - mInitialTouchY;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> canScrollHorizontally = getLayoutManager().canScrollHorizontally();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> canScrollVertically = getLayoutManager().canScrollVertically();</span><br><span class="line">                <span class="keyword">boolean</span> startScroll = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (canScrollHorizontally &amp;&amp; Math.abs(dx) &gt; mTouchSlop &amp;&amp; (Math.abs(dx) &gt;= Math.abs(dy) || canScrollVertically)) &#123;</span><br><span class="line">                    startScroll = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (canScrollVertically &amp;&amp; Math.abs(dy) &gt; mTouchSlop &amp;&amp; (Math.abs(dy) &gt;= Math.abs(dx) || canScrollHorizontally)) &#123;</span><br><span class="line">                    startScroll = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> startScroll &amp;&amp; <span class="keyword">super</span>.onInterceptTouchEvent(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照思路就是内部拦截法，也就是RecyclerView自己处理，默认是不拦截，如果滑动距离超过所规定距离，我们就拦截自己处理，设置是可滚动的状态。</p><p>解决完滑动冲突之后，具体看看item项中的布局：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">              android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">              android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">              android:orientation=<span class="string">"vertical"</span></span><br><span class="line">              android:paddingBottom=<span class="string">"4dp"</span></span><br><span class="line">              android:paddingLeft=<span class="string">"10dp"</span></span><br><span class="line">              android:paddingRight=<span class="string">"10dp"</span></span><br><span class="line">              android:paddingTop=<span class="string">"4dp"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=<span class="string">"@+id/head_layout"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        android:orientation=<span class="string">"vertical"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RelativeLayout</span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"24dp"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">                android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">                android:layout_centerVertical=<span class="string">"true"</span></span><br><span class="line">                android:textColor=<span class="string">"@color/black_alpha"</span></span><br><span class="line">                android:textSize=<span class="string">"16sp"</span></span><br><span class="line">                android:text=<span class="string">"@string/zq_account_read_footprint_recent_month"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"0.5dp"</span></span><br><span class="line">            android:layout_marginTop=<span class="string">"8dp"</span></span><br><span class="line">            android:background=<span class="string">"@android:drawable/divider_horizontal_bright"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.dracom.android.sfreader.widget.recyclerview.BetterRecyclerView</span><br><span class="line">        android:id=<span class="string">"@+id/recycler_view"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_marginBottom=<span class="string">"12dp"</span></span><br><span class="line">        android:layout_marginTop=<span class="string">"8dp"</span></span><br><span class="line">        android:orientation=<span class="string">"vertical"</span></span><br><span class="line">        android:scrollbars=<span class="string">"none"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>可以看到，每个Item项目一个头部，一个RecyclerView。然后是Adapter的适配，这里就是常用的RecyclerView Adapter的方式，要继承RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;方法，同时要实现onCreateViewHolder、onBindViewHolder、getItemCount、getItemViewType方法，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadFootPrintAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> RECENT_MONTH = <span class="number">1002</span>;   <span class="comment">//最近三十天的Item</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MORE_EARLY = <span class="number">1003</span>;     <span class="comment">//更早的Item</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Context mContext;</span><br><span class="line"><span class="keyword">private</span> List&lt;ReadBookColumnInfo&gt; mColumns;</span><br><span class="line"><span class="keyword">private</span> RecentReadAdapter mRecentReadAdapter;</span><br><span class="line"><span class="keyword">private</span> MoreEarlyAdapter mMoreEarlyAdapter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReadFootPrintAdapter</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mContext = context;</span><br><span class="line">mColumns = <span class="keyword">new</span> ArrayList&lt;ReadBookColumnInfo&gt;();</span><br><span class="line">mRecentReadAdapter = <span class="keyword">new</span> RecentReadAdapter(context);</span><br><span class="line">mMoreEarlyAdapter = <span class="keyword">new</span> MoreEarlyAdapter(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadEnable</span><span class="params">(<span class="keyword">boolean</span> loadEnable)</span> </span>&#123;</span><br><span class="line">mIsLoadEnable = loadEnable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumns</span><span class="params">(List&lt;ReadBookColumnInfo&gt; columns)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mColumns = columns;</span><br><span class="line">notifyDataSetChanged();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecentReadListener</span><span class="params">(OnOpenBookListener onOpenBookListener)</span></span>&#123;</span><br><span class="line">mRecentReadAdapter.setOnListener(onOpenBookListener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoreEarlyListener</span><span class="params">(OnOpenBookListener onOpenBookListener)</span></span>&#123;</span><br><span class="line">mMoreEarlyAdapter.setOnListener(onOpenBookListener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(viewType == RECENT_MONTH)&#123;</span><br><span class="line">View view = LayoutInflater.from(mContext).inflate(R.layout.recycler_read_footprint_recent_month,parent,<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ColumnViewHolder1(view);</span><br><span class="line">&#125; <span class="keyword">if</span>(viewType == MORE_EARLY)&#123;</span><br><span class="line">View view = LayoutInflater.from(mContext).inflate(R.layout.recycler_read_footprint_more_early,parent,<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ColumnViewHolder2(view);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(holder <span class="keyword">instanceof</span> ColumnViewHolder)&#123;</span><br><span class="line">ColumnViewHolder columnViewHolder = (ColumnViewHolder) holder;</span><br><span class="line">ReadBookColumnInfo readBookColumnInfo = mColumns.get(position);</span><br><span class="line"><span class="keyword">if</span>(readBookColumnInfo.getReadBookInfos().size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">columnViewHolder.headLayout.setVisibility(View.VISIBLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">columnViewHolder.headLayout.setVisibility(View.GONE);</span><br><span class="line">&#125;</span><br><span class="line">columnViewHolder.loadData(readBookColumnInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mColumns.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (position == <span class="number">0</span> )</span><br><span class="line"><span class="keyword">return</span> RECENT_MONTH;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> MORE_EARLY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">View headLayout;</span><br><span class="line">RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColumnViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(itemView);</span><br><span class="line">headLayout = itemView.findViewById(R.id.head_layout);</span><br><span class="line">recyclerView = (RecyclerView) itemView.findViewById(R.id.recycler_view);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(ReadBookColumnInfo readBookColumnInfo)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnViewHolder1</span> <span class="keyword">extends</span> <span class="title">ColumnViewHolder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColumnViewHolder1</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(itemView);</span><br><span class="line">LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(mContext);</span><br><span class="line">linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);</span><br><span class="line">recyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line">recyclerView.setAdapter(mRecentReadAdapter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadData</span><span class="params">(ReadBookColumnInfo readBookColumnInfo)</span> </span>&#123;</span><br><span class="line">mRecentReadAdapter.setData(readBookColumnInfo.getReadBookInfos());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnViewHolder2</span> <span class="keyword">extends</span> <span class="title">ColumnViewHolder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColumnViewHolder2</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(itemView);</span><br><span class="line">GridLayoutManager gridLayoutManager = <span class="keyword">new</span> GridLayoutManager(mContext,<span class="number">3</span>);</span><br><span class="line">gridLayoutManager.setOrientation(GridLayoutManager.VERTICAL);</span><br><span class="line">recyclerView.setLayoutManager(gridLayoutManager);</span><br><span class="line">recyclerView.setAdapter(mMoreEarlyAdapter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadData</span><span class="params">(ReadBookColumnInfo readBookColumnInfo)</span> </span>&#123;</span><br><span class="line">mMoreEarlyAdapter.setData(readBookColumnInfo.getReadBookInfos());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来到这里，基本功能是完成了，可后来产品说要加个上下刷新，加载更多的操作。需求是随时可变的， 我们能不变的就是修改的心，那应该怎么做合适呢，是再增加itemType类型，加个加载更多的item项，那样修改的点会更多，此时想到了装饰者模式，是不是可以有个装饰类对这个adapter类进行组合呢，这样不需要修改原来的代码，只要扩展出去，况且我们知道都需要继承RecyclerView.Adapter，那么就可以把ReadFootPrintAdapter当做一个内部成员设置进入。我们来看下装饰者类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadFootPrintAdapterWrapper</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOADMORE = <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORMAL = <span class="number">1002</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> RecyclerView.Adapter internalAdapter;</span><br><span class="line"><span class="keyword">private</span> View mFooterView;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReadFootPrintAdapterWrapper</span><span class="params">(RecyclerView.Adapter adapter)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.internalAdapter = adapter;</span><br><span class="line"><span class="keyword">this</span>.mFooterView = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFooterView</span><span class="params">(View footView)</span> </span>&#123;</span><br><span class="line">mFooterView = footView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDataChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">internalAdapter.notifyDataSetChanged();</span><br><span class="line">notifyDataSetChanged();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(viewType == LOADMORE)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadMoreViewHolder(mFooterView);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> internalAdapter.createViewHolder(parent,viewType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(holder <span class="keyword">instanceof</span> LoadMoreViewHolder)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">internalAdapter.onBindViewHolder(holder,position);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = internalAdapter.getItemCount();</span><br><span class="line"><span class="keyword">if</span> (mFooterView != <span class="keyword">null</span> &amp;&amp; count != <span class="number">0</span>) count++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mFooterView != <span class="keyword">null</span> &amp;&amp; getItemCount() - <span class="number">1</span> == position)</span><br><span class="line"><span class="keyword">return</span> LOADMORE;</span><br><span class="line"><span class="keyword">return</span> NORMAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadMoreViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoadMoreViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(itemView);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个Wrapper类就是装饰类，里面包含了一个RecyclerView.Adapter类型的成员，一个底部View，到时候在外部调用的时候，只需要传递一个RecyclerView.Adapter类型的参数进去即可，这样就形成了组合的关系。具体使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mFooterView = LayoutInflater.from(mContext).inflate(R.layout.refresh_loadmore_layout, mRecyclerView, <span class="keyword">false</span>);</span><br><span class="line">mReadFootPrintAdapterWrapper = <span class="keyword">new</span> ReadFootPrintAdapterWrapper(mReadFootPrintAdapter);</span><br><span class="line">mReadFootPrintAdapterWrapper.addFooterView(mFooterView);</span><br><span class="line">mRecyclerView.setAdapter(mReadFootPrintAdapterWrapper);</span><br></pre></td></tr></table></figure><p>这样即达到需求要求，又能对原来已有的代码不进行修改，只进行扩展，何乐而不为。</p><h3 id="小结">小结</h3><p>这虽然是工作中一个应用点，但我想在开发过程中还有很多应用点，用上设计模式。日常开发中基本都强调设计模式的重要性，或许你对23种设计模式都很熟悉，都了解到它们各自的定义，可是等真正应用了，却发现没有踪迹可寻，写代码也是按照以前老的思路去做，那样就变成了知道是知道，却不会用的尴尬局面。如何突破呢，我觉得事后复盘和重构很有必要，就是利用项目尾声阶段，空的时候去review下自己写过的代码，反思是否有更简洁的写法，还有可以参考优秀代码，它们是怎么写，这样给自己找找灵感，再去结合自己已有的知识存储，说不定就能走上理论和实践相结合道路上。</p>]]></content>
    
    <summary type="html">
    
      这个装饰者模式是在前段时间工作项目中总结出来，想说的代码review真的是很重要。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="工作总结" scheme="http://cryallen.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Android中的Drawable和动画</title>
    <link href="http://cryallen.com/2017/03/28/2017-03-28-AndroidArtChapter12/"/>
    <id>http://cryallen.com/2017/03/28/2017-03-28-AndroidArtChapter12/</id>
    <published>2017-03-28T02:58:44.000Z</published>
    <updated>2017-07-21T18:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android中Drawable是一种可以在Canvas上进行绘制抽象的概念，种类很多，常见的颜色和图片都可以是一个Drawable。Drawable有很多种，它们表示一种图像的概念，但是它们又不全是图片，通过颜色也可以构造出各式各样的图像的效果。</p><h3 id="drawable的分类">Drawable的分类</h3><ul><li>BitmapDrawable。它表示的就是一张图片，在实际开发中我们可以直接引用原始的图片即可。</li><li>ShapeDrawable。可以理解为通过颜色来构造图形，可以有纯色的图形，也可以具有渐变效果的图形。</li><li>LayerDrawable。对应的标签是<Layer-list>，它表示一种层次化的Drawable集合，通过将不同的Drawable放置在不同的层上面从而达到一种叠加后的效果。</Layer-list></li><li>StateListDrawable。对应于<Selector>，它表示Drawable集合，每个Drawable都对应着View的一种状态，这样系统就会根据View的状态来选择合适的Drawable。</Selector></li><li>LeveListDrawable。对应于<level-list>标签，表示一个Drawable集合，集合中的每个Drawable都有一个等级Level的概念。</level-list></li><li>InsetDrawable。对应于<insert>标签，它可以将其他的Drawable内嵌到自己当中，并可以在四周留出一定的间距。</insert></li><li>ScaleDrawable。对应于<scale>，它可以根据自己的等级(level)将指定的Drawable缩放到一定比例。</scale></li><li>ClipDrawable。对应于<clip>，它可以根据自己当前的等级(level)来裁剪另一个Drawable，裁剪方向可以通过android:clipOrientation和android:gravity这两个属性来共同控制。</clip></li></ul><h3 id="android动画">Android动画</h3><p>Android的动画可以分为三种：View动画、帧动画和属性动画。View动画通过对场景里的对象不断做图像变换（平移、缩放、旋转、透明度）从而产生动画效果，它是一种渐近式动画，并且View动画支持自定义。帧动画通过顺序播放一系列图像从而产生动画效果，可以简单理解为图片切换动画。属性动画通过动态地改变对象的属性从而达到动画效果，属性动画为API 11的新特性，在低版本无法直接使用属性动画，但我们仍然可以通过兼容库来使用它。</p><h4 id="view动画">View动画</h4><p>View动画的作用对象是View，它支持平移动画、缩放动画、旋转动画和透明度动画。有四个子类：TranslateAnimation，ScaleAnimation，RotateAnimation和AlphaAnimation。可以通过XML来定义。比如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;set xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:duration=<span class="string">"300"</span></span><br><span class="line">    android:interpolator=<span class="string">"@android:anim/accelerate_interpolator"</span></span><br><span class="line">    android:shareInterpolator=<span class="string">"true"</span> &gt;</span><br><span class="line"></span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:fromAlpha=<span class="string">"0.0"</span></span><br><span class="line">        android:toAlpha=<span class="string">"1.0"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;translate</span><br><span class="line">        android:fromYDelta=<span class="string">"500"</span></span><br><span class="line">        android:toXDelta=<span class="string">"0"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure><h4 id="帧动画">帧动画</h4><p>帧动画是顺序播放一组预先定义好的图片，类似于电影播放。不同于View动画，系统提供了另外一个类AnimationDrawable来使用帧动画。虽然比较简单，但是容易引起OOM，所以在使用帧动画时应尽量避免使用过多尺寸较大的图片。</p><h4 id="属性动画">属性动画</h4><p>属性动画中有ValueAnimator、ObjectAnimator和AnimatorSet等概念，通过它们可以实现绚丽的动画。属性动画可以对任意对象的属性进行动画而不仅仅是View，动画默认时间间隔300ms，默认帧率10ms/帧。在一个时间间隔内完成对象从一个属性值到另一个属性值的改变，因此属性动画几乎是无所不能，只要对象有这个属性，它都能实现动画效果。</p><p>有个开源动画库：nineoldandroids来兼容之前的版本，因为属性动画是从API 11开始才有的。比较常用的动画类ValueAnimator、ObjectAnimator和AnimatorSet，其中ObjectAnimator继承ValueAnimator，AnimatorSet是动画集合，可以定义一组动画，它们使用起来也是极其简单的。如何使用呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performAnimate</span><span class="params">(<span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">       ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">       valueAnimator.addUpdateListener(<span class="keyword">new</span> AnimatorUpdateListener() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 持有一个IntEvaluator对象，方便下面估值的时候使用</span></span><br><span class="line">           <span class="keyword">private</span> IntEvaluator mEvaluator = <span class="keyword">new</span> IntEvaluator();</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animator)</span> </span>&#123;</span><br><span class="line">               <span class="comment">// 获得当前动画的进度值，整型，1-100之间</span></span><br><span class="line">               <span class="keyword">int</span> currentValue = (Integer) animator.getAnimatedValue();</span><br><span class="line">               Log.d(TAG, <span class="string">"current value: "</span> + currentValue);</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 获得当前进度占整个动画过程的比例，浮点型，0-1之间</span></span><br><span class="line">               <span class="keyword">float</span> fraction = animator.getAnimatedFraction();</span><br><span class="line">               <span class="comment">// 直接调用整型估值器通过比例计算出宽度，然后再设给Button</span></span><br><span class="line">               target.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);</span><br><span class="line">               target.requestLayout();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       valueAnimator.setDuration(<span class="number">5000</span>).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="使用动画注意点">使用动画注意点</h4><ul><li>OOM问题。这个主要是出现在帧动画中，当图片数量较多且图片较大时就极易出现OOM。</li><li>内存泄漏。在属性动画中有一类无限循环的动画，这类动画需要在Activity退出时及时停止，否则将导致Activity无法释放从而造成内存泄漏，View动画则并不存在此问题。</li><li>兼容性问题。动画在3.0以下的系统上有兼容性问题，在某些特殊场景可能无法正常工作，因此要做好适配问题。</li><li>View动画的问题。View动画是对View的影像做动画，并不是真正改变View的状态，因此有时候会出现动画完成后View无法隐藏的现象，即setVisibility(View.GONE)失效了，这个时候只要调用View.clearAnimation()清除View动画即可解决此问题。</li><li>不要使用PX。在进行动画的过程中，要尽量使用dp，使用px会导致在不同设备上有不同的效果。</li><li>动画元素的交互。将View移动（平移）后，在Android 3.0以前的系统上，不管是View动画还是属性动画，新位置均无法触发单击事件，同时，老位置仍然可以触发单击事件。尽管View已经在视觉上不存在了，将View移回原位置以后，原位置的单击事件继续生效。从3.0开始，属性动画的单击事件触发位置为移动后的位置，但是View动画仍然在原位置。</li><li>硬件加速。使用动画过程中，建议开启硬件加速，这样会提高动画的流畅性。</li></ul>]]></content>
    
    <summary type="html">
    
      Android中Drawable和动画都是一种表现效果的资源，可以让用户体验更佳。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://cryallen.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android的线程和线程池</title>
    <link href="http://cryallen.com/2017/03/02/2017-03-02-AndroidArtChapter11/"/>
    <id>http://cryallen.com/2017/03/02/2017-03-02-AndroidArtChapter11/</id>
    <published>2017-03-02T03:25:44.000Z</published>
    <updated>2017-07-21T18:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>线程在Android中是一个很重要的概念，从用途上来说，线程分为主线程和子线程，主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。在Android中扮演线程角色的还有很多，比如AsyncTask和IntentService，同时HandlerThread也是一种特殊的线程，但他们本质都是传统的线程。AsyncTask底层用到了线程池，对于IntentService和HandlerThread来说，它们的底层则直接使用了线程。</p><p>不同形式的线程虽然都是线程，但是它们具有不同的特性和使用场景。AsyncTask封装了线程池和Handler，它主要是为了方便开发者在子线程中更新UI，HandlerThread是一中消息循环的线程，在它的内部可以使用Handler。IntentService是一个服务，系统对其进行了封装使其可以更方便地执行后台任务，IntentService内部采用HandlerThread来执行任务，当任务执行完毕后IntentService会自动退出。</p><p>在操作系统中，线程是操作系统的调度的最小单元，同时线程又是一种受限的系统资源，即线程不可能无限制地产生，并且线程的创建和销毁都会相应的开销。如果一个进程中频繁地创建和销毁线程，这显然不是高效的做法，正确的做法是采用线程池，在这个线程池中会缓存一定数量的线程，通过线程池就可以避免因为频繁创建和销毁线程所带来的系统开销。</p><h3 id="android中的线程形态">Android中的线程形态</h3><p><strong>AsyncTask</strong></p><p>AsyncTask是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后把执行的进度和最终结果传递给主线程并在主线程中更新UI。从实现上来说，AsyncTask封装了Thread和Handler，通过AsyncTask可以更加方便地执行后台任务以及在主线程中访问UI，但是AsyncTask并不适合进行特别耗时的后台任务，对于特别耗时的任务来说，用线程池比较好点。</p><p>AsyncTask提供了4个核心方法：</p><ul><li>onPreExecute()，在主线程中执行，在异步任务执行之前，次方法会被调用，做一些准备工作。</li><li>doInBackground(Params…params)，在线程池中执行，次方法用于执行异步任务，params参数表示异步任务的输入参数。</li><li>onProgressUpdate(Progress…values)，在主线程中执行，当后台任务的执行进度发生改变时此方法会被调用。</li><li>onPostExecute(Result result)，在主线程中执行，在异步任务执行之后，此方法会被调用。</li></ul><p>看下源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG_TAG = <span class="string">"AsyncTask"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class="line">    <span class="comment">// We want at least 2 threads and at most 4 threads in the core pool,</span></span><br><span class="line">    <span class="comment">// preferring to have 1 less than the CPU count to avoid saturating</span></span><br><span class="line">    <span class="comment">// the CPU with background work</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">                sPoolWorkQueue, sThreadFactory);</span><br><span class="line">        threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An &#123;<span class="doctag">@link</span> Executor&#125; that executes tasks one at a time in serial</span></span><br><span class="line"><span class="comment">     * order.  This serialization is global to a particular process.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_POST_RESULT = <span class="number">0x1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_POST_PROGRESS = <span class="number">0x2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WorkerRunnable&lt;Params, Result&gt; mWorker;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FutureTask&lt;Result&gt; mFuture;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Status mStatus = Status.PENDING;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean mCancelled = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean mTaskInvoked = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">        Runnable mActive;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">            mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        r.run();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        scheduleNext();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates the current status of the task. Each status will be set only once</span></span><br><span class="line"><span class="comment">     * during the lifetime of a task.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Indicates that the task has not been executed yet.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PENDING,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Indicates that the task is running.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RUNNING,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Indicates that &#123;<span class="doctag">@link</span> AsyncTask#onPostExecute&#125; has finished.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        FINISHED,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (AsyncTask<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sHandler = <span class="keyword">new</span> InternalHandler();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sHandler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultExecutor</span><span class="params">(Executor exec)</span> </span>&#123;</span><br><span class="line">        sDefaultExecutor = exec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new asynchronous task. This constructor must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">                Result result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                    <span class="comment">//noinspection unchecked</span></span><br><span class="line">                    result = doInBackground(mParams);</span><br><span class="line">                    Binder.flushPendingCommands();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                    mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">throw</span> tr;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    postResult(result);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    postResultIfNotInvoked(get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    android.util.Log.w(LOG_TAG, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</span><br><span class="line">                            e.getCause());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                    postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class="line">        <span class="keyword">if</span> (!wasTaskInvoked) &#123;</span><br><span class="line">            postResult(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">        message.sendToTarget();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the current status of this task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The current status.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Override this method to perform a computation on a background thread. The</span></span><br><span class="line"><span class="comment">     * specified parameters are the parameters passed to &#123;<span class="doctag">@link</span> #execute&#125;</span></span><br><span class="line"><span class="comment">     * by the caller of this task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method can call &#123;<span class="doctag">@link</span> #publishProgress&#125; to publish updates</span></span><br><span class="line"><span class="comment">     * on the UI thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params The parameters of the task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A result, defined by the subclass of this task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onPreExecute()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onPostExecute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #publishProgress</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Result <span class="title">doInBackground</span><span class="params">(Params... params)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Runs on the UI thread before &#123;<span class="doctag">@link</span> #doInBackground&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onPostExecute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #doInBackground</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Runs on the UI thread after &#123;<span class="doctag">@link</span> #doInBackground&#125;. The</span></span><br><span class="line"><span class="comment">     * specified result is the value returned by &#123;<span class="doctag">@link</span> #doInBackground&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method won't be invoked if the task was cancelled.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result The result of the operation computed by &#123;<span class="doctag">@link</span> #doInBackground&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onPreExecute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #doInBackground</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onCancelled(Object) </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Runs on the UI thread after &#123;<span class="doctag">@link</span> #publishProgress&#125; is invoked.</span></span><br><span class="line"><span class="comment">     * The specified values are the values passed to &#123;<span class="doctag">@link</span> #publishProgress&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values The values indicating progress.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #publishProgress</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #doInBackground</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Runs on the UI thread after &#123;<span class="doctag">@link</span> #cancel(boolean)&#125; is invoked and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #doInBackground(Object[])&#125; has finished.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default implementation simply invokes &#123;<span class="doctag">@link</span> #onCancelled()&#125; and</span></span><br><span class="line"><span class="comment">     * ignores the result. If you write your own implementation, do not call</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;super.onCancelled(result)&lt;/code&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result The result, if any, computed in</span></span><br><span class="line"><span class="comment">     *               &#123;<span class="doctag">@link</span> #doInBackground(Object[])&#125;, can be null</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #cancel(boolean)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #isCancelled()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedParameters"</span>&#125;)</span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        onCancelled();</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Applications should preferably override &#123;<span class="doctag">@link</span> #onCancelled(Object)&#125;.</span></span><br><span class="line"><span class="comment">     * This method is invoked by the default implementation of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onCancelled(Object)&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Runs on the UI thread after &#123;<span class="doctag">@link</span> #cancel(boolean)&#125; is invoked and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #doInBackground(Object[])&#125; has finished.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onCancelled(Object) </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #cancel(boolean)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #isCancelled()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this task was cancelled before it completed</span></span><br><span class="line"><span class="comment">     * normally. If you are calling &#123;<span class="doctag">@link</span> #cancel(boolean)&#125; on the task,</span></span><br><span class="line"><span class="comment">     * the value returned by this method should be checked periodically from</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #doInBackground(Object[])&#125; to end the task as soon as possible.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if task was cancelled before it completed</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #cancel(boolean)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCancelled.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Attempts to cancel execution of this task.  This attempt will</span></span><br><span class="line"><span class="comment">     * fail if the task has already completed, already been cancelled,</span></span><br><span class="line"><span class="comment">     * or could not be cancelled for some other reason. If successful,</span></span><br><span class="line"><span class="comment">     * and this task has not started when &lt;tt&gt;cancel&lt;/tt&gt; is called,</span></span><br><span class="line"><span class="comment">     * this task should never run. If the task has already started,</span></span><br><span class="line"><span class="comment">     * then the &lt;tt&gt;mayInterruptIfRunning&lt;/tt&gt; parameter determines</span></span><br><span class="line"><span class="comment">     * whether the thread executing this task should be interrupted in</span></span><br><span class="line"><span class="comment">     * an attempt to stop the task.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Calling this method will result in &#123;<span class="doctag">@link</span> #onCancelled(Object)&#125; being</span></span><br><span class="line"><span class="comment">     * invoked on the UI thread after &#123;<span class="doctag">@link</span> #doInBackground(Object[])&#125;</span></span><br><span class="line"><span class="comment">     * returns. Calling this method guarantees that &#123;<span class="doctag">@link</span> #onPostExecute(Object)&#125;</span></span><br><span class="line"><span class="comment">     * is never invoked. After invoking this method, you should check the</span></span><br><span class="line"><span class="comment">     * value returned by &#123;<span class="doctag">@link</span> #isCancelled()&#125; periodically from</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #doInBackground(Object[])&#125; to finish the task as early as</span></span><br><span class="line"><span class="comment">     * possible.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mayInterruptIfRunning &lt;tt&gt;true&lt;/tt&gt; if the thread executing this</span></span><br><span class="line"><span class="comment">     *        task should be interrupted; otherwise, in-progress tasks are allowed</span></span><br><span class="line"><span class="comment">     *        to complete.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;false&lt;/tt&gt; if the task could not be cancelled,</span></span><br><span class="line"><span class="comment">     *         typically because it has already completed normally;</span></span><br><span class="line"><span class="comment">     *         &lt;tt&gt;true&lt;/tt&gt; otherwise</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #isCancelled()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onCancelled(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">        mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> mFuture.cancel(mayInterruptIfRunning);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Waits if necessary for the computation to complete, and then</span></span><br><span class="line"><span class="comment">     * retrieves its result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The computed result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CancellationException If the computation was cancelled.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException If the computation threw an exception.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException If the current thread was interrupted</span></span><br><span class="line"><span class="comment">     *         while waiting.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Result <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFuture.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Waits if necessary for at most the given time for the computation</span></span><br><span class="line"><span class="comment">     * to complete, and then retrieves its result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout Time to wait before cancelling the operation.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit The time unit for the timeout.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The computed result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CancellationException If the computation was cancelled.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException If the computation threw an exception.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException If the current thread was interrupted</span></span><br><span class="line"><span class="comment">     *         while waiting.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TimeoutException If the wait timed out.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Result <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">            ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFuture.get(timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Executes the task with the specified parameters. The task returns</span></span><br><span class="line"><span class="comment">     * itself (this) so that the caller can keep a reference to it.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Note: this function schedules the task on a queue for a single background</span></span><br><span class="line"><span class="comment">     * thread or pool of threads depending on the platform version.  When first</span></span><br><span class="line"><span class="comment">     * introduced, AsyncTasks were executed serially on a single background thread.</span></span><br><span class="line"><span class="comment">     * Starting with &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#DONUT&#125;, this was changed</span></span><br><span class="line"><span class="comment">     * to a pool of threads allowing multiple tasks to operate in parallel. Starting</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#HONEYCOMB&#125;, tasks are back to being</span></span><br><span class="line"><span class="comment">     * executed on a single thread to avoid common application errors caused</span></span><br><span class="line"><span class="comment">     * by parallel execution.  If you truly want parallel execution, you can use</span></span><br><span class="line"><span class="comment">     * the &#123;<span class="doctag">@link</span> #executeOnExecutor&#125; version of this method</span></span><br><span class="line"><span class="comment">     * with &#123;<span class="doctag">@link</span> #THREAD_POOL_EXECUTOR&#125;; however, see commentary there for warnings</span></span><br><span class="line"><span class="comment">     * on its use.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params The parameters of the task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> This instance of AsyncTask.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException If &#123;<span class="doctag">@link</span> #getStatus()&#125; returns either</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@link</span> AsyncTask.Status#RUNNING&#125; or &#123;<span class="doctag">@link</span> AsyncTask.Status#FINISHED&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #executeOnExecutor(java.util.concurrent.Executor, Object[])</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #execute(Runnable)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Executes the task with the specified parameters. The task returns</span></span><br><span class="line"><span class="comment">     * itself (this) so that the caller can keep a reference to it.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method is typically used with &#123;<span class="doctag">@link</span> #THREAD_POOL_EXECUTOR&#125; to</span></span><br><span class="line"><span class="comment">     * allow multiple tasks to run in parallel on a pool of threads managed by</span></span><br><span class="line"><span class="comment">     * AsyncTask, however you can also use your own &#123;<span class="doctag">@link</span> Executor&#125; for custom</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;em&gt;Warning:&lt;/em&gt; Allowing multiple tasks to run in parallel from</span></span><br><span class="line"><span class="comment">     * a thread pool is generally &lt;em&gt;not&lt;/em&gt; what one wants, because the order</span></span><br><span class="line"><span class="comment">     * of their operation is not defined.  For example, if these tasks are used</span></span><br><span class="line"><span class="comment">     * to modify any state in common (such as writing a file due to a button click),</span></span><br><span class="line"><span class="comment">     * there are no guarantees on the order of the modifications.</span></span><br><span class="line"><span class="comment">     * Without careful work it is possible in rare cases for the newer version</span></span><br><span class="line"><span class="comment">     * of the data to be over-written by an older one, leading to obscure data</span></span><br><span class="line"><span class="comment">     * loss and stability issues.  Such changes are best</span></span><br><span class="line"><span class="comment">     * executed in serial; to guarantee such work is serialized regardless of</span></span><br><span class="line"><span class="comment">     * platform version you can use this function with &#123;<span class="doctag">@link</span> #SERIAL_EXECUTOR&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exec The executor to use.  &#123;<span class="doctag">@link</span> #THREAD_POOL_EXECUTOR&#125; is available as a</span></span><br><span class="line"><span class="comment">     *              convenient process-wide thread pool for tasks that are loosely coupled.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params The parameters of the task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> This instance of AsyncTask.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException If &#123;<span class="doctag">@link</span> #getStatus()&#125; returns either</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@link</span> AsyncTask.Status#RUNNING&#125; or &#123;<span class="doctag">@link</span> AsyncTask.Status#FINISHED&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #execute(Object[])</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></span><br><span class="line"><span class="function"><span class="params">            Params... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">                <span class="keyword">case</span> RUNNING:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task is already running."</span>);</span><br><span class="line">                <span class="keyword">case</span> FINISHED:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task has already been executed "</span></span><br><span class="line">                            + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">        onPreExecute();</span><br><span class="line"></span><br><span class="line">        mWorker.mParams = params;</span><br><span class="line">        exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenience version of &#123;<span class="doctag">@link</span> #execute(Object...)&#125; for use with</span></span><br><span class="line"><span class="comment">     * a simple Runnable object. See &#123;<span class="doctag">@link</span> #execute(Object[])&#125; for more</span></span><br><span class="line"><span class="comment">     * information on the order of execution.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #execute(Object[])</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #executeOnExecutor(java.util.concurrent.Executor, Object[])</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        sDefaultExecutor.execute(runnable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method can be invoked from &#123;<span class="doctag">@link</span> #doInBackground&#125; to</span></span><br><span class="line"><span class="comment">     * publish updates on the UI thread while the background computation is</span></span><br><span class="line"><span class="comment">     * still running. Each call to this method will trigger the execution of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; on the UI thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; will not be called if the task has been</span></span><br><span class="line"><span class="comment">     * canceled.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values The progress values to update the UI with.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #onProgressUpdate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #doInBackground</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">            onCancelled(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onPostExecute(result);</span><br><span class="line">        &#125;</span><br><span class="line">        mStatus = Status.FINISHED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Looper.getMainLooper());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                    <span class="comment">// There is only one result</span></span><br><span class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                    result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">        Params[] mParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskResult</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AsyncTask mTask;</span><br><span class="line">        <span class="keyword">final</span> Data[] mData;</span><br><span class="line"></span><br><span class="line">        AsyncTaskResult(AsyncTask task, Data... data) &#123;</span><br><span class="line">            mTask = task;</span><br><span class="line">            mData = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中我们知道了，线程池中线程的数量跟CPU内核多少有关，在一个处理队列中最多只有128个，这个并发数超过就会报异常，同时源码里也看到，是通过sHandler发送一个MESSAGE_POST_RESULT的消息进行最终处理的。</p><p>sHandler是一个静态的Handler对象，为了能够将执行环境切换到主线程，这就要求sHandler这个对象必须在主线程中创建。由于静态成员会在加载类的时候进行初始化，因此这就变相要求AsyncTask的类必须在主线程中加载，否则同一个进程中的AsyncTask都无法正常工作。</p><p>还有一点要注意下，从Android 3.0开始，默认情况下AsyncTask是串行执行的。但在Android 3.0之前是并行执行的。</p><p><strong>HandlerThread</strong></p><p>HandlerThread继承了Thread，它是一种可以使用Handler的Thread，它的实现很简单，就在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread中创建Handler。看下源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mPriority;</span><br><span class="line">    <span class="keyword">int</span> mTid = -<span class="number">1</span>;</span><br><span class="line">    Looper mLooper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a HandlerThread.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> priority The priority to run the thread at. The value supplied must be from </span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.os.Process&#125; and not from java.lang.Thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call back method that can be explicitly overridden if needed to execute some</span></span><br><span class="line"><span class="comment">     * setup before Looper loops.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method returns the Looper associated with this thread. If this thread not been started</span></span><br><span class="line"><span class="comment">     * or for any reason is isAlive() returns false, this method will return null. If this thread </span></span><br><span class="line"><span class="comment">     * has been started, this method will block until the looper has been initialized.  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The looper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the thread has been started, wait until the looper has been created.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quits the handler thread's looper.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Causes the handler thread's looper to terminate without processing any</span></span><br><span class="line"><span class="comment">     * more messages in the message queue.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</span></span><br><span class="line"><span class="comment">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p class="note"&gt;</span></span><br><span class="line"><span class="comment">     * Using this method may be unsafe because some messages may not be delivered</span></span><br><span class="line"><span class="comment">     * before the looper terminates.  Consider using &#123;<span class="doctag">@link</span> #quitSafely&#125; instead to ensure</span></span><br><span class="line"><span class="comment">     * that all pending work is completed in an orderly manner.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</span></span><br><span class="line"><span class="comment">     * thread had not yet started running.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #quitSafely</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quit();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quits the handler thread's looper safely.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Causes the handler thread's looper to terminate as soon as all remaining messages</span></span><br><span class="line"><span class="comment">     * in the message queue that are already due to be delivered have been handled.</span></span><br><span class="line"><span class="comment">     * Pending delayed messages with due times in the future will not be delivered.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</span></span><br><span class="line"><span class="comment">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * If the thread has not been started or has finished (that is if</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #getLooper&#125; returns null), then false is returned.</span></span><br><span class="line"><span class="comment">     * Otherwise the looper is asked to quit and true is returned.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</span></span><br><span class="line"><span class="comment">     * thread had not yet started running.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quitSafely();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the identifier of this thread. See Process.myTid().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThreadId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IntentService</strong></p><p>IntentService是一种特殊的Service，它继承了Service并且它是一种抽象类，因此必须创建它的子类才能使用IntentService。IntentService可用于执行后台耗时的任务，当任务执行后它会自动停止，同时由于IntentService是服务的原因，这导致他的优先级比单纯的线程要高很多，所以IntentService比较适合执行一些高优先级的后台任务，因为它的优先级高不容易被系统杀死。看下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntentService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Looper mServiceLooper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ServiceHandler mServiceHandler;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRedelivery;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            onHandleIntent((Intent)msg.obj);</span><br><span class="line">            stopSelf(msg.arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an IntentService.  Invoked by your subclass's constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name Used to name the worker thread, important only for debugging.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntentService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        mName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets intent redelivery preferences.  Usually called from the constructor</span></span><br><span class="line"><span class="comment">     * with your preferred semantics.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If enabled is true,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onStartCommand(Intent, int, int)&#125; will return</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Service#START_REDELIVER_INTENT&#125;, so if this process dies before</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onHandleIntent(Intent)&#125; returns, the process will be restarted</span></span><br><span class="line"><span class="comment">     * and the intent redelivered.  If multiple Intents have been sent, only</span></span><br><span class="line"><span class="comment">     * the most recent one is guaranteed to be redelivered.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If enabled is false (the default),</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #onStartCommand(Intent, int, int)&#125; will return</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Service#START_NOT_STICKY&#125;, and if the process dies, the Intent</span></span><br><span class="line"><span class="comment">     * dies along with it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntentRedelivery</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        mRedelivery = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> It would be nice to have an option to hold a partial wakelock</span></span><br><span class="line">        <span class="comment">// during processing, and to have a static startService(Context, Intent)</span></span><br><span class="line">        <span class="comment">// method that would launch the service &amp; hand off a wakelock.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        mServiceLooper = thread.getLooper();</span><br><span class="line">        mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">        msg.arg1 = startId;</span><br><span class="line">        msg.obj = intent;</span><br><span class="line">        mServiceHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * You should not override this method for your IntentService. Instead,</span></span><br><span class="line"><span class="comment">     * override &#123;<span class="doctag">@link</span> #onHandleIntent&#125;, which the system calls when the IntentService</span></span><br><span class="line"><span class="comment">     * receives a start request.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> android.app.Service#onStartCommand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        onStart(intent, startId);</span><br><span class="line">        <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mServiceLooper.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unless you provide binding for your service, you don't need to implement this</span></span><br><span class="line"><span class="comment">     * method, because the default implementation returns null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> android.app.Service#onBind</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked on the worker thread with a request to process.</span></span><br><span class="line"><span class="comment">     * Only one Intent is processed at a time, but the processing happens on a</span></span><br><span class="line"><span class="comment">     * worker thread that runs independently from other application logic.</span></span><br><span class="line"><span class="comment">     * So, if this code takes a long time, it will hold up other requests to</span></span><br><span class="line"><span class="comment">     * the same IntentService, but it will not hold up anything else.</span></span><br><span class="line"><span class="comment">     * When all requests have been handled, the IntentService stops itself,</span></span><br><span class="line"><span class="comment">     * so you should not call &#123;<span class="doctag">@link</span> #stopSelf&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intent The value passed to &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *               android.content.Context#startService(Intent)&#125;.</span></span><br><span class="line"><span class="comment">     *               This may be null if the service is being restarted after</span></span><br><span class="line"><span class="comment">     *               its process has gone away; see</span></span><br><span class="line"><span class="comment">     *               &#123;<span class="doctag">@link</span> android.app.Service#onStartCommand&#125;</span></span><br><span class="line"><span class="comment">     *               for details.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="android中的线程池">Android中的线程池</h3><p>线程池的优点：</p><ul><li>重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销。</li><li>能有效控制线程池中的最大并发数，避免大量的线程之间因为互相抢占系统资源而导致的阻塞现象。</li><li>能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。</li></ul><p>Android中的线程池的概念来源于Java中的Executor，Executor是一个接口，真正的线程池的实现为ThreadPoolExecutor。ThreadPoolExecutor提供一系列参数来配置线程池，通过不同的参数可以创建不同的线程池，从线程池的功能特性来说，线程池主要分为4类。</p><p>ThreadPoolExecutor执行任务时大致遵循以下规则：</p><ol type="1"><li>如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务。</li><li>如果线程中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</li><li>如果在步骤2中无法将任务插入到任务队列中，这往往是由于任务队列已经满了， 这个时候如果线程数量未达到线程池规定的最大值，那么会立刻启动一个非核心线程来执行任务。</li><li>如果步骤3的中线程数量已经达到线程池规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。</li></ol><p>线程池主要有4类：</p><ul><li>FixThreadPool：这是一种线程数量固定的线程池，当线程处于空闲的时候，并不会被回收，除非线程池被关闭了。</li><li>CachedThreadPool：这是一种线程数量不定的线程池，它只有非核心线程，并且最大线程数为Integer.MAX_VALUE。</li><li>ScheduledThreadPool：它的核心线程数量是固定的，而非核心线程数是没有限制的，并且当非核心线程闲置时会被立即回收。</li><li>SingleThreadExecutor：这类线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。</li></ul>]]></content>
    
    <summary type="html">
    
      线程在Android中是一个很重要的概念，从用途上来说，线程分为主线程和子线程，主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://cryallen.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Bitmap的加载和Cache</title>
    <link href="http://cryallen.com/2017/02/27/2017-02-27-AndroidArtChapter10/"/>
    <id>http://cryallen.com/2017/02/27/2017-02-27-AndroidArtChapter10/</id>
    <published>2017-02-27T02:57:47.000Z</published>
    <updated>2017-07-21T18:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于Bitmap的特殊性以及Android对单个应用所施加的内存限制，比如16M，这导致加载Bitmap的时候很容易出现内存溢出。比如以下场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutofMemoryError:bitmap size exceeds VM budget</span><br></pre></td></tr></table></figure><p>Android中常用的缓存策略也是很有意思，缓存策略一个通用的思想，可以用到很多场景中，比如在实际开发中经常需要用到Bitmap做缓存。通过缓存策略，我们不需要每次都从网络上请求图片或者从存储设备中加载图片，这样就极大地提高了图片的加载效率以及产品的用户体验。目前比较常用的缓存策略是LruCache和DiskLruCache，其中LruCache常被用做内存缓存，而DiskLruCache用做存储缓存。Lru是Least Recently Used的缩写，即最近最少使用算法，这种算法的核心思想：当缓存快满时，会淘汰近期最少使用的缓存目标，很显然Lru算法的思想是很容易被接受的。</p><h3 id="bitmap的高效加载">Bitmap的高效加载</h3><p>Bitmap在Android中指的是一张图片，可以是png格式也可以是jpg等其他常见的图片格式。BitmapFactory类提供了四类方法：decodeFile、decodeResource、decodeStream和decodeByteArray，分别用于支持从文件系统、资源、输入流以及字节数组中加载出一个Bitmap对象，其中decodeFile和decodeResource又间接调用了decodeStream方法，这四类方法最终是在Android的底层实现的，对应着BitmapFactory类的几个native方法。</p><p>如何高效地加载Bitmap呢，其实核心思想也简单，那就是采用BitmapFactory.Options来加载所需尺寸的图片。主要是用到它的inSampleSize参数，即采样率。当inSampleSize为1时，采样后的图片大小为图片的原始大小，当inSampleSize大于1时，比如为2，那么采样后的图片其宽/宽均为原图大小的1/2，而像素数为原图的1/4，其占有的内存大小也为原图的1/4。从最新官方文档中指出，inSampleSize的取值应该是2的指数，比如1、2、4、8、16等等。</p><p>通过采样率即可有效地加载图片，那么到底如何获取采样率呢，获取采样率也很简单，循序如下流程：</p><ul><li>将BitmapFactory.Options的inJustDecodeBounds参数设为True并加载图片</li><li>从BitmapFactory.Options中取出图片的原始宽高信息，他们对应于outWidth和outHeight参数</li><li>根据采样率的规则并结合目标View的所需大小计算出采样率inSampleSize</li><li>将BitmapFactory.Options的inJustDecodeBounds参数设为False，然后重新加载图片。</li></ul><p>经过上面4个步骤，加载出的图片就是最终缩放后的图片，当然也有可能不需要缩放。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">int</span> resId, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// First decode with inJustDecodeBounds=true to check dimensions</span></span><br><span class="line">     <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">     options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">     BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Calculate inSampleSize</span></span><br><span class="line">     options.inSampleSize = calculateInSampleSize(options, reqWidth,</span><br><span class="line">             reqHeight);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Decode bitmap with inSampleSize set</span></span><br><span class="line">     options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (reqWidth == <span class="number">0</span> || reqHeight == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Raw height and width of image</span></span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</span><br><span class="line">     Log.d(TAG, <span class="string">"origin, w= "</span> + width + <span class="string">" h="</span> + height);</span><br><span class="line">     <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Calculate the largest inSampleSize value that is a power of 2 and</span></span><br><span class="line">         <span class="comment">// keeps both</span></span><br><span class="line">         <span class="comment">// height and width larger than the requested height and width.</span></span><br><span class="line">         <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight</span><br><span class="line">                 &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;</span><br><span class="line">             inSampleSize *= <span class="number">2</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Log.d(TAG, <span class="string">"sampleSize:"</span> + inSampleSize);</span><br><span class="line">     <span class="keyword">return</span> inSampleSize;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="android中的缓存策略">Android中的缓存策略</h3><p>缓存策略在Android中有着广泛的使用场景，尤其在图片加载这个场景下，缓存策略变得更为重要。有一个场景就是批量下载网络图片，在PC上是可以把所有的图片下载到本地再显示即可，但是放到移动设备上就不一样了。不管是Android还是IOS设备，流量对于用户来说都是一种宝贵的资源。</p><p>如何避免过多的流量消耗呢，那就是缓存。当程序第一次从网络加载图片后，就将其缓存到存储设备上，这样下次使用这张图片就不用从网络上获取了，这样就为用户节省了流量。很多时候为了提高用户的用户体验，往往还会把图片在内存中再缓存一份，这样当应用打算从网络上请求一张图片时，程序首先从内存中去获取，如果内存中没有那就从存储设备中去获取，如果存储设备中也没有，那就从网络上下载这张图片。因为从内存中加载图片比从存储设备中加载图片要快，所以这样既提高了程序的效率又为用户节约了不必要的流量开销。</p><p>目前常用的一种缓存算法是LRU（Least Recently Used）,LRU是近期最少使用算法，它的核心思想是当缓存满时，会优先淘汰那些近期最少使用的缓存对象。采用LRU算法的缓存有两种：LruCache和DiskLruCache，LruCache用于实现内存缓存，而DiskLruCache则充当了存储设备缓存，通过这二者的完美结合，就可以很方便地实现一个具有很高实用价值的ImageLoader。</p><p><strong>LruCache</strong></p><p>LruCache是Android 3.1提供的一个缓存类，通过support-v4兼容包可以兼容到早期的Android版本。它是一个泛型类，它内部采用一个LinkedHashMap，当强引用的方式存储外界的缓存对象，其提供了get和put方法来完成缓存的获取和添加操作，当缓存满时，LruCache会移除较早使用的缓存对象，然后再添加新的缓存对象。</p><ul><li>强引用：直接的对象引用</li><li>软引用：当一个对象只有软引用存在时，系统内存不足时此对象会被gc回收。</li><li>弱引用：当一个对象只有弱引用存在时，此对象会随时被gc回收。</li></ul><p>LruCache是线程安全的，因为用到了LinkedHashMap。从Android 3.1开始，LruCache就已经是Android源码的一部分。</p><p><strong>DiskLruCache</strong></p><p>DiskLruCache用于实现存储设备缓存，即磁盘存储，它通过将缓存对象写入文件系统从而实现缓存的效果。DiskLruCache得到了Android官方文档的推荐，但它不属于Android SDK的一部分。</p><p><strong>ImageLoader的实现</strong></p><p>一般来说，一个优秀的ImageLoader应该具备如下功能：</p><ul><li>图片的同步加载</li><li>图片的异步加载</li><li>图片压缩</li><li>内存缓存</li><li>磁盘缓存</li><li>网络拉取</li></ul><p>图片的同步加载是指能够以同步的方式向调用者提供所加载的图片，这个图片可能是从内存缓存读取的，也可能是从磁盘缓存中读取的，还可能是从网络拉取的。</p><p>图片的异步加载是一个很有用的功能，很多时候调用者不想再单独的线程中以同步的方式来获取图片，这个时候ImageLoader内部需要自己在线程中加载图片并将图片设置所需的ImageView。图片压缩的作用更需要了，这是降低OOM概率的有效手段，ImageLoader必须合适地处理图片的压缩问题。</p><p>内存缓存和磁盘缓存是ImageLoader的核心，也是ImageLoader的意义所在，通过这两级缓存极大地提高了程序的效率并且有效地降低了对用户所造成的流量消耗，只有当这两级缓存都不可用时才需要从网络中拉取图片。</p><p>一个实现ImageLoader的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ImageLoader"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_POST_RESULT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime()</span><br><span class="line">            .availableProcessors();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> KEEP_ALIVE = <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAG_KEY_URI = R.id.imageloader_uri;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DISK_CACHE_SIZE = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IO_BUFFER_SIZE = <span class="number">8</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DISK_CACHE_INDEX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsDiskLruCacheCreated = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"ImageLoader#"</span> + mCount.getAndIncrement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            CORE_POOL_SIZE, MAXIMUM_POOL_SIZE,</span><br><span class="line">            KEEP_ALIVE, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(), sThreadFactory);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Handler mMainHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper()) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            LoaderResult result = (LoaderResult) msg.obj;</span><br><span class="line">            ImageView imageView = result.imageView;</span><br><span class="line">            imageView.setImageBitmap(result.bitmap);</span><br><span class="line">            String uri = (String) imageView.getTag(TAG_KEY_URI);</span><br><span class="line">            <span class="keyword">if</span> (uri.equals(result.uri)) &#123;</span><br><span class="line">                imageView.setImageBitmap(result.bitmap);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"set image bitmap,but url has changed, ignored!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> ImageResizer mImageResizer = <span class="keyword">new</span> ImageResizer();</span><br><span class="line">    <span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</span><br><span class="line">    <span class="keyword">private</span> DiskLruCache mDiskLruCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ImageLoader</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">        <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">8</span>;</span><br><span class="line">        mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> bitmap.getRowBytes() * bitmap.getHeight() / <span class="number">1024</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        File diskCacheDir = getDiskCacheDir(mContext, <span class="string">"bitmap"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!diskCacheDir.exists()) &#123;</span><br><span class="line">            diskCacheDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getUsableSpace(diskCacheDir) &gt; DISK_CACHE_SIZE) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mDiskLruCache = DiskLruCache.open(diskCacheDir, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                        DISK_CACHE_SIZE);</span><br><span class="line">                mIsDiskLruCacheCreated = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * build a new instance of ImageLoader</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a new instance of ImageLoader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageLoader <span class="title">build</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ImageLoader(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBitmapToMemoryCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getBitmapFromMemCache(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mMemoryCache.put(key, bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">getBitmapFromMemCache</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMemoryCache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * load bitmap from memory cache or disk cache or network async, then bind imageView and bitmap.</span></span><br><span class="line"><span class="comment">     * NOTE THAT: should run in UI Thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri http url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageView bitmap's bind object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindBitmap</span><span class="params">(<span class="keyword">final</span> String uri, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</span><br><span class="line">        bindBitmap(uri, imageView, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindBitmap</span><span class="params">(<span class="keyword">final</span> String uri, <span class="keyword">final</span> ImageView imageView,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">int</span> reqWidth, <span class="keyword">final</span> <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">        imageView.setTag(TAG_KEY_URI, uri);</span><br><span class="line">        Bitmap bitmap = loadBitmapFromMemCache(uri);</span><br><span class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            imageView.setImageBitmap(bitmap);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Runnable loadBitmapTask = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Bitmap bitmap = loadBitmap(uri, reqWidth, reqHeight);</span><br><span class="line">                <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    LoaderResult result = <span class="keyword">new</span> LoaderResult(imageView, uri, bitmap);</span><br><span class="line">                    mMainHandler.obtainMessage(MESSAGE_POST_RESULT, result).sendToTarget();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        THREAD_POOL_EXECUTOR.execute(loadBitmapTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * load bitmap from memory cache or disk cache or network.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri http url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reqWidth the width ImageView desired</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reqHeight the height ImageView desired</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bitmap, maybe null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">loadBitmap</span><span class="params">(String uri, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">        Bitmap bitmap = loadBitmapFromMemCache(uri);</span><br><span class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"loadBitmapFromMemCache,url:"</span> + uri);</span><br><span class="line">            <span class="keyword">return</span> bitmap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bitmap = loadBitmapFromDiskCache(uri, reqWidth, reqHeight);</span><br><span class="line">            <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"loadBitmapFromDisk,url:"</span> + uri);</span><br><span class="line">                <span class="keyword">return</span> bitmap;</span><br><span class="line">            &#125;</span><br><span class="line">            bitmap = loadBitmapFromHttp(uri, reqWidth, reqHeight);</span><br><span class="line">            Log.d(TAG, <span class="string">"loadBitmapFromHttp,url:"</span> + uri);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span> &amp;&amp; !mIsDiskLruCacheCreated) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"encounter error, DiskLruCache is not created."</span>);</span><br><span class="line">            bitmap = downloadBitmapFromUrl(uri);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">loadBitmapFromMemCache</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String key = hashKeyFormUrl(url);</span><br><span class="line">        Bitmap bitmap = getBitmapFromMemCache(key);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">loadBitmapFromHttp</span><span class="params">(String url, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Looper.myLooper() == Looper.getMainLooper()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"can not visit network from UI Thread."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mDiskLruCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String key = hashKeyFormUrl(url);</span><br><span class="line">        DiskLruCache.Editor editor = mDiskLruCache.edit(key);</span><br><span class="line">        <span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            OutputStream outputStream = editor.newOutputStream(DISK_CACHE_INDEX);</span><br><span class="line">            <span class="keyword">if</span> (downloadUrlToStream(url, outputStream)) &#123;</span><br><span class="line">                editor.commit();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                editor.abort();</span><br><span class="line">            &#125;</span><br><span class="line">            mDiskLruCache.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loadBitmapFromDiskCache(url, reqWidth, reqHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">loadBitmapFromDiskCache</span><span class="params">(String url, <span class="keyword">int</span> reqWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> reqHeight)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Looper.myLooper() == Looper.getMainLooper()) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"load bitmap from UI Thread, it's not recommended!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mDiskLruCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = <span class="keyword">null</span>;</span><br><span class="line">        String key = hashKeyFormUrl(url);</span><br><span class="line">        DiskLruCache.Snapshot snapShot = mDiskLruCache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (snapShot != <span class="keyword">null</span>) &#123;</span><br><span class="line">            FileInputStream fileInputStream = (FileInputStream)snapShot.getInputStream(DISK_CACHE_INDEX);</span><br><span class="line">            FileDescriptor fileDescriptor = fileInputStream.getFD();</span><br><span class="line">            bitmap = mImageResizer.decodeSampledBitmapFromFileDescriptor(fileDescriptor,</span><br><span class="line">                    reqWidth, reqHeight);</span><br><span class="line">            <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                addBitmapToMemoryCache(key, bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">downloadUrlToStream</span><span class="params">(String urlString,</span></span></span><br><span class="line"><span class="function"><span class="params">            OutputStream outputStream)</span> </span>&#123;</span><br><span class="line">        HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        BufferedInputStream in = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> URL url = <span class="keyword">new</span> URL(urlString);</span><br><span class="line">            urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream(),</span><br><span class="line">                    IO_BUFFER_SIZE);</span><br><span class="line">            out = <span class="keyword">new</span> BufferedOutputStream(outputStream, IO_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"downloadBitmap failed."</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (urlConnection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">            MyUtils.close(out);</span><br><span class="line">            MyUtils.close(in);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">downloadBitmapFromUrl</span><span class="params">(String urlString)</span> </span>&#123;</span><br><span class="line">        Bitmap bitmap = <span class="keyword">null</span>;</span><br><span class="line">        HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">        BufferedInputStream in = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> URL url = <span class="keyword">new</span> URL(urlString);</span><br><span class="line">            urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream(),</span><br><span class="line">                    IO_BUFFER_SIZE);</span><br><span class="line">            bitmap = BitmapFactory.decodeStream(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Error in downloadBitmap: "</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (urlConnection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">            MyUtils.close(in);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">hashKeyFormUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        String cacheKey;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> MessageDigest mDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            mDigest.update(url.getBytes());</span><br><span class="line">            cacheKey = bytesToHexString(mDigest.digest());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            cacheKey = String.valueOf(url.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cacheKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">bytesToHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            String hex = Integer.toHexString(<span class="number">0xFF</span> &amp; bytes[i]);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(hex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getDiskCacheDir</span><span class="params">(Context context, String uniqueName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> externalStorageAvailable = Environment</span><br><span class="line">                .getExternalStorageState().equals(Environment.MEDIA_MOUNTED);</span><br><span class="line">        <span class="keyword">final</span> String cachePath;</span><br><span class="line">        <span class="keyword">if</span> (externalStorageAvailable) &#123;</span><br><span class="line">            cachePath = context.getExternalCacheDir().getPath();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cachePath = context.getCacheDir().getPath();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(cachePath + File.separator + uniqueName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi</span>(VERSION_CODES.GINGERBREAD)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getUsableSpace</span><span class="params">(File path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= VERSION_CODES.GINGERBREAD) &#123;</span><br><span class="line">            <span class="keyword">return</span> path.getUsableSpace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> StatFs stats = <span class="keyword">new</span> StatFs(path.getPath());</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>) stats.getBlockSize() * (<span class="keyword">long</span>) stats.getAvailableBlocks();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderResult</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> ImageView imageView;</span><br><span class="line">        <span class="keyword">public</span> String uri;</span><br><span class="line">        <span class="keyword">public</span> Bitmap bitmap;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LoaderResult</span><span class="params">(ImageView imageView, String uri, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.imageView = imageView;</span><br><span class="line">            <span class="keyword">this</span>.uri = uri;</span><br><span class="line">            <span class="keyword">this</span>.bitmap = bitmap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化列表的卡顿现象">优化列表的卡顿现象</h3><p>在一般ListView或者GridView中，使用照片墙的时候，容易出现滑动卡顿，如何优化呢，有三点建议：</p><ul><li>不要在getView中执行耗时操作。比如加载图片，肯定会导致卡顿，因为加载图片是一个耗时的操作，这种操作必须通过异步的方式来处理。</li><li>控制异步任务的执行频率。比如在异步加载图片时，用户刻意地频繁上下滑动，这就会在一瞬间产生上百个异步任务，这些异步任务会造成线程池的拥堵并随即带来大量的UI更新操作，这是没有意义的。那该如何解决呢，可以考虑在列表滑动的时候，停止加载图片，尽管这个过程是异步的，等列表停下来以后在加载图片仍然可以获得良好的用户体验。</li><li>开启硬件加速可以解决莫名的卡顿问题，通过设置android:hardwareAccelerated = &quot;true&quot;即可为Activity开启硬件加速。</li></ul>]]></content>
    
    <summary type="html">
    
      由于Bitmap的特殊性以及Android对单个应用所施加的内存限制，比如16M，这导致加载Bitmap的时候很容易出现内存溢出。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://cryallen.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android的消息机制</title>
    <link href="http://cryallen.com/2017/02/17/2017-02-17-AndroidArtChapter9/"/>
    <id>http://cryallen.com/2017/02/17/2017-02-17-AndroidArtChapter9/</id>
    <published>2017-02-17T02:07:53.000Z</published>
    <updated>2017-07-21T18:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>提到消息机制，想必大家都不陌生吧，在日常开发中不可避免要涉及到这方面的内容。从开发的角度来说，Handler是Android的消息机制的上层接口，这使得在开发过程中只需要和Handler交互即可。Handler的使用过程很简单，通过它可以轻松地将一个任务切换到Handler所在的线程中去执行。由于Android的开发规范的限制，我们并不能在子线程中访问UI控件，否则就会触发程序异常，这个时候通过Handler就可以将更新的UI的操作切换到主线程中执行，因此从本质上来来说，Handler并不是专门用于更新UI的，它只是常被开发者用来更新UI。</p><p>Android中的消息机制主要指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue翻译过来就是消息队列，它内部存储了一组消息，以队列的形式对外提供插入和删除的过程，虽然叫做消息队列，但是它内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表，Looper翻译过来就是循环，这里可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper填补了这个功能，Looper会无限循环的形式去查找是否有新的消息，如果有的话就处理消息，否则就中一直等待。Looper中还有一个特殊的概念，那就是ThreadLocal，Threadlocal并不是线程，它的作用是可以在每个线程中存储数据。</p><p>我们知道，Handler创建的时候会采用当前线程的Looper来构造消息循环系统，那么Handler内部如何获取到当前线程的Looper呢，这就要使用ThreadLocal了，ThreadLocal可以在不同的线程中互不干扰地存储并提供数据，通过ThreadLocal可以轻松获取每个线程的Looper。需要注意的是，线程是默认没有Looper的，如果需要使用Handler就必须为线程创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。</p><h3 id="android的消息机制概述">Android的消息机制概述</h3><p>我们知道Handler的主要作用是将一个任务切换到某个指定的线程中去执行，那么Android为什么要提供这个功能呢，这是因为Android规定访问UI只能在主线程中进行，如果子线程中访问UI，那么程序就会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (mThread != Thread.currentThread()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> CalledFromWrongThreadException(</span><br><span class="line">                  <span class="string">"Only the original thread that created a view hierarchy can touch its views."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这是ViewRootImpl的checkThread方法，从这段代码就可以看出，如果不在当前线程，就会抛出异常。同时呢，Android不建议在主线程中进行耗时操作， 否则会导致程序无法响应，即ANR。那么系统为什么允许在子线程中访问UI呢，这是因为Android中的UI控件并不是线程安全，它同时也延伸了Java系统中默认进程的话会产生默认的单线程习惯，当用户点击、滑动等事件操作时，UI线程是负责分发的，统一管理会更高效点，采取单线程来处理UI操作，对于开发者来说也不是很麻烦，只是需要通过Handler切换下UI访问的执行线程即可。</p><p>简单描述下Handler的工作原理，Handler创建完毕后，这个时候内部的Looper以及MessageQueue就可以和Handler一起协同工作，然后通过Handler的post方法将一个Runnable投递到Handler内部的Looper中去处理，也可以通过Handler的send方法发送一个消息，这个消息同样会在Looper中去处理。</p><h3 id="android消息机制分析">Android消息机制分析</h3><p>先看下整体的架构图：</p><figure><img src="/2017/02/17/2017-02-17-AndroidArtChapter9/HandlerLooper.jpg" alt="整体UML图"><figcaption>整体UML图</figcaption></figure><ul><li><strong>Looper</strong>有一个MessageQueue消息队列</li><li><strong>MessageQueue</strong>有一组待处理的Message</li><li><strong>Message</strong>中有一个用于处理消息的Handler</li><li><strong>Handler</strong>中有Looper和MessageQueue</li></ul><p><strong>Looper的工作原理</strong></p><p>Looper在Android的消息机制扮演着消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息过来，如果有新的消息的就会立刻处理，否则就一直阻塞在那里。首先看下它的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">      mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">      mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法中，它会创建一个MessageQueue对象，然后将当前线程的对象给保存起来。我们知道，Handler的工作需要Looper，没有Looper线程就会报错，那么如何为一个线程创建Looper呢，有以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中我们可以看出，每个线程只有一个Looper，多创建一个会报错，然后prepareMainLooper这个方法主要给主线程也就是ActivityThread创建Looper使用，其本质也是通过prepare方法来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mQueue.quit(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mQueue.quit(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looper提供了quit和quitSafely方法退出一个Looper，这两者最主要区别在于一个设定退出标记，一个是把消息队列中的已有消息处理完毕后才安全地退出。</p><p>当然还有Looper的loop方法是最核心的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">        <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">        Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">            <span class="keyword">final</span> Printer logging = me.mLogging;</span><br><span class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                        msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</span><br><span class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg.target.dispatchMessage(msg);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                    Trace.traceEnd(traceTag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">            <span class="comment">// identity of the thread wasn't corrupted.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">            <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></span><br><span class="line">                        + Long.toHexString(ident) + <span class="string">" to 0x"</span></span><br><span class="line">                        + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></span><br><span class="line">                        + msg.target.getClass().getName() + <span class="string">" "</span></span><br><span class="line">                        + msg.callback + <span class="string">" what="</span> + msg.what);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.recycleUnchecked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个也比较好理解，loop方法是一个死循环，唯一跳出循环的方式就是MessageQueue的next方法返回了null。Looper就会调用MessageQueue的quit或者quitSafely方法来通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说looper必须退出，否则loop方法就会无限循序下去。</p><p><strong>MessageQueue工作原理</strong></p><p>在Android中MessageQueue主要包含两个操作：插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一条消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除。在MessageQueue内部通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。</p><p>看下enqueueMessage代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">                Log.w(TAG, e.getMessage(), e);</span><br><span class="line">                msg.recycle();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            <span class="keyword">boolean</span> needWake;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要操作其实就是单链表的插入操作。</p><p>看下next代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">       <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">       <span class="comment">// which is not supported.</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">       <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">       <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">               Binder.flushPendingCommands();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">               Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">               Message msg = mMessages;</span><br><span class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       prevMsg = msg;</span><br><span class="line">                       msg = msg.next;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                       <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                       nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">// Got a message.</span></span><br><span class="line">                       mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           prevMsg.next = msg.next;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           mMessages = msg.next;</span><br><span class="line">                       &#125;</span><br><span class="line">                       msg.next = <span class="keyword">null</span>;</span><br><span class="line">                       <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                       msg.markInUse();</span><br><span class="line">                       <span class="keyword">return</span> msg;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// No more messages.</span></span><br><span class="line">                   nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">               <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                   dispose();</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">               <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">               <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">               <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                       &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                   pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                   mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">               &#125;</span><br><span class="line">               mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Run the idle handlers.</span></span><br><span class="line">           <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">               <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">               mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   keep = idler.queueIdle();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                   Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                       mIdleHandlers.remove(idler);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">           pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">           <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">           nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以发现next方法就是一个无限循环的方法，如果消息队列中没有消息，那么next方法就会一直阻塞在这里，当有新消息到来时，next方法会返回这条消息并将其从单链表中移除。</p><p><strong>Message</strong></p><p>每个消息用<code>Message</code>表示，<code>Message</code>主要包含以下内容：</p><table><thead><tr class="header"><th>数据类型</th><th>成员变量</th><th>解释</th></tr></thead><tbody><tr class="odd"><td>int</td><td>what</td><td>消息类别</td></tr><tr class="even"><td>long</td><td>when</td><td>消息触发时间</td></tr><tr class="odd"><td>int</td><td>arg1</td><td>参数1</td></tr><tr class="even"><td>int</td><td>arg2</td><td>参数2</td></tr><tr class="odd"><td>Object</td><td>obj</td><td>消息内容</td></tr><tr class="even"><td>Handler</td><td>target</td><td>消息响应方</td></tr><tr class="odd"><td>Runnable</td><td>callback</td><td>回调方法</td></tr></tbody></table><p>创建消息的过程，就是填充消息的上述内容的一项或多项。</p><p><strong>消息池</strong></p><p>在代码中，可能经常看到recycle()方法，咋一看，可能是在做虚拟机的gc()相关的工作，其实不然，这是用于把消息加入到消息池的作用。这样的好处是，当消息池不为空时，可以直接从消息池中获取Message对象，而不是直接创建，提高效率。</p><p>静态变量<code>sPool</code>的数据类型为Message，通过next成员变量，维护一个消息池；静态变量<code>MAX_POOL_SIZE</code>代表消息池的可用大小；消息池的默认大小为50。</p><p>消息池常用的操作方法是obtain()和recycle()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message m = sPool;</span><br><span class="line">            sPool = m.next;</span><br><span class="line">            m.next = <span class="keyword">null</span>; <span class="comment">//从sPool中取出一个Message对象，并消息链表断开</span></span><br><span class="line">            m.flags = <span class="number">0</span>; <span class="comment">// 清除in-use flag</span></span><br><span class="line">            sPoolSize--; <span class="comment">//消息池的可用大小进行减1操作</span></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message(); <span class="comment">// 当消息池为空时，直接创建Message对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obtain()，从消息池取Message，都是把消息池表头的Message取走，再把表头指向next。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isInUse()) &#123; <span class="comment">//判断消息是否正在使用</span></span><br><span class="line">        <span class="keyword">if</span> (gCheckRecycle) &#123; <span class="comment">//Android 5.0以后的版本默认为true,之前的版本默认为false.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"This message cannot be recycled because it is still in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    recycleUnchecked();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于不再使用的消息，加入到消息池</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将消息标示位置为IN_USE，并清空消息所有的参数。</span></span><br><span class="line">    flags = FLAG_IN_USE;</span><br><span class="line">    what = <span class="number">0</span>;</span><br><span class="line">    arg1 = <span class="number">0</span>;</span><br><span class="line">    arg2 = <span class="number">0</span>;</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    replyTo = <span class="keyword">null</span>;</span><br><span class="line">    sendingUid = -<span class="number">1</span>;</span><br><span class="line">    when = <span class="number">0</span>;</span><br><span class="line">    target = <span class="keyword">null</span>;</span><br><span class="line">    callback = <span class="keyword">null</span>;</span><br><span class="line">    data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123; <span class="comment">//当消息池没有满时，将Message对象加入消息池</span></span><br><span class="line">            next = sPool;</span><br><span class="line">            sPool = <span class="keyword">this</span>;</span><br><span class="line">            sPoolSize++; <span class="comment">//消息池的可用大小进行加1操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>recycle()，将Message加入到消息池的过程，都是把Message加到链表的表头。</p><p><strong>Handler工作原理</strong></p><p>Handler的工作主要包含消息的发送和接收过程。消息发送可以通过post的一系列的方法以及send的一系列方法来实现，post其实也是通过send的方法来实现的。</p><p>看下Handler的构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                klass.getCanonicalName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLooper = Looper.myLooper();</span><br><span class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mQueue = mLooper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中可以看到关联MessageQueue、Looper，所以在Handler之前Looper要prepare先，如果没有Looper的话，就会抛出“Can't create handler inside thread that has not called Looper.prepare()”这句话。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    msg.what = what;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    msg.what = what;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, uptimeMillis);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtFrontOfQueue</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">            <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从中可以看出，最终都是调用sendMessageAtTime/sendMessageAtFrontOfQueue方法，进而执行enqueueMessage方法，最终把消息发送到MessageQueue队列中。</p><figure><img src="/2017/02/17/2017-02-17-AndroidArtChapter9/sendmessage.png" alt="相关消息发送方式"><figcaption>相关消息发送方式</figcaption></figure><p>那么消息又是如何在Handler处理的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过dispatchMessage来处理消息的。</p><p><strong>ThreadLocal工作原理</strong></p><p>ThreadLocal是一个 线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说是无法获取到数据。在日常开发中用到ThreadLocal的场景很少，但是在某些特殊的场景下，通过ThreadLocal可以轻松地实现一些看起来很复杂的功能，这一点在Android源码中也有所体现，比如Looper、ActivityThread以及AMS中都用到ThreadLocal。</p><p><code>ThreadLocal.set(T value)</code>：将value存储到当前线程的TLS区域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread currentThread = Thread.currentThread(); <span class="comment">//获取当前线程</span></span><br><span class="line">    Values values = values(currentThread); <span class="comment">//查找当前线程的本地储存区</span></span><br><span class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//当线程本地存储区，尚未存储该线程相关信息时，则创建Values对象</span></span><br><span class="line">        values = initializeValues(currentThread);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存数据value到当前线程this</span></span><br><span class="line">    values.put(<span class="keyword">this</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在set方法中，首先会通过values方法来获取当前线程的ThreadLocal数据，通过put方式去获取。</p><p><code>ThreadLocal.get()</code>：获取当前线程TLS区域的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Thread currentThread = Thread.currentThread(); <span class="comment">//获取当前线程</span></span><br><span class="line">      Values values = values(currentThread); <span class="comment">//查找当前线程的本地储存区</span></span><br><span class="line">      <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">          Object[] table = values.table;</span><br><span class="line">          <span class="keyword">int</span> index = hash &amp; values.mask;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.reference == table[index]) &#123;</span><br><span class="line">              <span class="keyword">return</span> (T) table[index + <span class="number">1</span>]; <span class="comment">//返回当前线程储存区中的数据</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//创建Values对象</span></span><br><span class="line">          values = initializeValues(currentThread);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (T) values.getAfterMiss(<span class="keyword">this</span>); <span class="comment">//从目标线程存储区没有查询是则返回null</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>get方法同样是取出当前线程的localValues对象，如果这个对象为null，那么就返回初始值。</p><p>在Looper源码中，有这么一句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br></pre></td></tr></table></figure><p>从ThreadLocal的set和get方法可以看出，它们所操作的对象都是当前线程的localValues对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，它们对ThreadLocal所做的读/写操作仅限于各自线程的内部，这也就是为什么ThreadLocal可以在多个线程中互不干扰地存储和修改数据。</p><p>所以，整体来说，Handler、Looper、MessageQueue、Message这三者之间的关系如下： <img src="/2017/02/17/2017-02-17-AndroidArtChapter9/allhandler.jpg" alt="消息机制关系图"></p><h3 id="主线程的消息循环">主线程的消息循环</h3><p>Android的主线程就是ActivityThread，主线程的入口方法在main，在main方法中系统会通过Looper.prepareMainLooper方法来创建主线程的Looper以及MessageQueue，并通过Looper.loop方法来开启主线程的消息循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</span><br><span class="line">        SamplingProfilerIntegration.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></span><br><span class="line">        <span class="comment">// disable it here, but selectively enable it later (via</span></span><br><span class="line">        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></span><br><span class="line">        CloseGuard.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Environment.initForCurrentUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the reporter for event logging in libcore</span></span><br><span class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></span><br><span class="line">        <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</span><br><span class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</span><br><span class="line"></span><br><span class="line">        Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">        thread.attach(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sMainThreadHandler = thread.getHandler();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主线程的消息循环开始以后，ActivityThread还需要一个Handler来和消息队列进行交互，这个Handler就是ActivityThread.H，它内部定义了一组消息类型，主要包括了四大组件的启动和停止等过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAUNCH_ACTIVITY         = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY          = <span class="number">101</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY_FINISHING= <span class="number">102</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_SHOW      = <span class="number">103</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_HIDE      = <span class="number">104</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHOW_WINDOW             = <span class="number">105</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HIDE_WINDOW             = <span class="number">106</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESUME_ACTIVITY         = <span class="number">107</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SEND_RESULT             = <span class="number">108</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESTROY_ACTIVITY        = <span class="number">109</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BIND_APPLICATION        = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXIT_APPLICATION        = <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW_INTENT              = <span class="number">112</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECEIVER                = <span class="number">113</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CREATE_SERVICE          = <span class="number">114</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVICE_ARGS            = <span class="number">115</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_SERVICE            = <span class="number">116</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONFIGURATION_CHANGED   = <span class="number">118</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLEAN_UP_CONTEXT        = <span class="number">119</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GC_WHEN_IDLE            = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BIND_SERVICE            = <span class="number">121</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNBIND_SERVICE          = <span class="number">122</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DUMP_SERVICE            = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOW_MEMORY              = <span class="number">124</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTIVITY_CONFIGURATION_CHANGED = <span class="number">125</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RELAUNCH_ACTIVITY       = <span class="number">126</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROFILER_CONTROL        = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CREATE_BACKUP_AGENT     = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESTROY_BACKUP_AGENT    = <span class="number">129</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUICIDE                 = <span class="number">130</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOVE_PROVIDER         = <span class="number">131</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENABLE_JIT              = <span class="number">132</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DISPATCH_PACKAGE_BROADCAST = <span class="number">133</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCHEDULE_CRASH          = <span class="number">134</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DUMP_HEAP               = <span class="number">135</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DUMP_ACTIVITY           = <span class="number">136</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEPING                = <span class="number">137</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SET_CORE_SETTINGS       = <span class="number">138</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UPDATE_PACKAGE_COMPATIBILITY_INFO = <span class="number">139</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRIM_MEMORY             = <span class="number">140</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DUMP_PROVIDER           = <span class="number">141</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSTABLE_PROVIDER_DIED  = <span class="number">142</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_ASSIST_CONTEXT_EXTRAS = <span class="number">143</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSLUCENT_CONVERSION_COMPLETE = <span class="number">144</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSTALL_PROVIDER        = <span class="number">145</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ON_NEW_ACTIVITY_OPTIONS = <span class="number">146</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCEL_VISIBLE_BEHIND = <span class="number">147</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BACKGROUND_VISIBLE_BEHIND_CHANGED = <span class="number">148</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENTER_ANIMATION_COMPLETE = <span class="number">149</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START_BINDER_TRACKING = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_BINDER_TRACKING_AND_DUMP = <span class="number">151</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MULTI_WINDOW_MODE_CHANGED = <span class="number">152</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PICTURE_IN_PICTURE_MODE_CHANGED = <span class="number">153</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOCAL_VOICE_INTERACTION_STARTED = <span class="number">154</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">codeToString</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MESSAGES) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">                <span class="keyword">case</span> LAUNCH_ACTIVITY: <span class="keyword">return</span> <span class="string">"LAUNCH_ACTIVITY"</span>;</span><br><span class="line">                <span class="keyword">case</span> PAUSE_ACTIVITY: <span class="keyword">return</span> <span class="string">"PAUSE_ACTIVITY"</span>;</span><br><span class="line">                <span class="keyword">case</span> PAUSE_ACTIVITY_FINISHING: <span class="keyword">return</span> <span class="string">"PAUSE_ACTIVITY_FINISHING"</span>;</span><br><span class="line">                <span class="keyword">case</span> STOP_ACTIVITY_SHOW: <span class="keyword">return</span> <span class="string">"STOP_ACTIVITY_SHOW"</span>;</span><br><span class="line">                <span class="keyword">case</span> STOP_ACTIVITY_HIDE: <span class="keyword">return</span> <span class="string">"STOP_ACTIVITY_HIDE"</span>;</span><br><span class="line">                <span class="keyword">case</span> SHOW_WINDOW: <span class="keyword">return</span> <span class="string">"SHOW_WINDOW"</span>;</span><br><span class="line">                <span class="keyword">case</span> HIDE_WINDOW: <span class="keyword">return</span> <span class="string">"HIDE_WINDOW"</span>;</span><br><span class="line">                <span class="keyword">case</span> RESUME_ACTIVITY: <span class="keyword">return</span> <span class="string">"RESUME_ACTIVITY"</span>;</span><br><span class="line">                <span class="keyword">case</span> SEND_RESULT: <span class="keyword">return</span> <span class="string">"SEND_RESULT"</span>;</span><br><span class="line">                <span class="keyword">case</span> DESTROY_ACTIVITY: <span class="keyword">return</span> <span class="string">"DESTROY_ACTIVITY"</span>;</span><br><span class="line">                <span class="keyword">case</span> BIND_APPLICATION: <span class="keyword">return</span> <span class="string">"BIND_APPLICATION"</span>;</span><br><span class="line">                <span class="keyword">case</span> EXIT_APPLICATION: <span class="keyword">return</span> <span class="string">"EXIT_APPLICATION"</span>;</span><br><span class="line">                <span class="keyword">case</span> NEW_INTENT: <span class="keyword">return</span> <span class="string">"NEW_INTENT"</span>;</span><br><span class="line">                <span class="keyword">case</span> RECEIVER: <span class="keyword">return</span> <span class="string">"RECEIVER"</span>;</span><br><span class="line">                <span class="keyword">case</span> CREATE_SERVICE: <span class="keyword">return</span> <span class="string">"CREATE_SERVICE"</span>;</span><br><span class="line">                <span class="keyword">case</span> SERVICE_ARGS: <span class="keyword">return</span> <span class="string">"SERVICE_ARGS"</span>;</span><br><span class="line">                <span class="keyword">case</span> STOP_SERVICE: <span class="keyword">return</span> <span class="string">"STOP_SERVICE"</span>;</span><br><span class="line">                <span class="keyword">case</span> CONFIGURATION_CHANGED: <span class="keyword">return</span> <span class="string">"CONFIGURATION_CHANGED"</span>;</span><br><span class="line">                <span class="keyword">case</span> CLEAN_UP_CONTEXT: <span class="keyword">return</span> <span class="string">"CLEAN_UP_CONTEXT"</span>;</span><br><span class="line">                <span class="keyword">case</span> GC_WHEN_IDLE: <span class="keyword">return</span> <span class="string">"GC_WHEN_IDLE"</span>;</span><br><span class="line">                <span class="keyword">case</span> BIND_SERVICE: <span class="keyword">return</span> <span class="string">"BIND_SERVICE"</span>;</span><br><span class="line">                <span class="keyword">case</span> UNBIND_SERVICE: <span class="keyword">return</span> <span class="string">"UNBIND_SERVICE"</span>;</span><br><span class="line">                <span class="keyword">case</span> DUMP_SERVICE: <span class="keyword">return</span> <span class="string">"DUMP_SERVICE"</span>;</span><br><span class="line">                <span class="keyword">case</span> LOW_MEMORY: <span class="keyword">return</span> <span class="string">"LOW_MEMORY"</span>;</span><br><span class="line">                <span class="keyword">case</span> ACTIVITY_CONFIGURATION_CHANGED: <span class="keyword">return</span> <span class="string">"ACTIVITY_CONFIGURATION_CHANGED"</span>;</span><br><span class="line">                <span class="keyword">case</span> RELAUNCH_ACTIVITY: <span class="keyword">return</span> <span class="string">"RELAUNCH_ACTIVITY"</span>;</span><br><span class="line">                <span class="keyword">case</span> PROFILER_CONTROL: <span class="keyword">return</span> <span class="string">"PROFILER_CONTROL"</span>;</span><br><span class="line">                <span class="keyword">case</span> CREATE_BACKUP_AGENT: <span class="keyword">return</span> <span class="string">"CREATE_BACKUP_AGENT"</span>;</span><br><span class="line">                <span class="keyword">case</span> DESTROY_BACKUP_AGENT: <span class="keyword">return</span> <span class="string">"DESTROY_BACKUP_AGENT"</span>;</span><br><span class="line">                <span class="keyword">case</span> SUICIDE: <span class="keyword">return</span> <span class="string">"SUICIDE"</span>;</span><br><span class="line">                <span class="keyword">case</span> REMOVE_PROVIDER: <span class="keyword">return</span> <span class="string">"REMOVE_PROVIDER"</span>;</span><br><span class="line">                <span class="keyword">case</span> ENABLE_JIT: <span class="keyword">return</span> <span class="string">"ENABLE_JIT"</span>;</span><br><span class="line">                <span class="keyword">case</span> DISPATCH_PACKAGE_BROADCAST: <span class="keyword">return</span> <span class="string">"DISPATCH_PACKAGE_BROADCAST"</span>;</span><br><span class="line">                <span class="keyword">case</span> SCHEDULE_CRASH: <span class="keyword">return</span> <span class="string">"SCHEDULE_CRASH"</span>;</span><br><span class="line">                <span class="keyword">case</span> DUMP_HEAP: <span class="keyword">return</span> <span class="string">"DUMP_HEAP"</span>;</span><br><span class="line">                <span class="keyword">case</span> DUMP_ACTIVITY: <span class="keyword">return</span> <span class="string">"DUMP_ACTIVITY"</span>;</span><br><span class="line">                <span class="keyword">case</span> SLEEPING: <span class="keyword">return</span> <span class="string">"SLEEPING"</span>;</span><br><span class="line">                <span class="keyword">case</span> SET_CORE_SETTINGS: <span class="keyword">return</span> <span class="string">"SET_CORE_SETTINGS"</span>;</span><br><span class="line">                <span class="keyword">case</span> UPDATE_PACKAGE_COMPATIBILITY_INFO: <span class="keyword">return</span> <span class="string">"UPDATE_PACKAGE_COMPATIBILITY_INFO"</span>;</span><br><span class="line">                <span class="keyword">case</span> TRIM_MEMORY: <span class="keyword">return</span> <span class="string">"TRIM_MEMORY"</span>;</span><br><span class="line">                <span class="keyword">case</span> DUMP_PROVIDER: <span class="keyword">return</span> <span class="string">"DUMP_PROVIDER"</span>;</span><br><span class="line">                <span class="keyword">case</span> UNSTABLE_PROVIDER_DIED: <span class="keyword">return</span> <span class="string">"UNSTABLE_PROVIDER_DIED"</span>;</span><br><span class="line">                <span class="keyword">case</span> REQUEST_ASSIST_CONTEXT_EXTRAS: <span class="keyword">return</span> <span class="string">"REQUEST_ASSIST_CONTEXT_EXTRAS"</span>;</span><br><span class="line">                <span class="keyword">case</span> TRANSLUCENT_CONVERSION_COMPLETE: <span class="keyword">return</span> <span class="string">"TRANSLUCENT_CONVERSION_COMPLETE"</span>;</span><br><span class="line">                <span class="keyword">case</span> INSTALL_PROVIDER: <span class="keyword">return</span> <span class="string">"INSTALL_PROVIDER"</span>;</span><br><span class="line">                <span class="keyword">case</span> ON_NEW_ACTIVITY_OPTIONS: <span class="keyword">return</span> <span class="string">"ON_NEW_ACTIVITY_OPTIONS"</span>;</span><br><span class="line">                <span class="keyword">case</span> CANCEL_VISIBLE_BEHIND: <span class="keyword">return</span> <span class="string">"CANCEL_VISIBLE_BEHIND"</span>;</span><br><span class="line">                <span class="keyword">case</span> BACKGROUND_VISIBLE_BEHIND_CHANGED: <span class="keyword">return</span> <span class="string">"BACKGROUND_VISIBLE_BEHIND_CHANGED"</span>;</span><br><span class="line">                <span class="keyword">case</span> ENTER_ANIMATION_COMPLETE: <span class="keyword">return</span> <span class="string">"ENTER_ANIMATION_COMPLETE"</span>;</span><br><span class="line">                <span class="keyword">case</span> MULTI_WINDOW_MODE_CHANGED: <span class="keyword">return</span> <span class="string">"MULTI_WINDOW_MODE_CHANGED"</span>;</span><br><span class="line">                <span class="keyword">case</span> PICTURE_IN_PICTURE_MODE_CHANGED: <span class="keyword">return</span> <span class="string">"PICTURE_IN_PICTURE_MODE_CHANGED"</span>;</span><br><span class="line">                <span class="keyword">case</span> LOCAL_VOICE_INTERACTION_STARTED: <span class="keyword">return</span> <span class="string">"LOCAL_VOICE_INTERACTION_STARTED"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</span><br><span class="line">                <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</span><br><span class="line"></span><br><span class="line">                r.packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                        r.activityInfo.applicationInfo, r.compatInfo);</span><br><span class="line">                handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RELAUNCH_ACTIVITY: &#123;</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityRestart"</span>);</span><br><span class="line">                ActivityClientRecord r = (ActivityClientRecord)msg.obj;</span><br><span class="line">                handleRelaunchActivity(r);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PAUSE_ACTIVITY: &#123;</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityPause"</span>);</span><br><span class="line">                SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">                handlePauseActivity((IBinder) args.arg1, <span class="keyword">false</span>,</span><br><span class="line">                        (args.argi1 &amp; USER_LEAVING) != <span class="number">0</span>, args.argi2,</span><br><span class="line">                        (args.argi1 &amp; DONT_REPORT) != <span class="number">0</span>, args.argi3);</span><br><span class="line">                maybeSnapshot();</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PAUSE_ACTIVITY_FINISHING: &#123;</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityPause"</span>);</span><br><span class="line">                SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">                handlePauseActivity((IBinder) args.arg1, <span class="keyword">true</span>, (args.argi1 &amp; USER_LEAVING) != <span class="number">0</span>,</span><br><span class="line">                        args.argi2, (args.argi1 &amp; DONT_REPORT) != <span class="number">0</span>, args.argi3);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOP_ACTIVITY_SHOW: &#123;</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStop"</span>);</span><br><span class="line">                SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">                handleStopActivity((IBinder) args.arg1, <span class="keyword">true</span>, args.argi2, args.argi3);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOP_ACTIVITY_HIDE: &#123;</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStop"</span>);</span><br><span class="line">                SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">                handleStopActivity((IBinder) args.arg1, <span class="keyword">false</span>, args.argi2, args.argi3);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SHOW_WINDOW:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityShowWindow"</span>);</span><br><span class="line">                handleWindowVisibility((IBinder)msg.obj, <span class="keyword">true</span>);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HIDE_WINDOW:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityHideWindow"</span>);</span><br><span class="line">                handleWindowVisibility((IBinder)msg.obj, <span class="keyword">false</span>);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESUME_ACTIVITY:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityResume"</span>);</span><br><span class="line">                SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">                handleResumeActivity((IBinder) args.arg1, <span class="keyword">true</span>, args.argi1 != <span class="number">0</span>, <span class="keyword">true</span>,</span><br><span class="line">                        args.argi3, <span class="string">"RESUME_ACTIVITY"</span>);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SEND_RESULT:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityDeliverResult"</span>);</span><br><span class="line">                handleSendResult((ResultData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DESTROY_ACTIVITY:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityDestroy"</span>);</span><br><span class="line">                handleDestroyActivity((IBinder)msg.obj, msg.arg1 != <span class="number">0</span>,</span><br><span class="line">                        msg.arg2, <span class="keyword">false</span>);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BIND_APPLICATION:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"bindApplication"</span>);</span><br><span class="line">                AppBindData data = (AppBindData)msg.obj;</span><br><span class="line">                handleBindApplication(data);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> EXIT_APPLICATION:</span><br><span class="line">                <span class="keyword">if</span> (mInitialApplication != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mInitialApplication.onTerminate();</span><br><span class="line">                &#125;</span><br><span class="line">                Looper.myLooper().quit();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NEW_INTENT:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityNewIntent"</span>);</span><br><span class="line">                handleNewIntent((NewIntentData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RECEIVER:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"broadcastReceiveComp"</span>);</span><br><span class="line">                handleReceiver((ReceiverData)msg.obj);</span><br><span class="line">                maybeSnapshot();</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CREATE_SERVICE:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, (<span class="string">"serviceCreate: "</span> + String.valueOf(msg.obj)));</span><br><span class="line">                handleCreateService((CreateServiceData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BIND_SERVICE:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceBind"</span>);</span><br><span class="line">                handleBindService((BindServiceData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> UNBIND_SERVICE:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceUnbind"</span>);</span><br><span class="line">                handleUnbindService((BindServiceData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SERVICE_ARGS:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, (<span class="string">"serviceStart: "</span> + String.valueOf(msg.obj)));</span><br><span class="line">                handleServiceArgs((ServiceArgsData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOP_SERVICE:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceStop"</span>);</span><br><span class="line">                handleStopService((IBinder)msg.obj);</span><br><span class="line">                maybeSnapshot();</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CONFIGURATION_CHANGED:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"configChanged"</span>);</span><br><span class="line">                mCurDefaultDisplayDpi = ((Configuration)msg.obj).densityDpi;</span><br><span class="line">                mUpdatingSystemConfig = <span class="keyword">true</span>;</span><br><span class="line">                handleConfigurationChanged((Configuration)msg.obj, <span class="keyword">null</span>);</span><br><span class="line">                mUpdatingSystemConfig = <span class="keyword">false</span>;</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLEAN_UP_CONTEXT:</span><br><span class="line">                ContextCleanupInfo cci = (ContextCleanupInfo)msg.obj;</span><br><span class="line">                cci.context.performFinalCleanup(cci.who, cci.what);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GC_WHEN_IDLE:</span><br><span class="line">                scheduleGcIdler();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DUMP_SERVICE:</span><br><span class="line">                handleDumpService((DumpComponentInfo)msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LOW_MEMORY:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"lowMemory"</span>);</span><br><span class="line">                handleLowMemory();</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ACTIVITY_CONFIGURATION_CHANGED:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityConfigChanged"</span>);</span><br><span class="line">                handleActivityConfigurationChanged((ActivityConfigChangeData) msg.obj,</span><br><span class="line">                        msg.arg1 == <span class="number">1</span> ? REPORT_TO_ACTIVITY : !REPORT_TO_ACTIVITY);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PROFILER_CONTROL:</span><br><span class="line">                handleProfilerControl(msg.arg1 != <span class="number">0</span>, (ProfilerInfo)msg.obj, msg.arg2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CREATE_BACKUP_AGENT:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"backupCreateAgent"</span>);</span><br><span class="line">                handleCreateBackupAgent((CreateBackupAgentData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DESTROY_BACKUP_AGENT:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"backupDestroyAgent"</span>);</span><br><span class="line">                handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SUICIDE:</span><br><span class="line">                Process.killProcess(Process.myPid());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REMOVE_PROVIDER:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"providerRemove"</span>);</span><br><span class="line">                completeRemoveProvider((ProviderRefCount)msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ENABLE_JIT:</span><br><span class="line">                ensureJitEnabled();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DISPATCH_PACKAGE_BROADCAST:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"broadcastPackage"</span>);</span><br><span class="line">                handleDispatchPackageBroadcast(msg.arg1, (String[])msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SCHEDULE_CRASH:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemoteServiceException((String)msg.obj);</span><br><span class="line">            <span class="keyword">case</span> DUMP_HEAP:</span><br><span class="line">                handleDumpHeap(msg.arg1 != <span class="number">0</span>, (DumpHeapData)msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DUMP_ACTIVITY:</span><br><span class="line">                handleDumpActivity((DumpComponentInfo)msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DUMP_PROVIDER:</span><br><span class="line">                handleDumpProvider((DumpComponentInfo)msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SLEEPING:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"sleeping"</span>);</span><br><span class="line">                handleSleeping((IBinder)msg.obj, msg.arg1 != <span class="number">0</span>);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SET_CORE_SETTINGS:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"setCoreSettings"</span>);</span><br><span class="line">                handleSetCoreSettings((Bundle) msg.obj);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> UPDATE_PACKAGE_COMPATIBILITY_INFO:</span><br><span class="line">                handleUpdatePackageCompatibilityInfo((UpdateCompatibilityData)msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TRIM_MEMORY:</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"trimMemory"</span>);</span><br><span class="line">                handleTrimMemory(msg.arg1);</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> UNSTABLE_PROVIDER_DIED:</span><br><span class="line">                handleUnstableProviderDied((IBinder)msg.obj, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_ASSIST_CONTEXT_EXTRAS:</span><br><span class="line">                handleRequestAssistContextExtras((RequestAssistContextExtras)msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TRANSLUCENT_CONVERSION_COMPLETE:</span><br><span class="line">                handleTranslucentConversionComplete((IBinder)msg.obj, msg.arg1 == <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INSTALL_PROVIDER:</span><br><span class="line">                handleInstallProvider((ProviderInfo) msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_NEW_ACTIVITY_OPTIONS:</span><br><span class="line">                Pair&lt;IBinder, ActivityOptions&gt; pair = (Pair&lt;IBinder, ActivityOptions&gt;) msg.obj;</span><br><span class="line">                onNewActivityOptions(pair.first, pair.second);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CANCEL_VISIBLE_BEHIND:</span><br><span class="line">                handleCancelVisibleBehind((IBinder) msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BACKGROUND_VISIBLE_BEHIND_CHANGED:</span><br><span class="line">                handleOnBackgroundVisibleBehindChanged((IBinder) msg.obj, msg.arg1 &gt; <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ENTER_ANIMATION_COMPLETE:</span><br><span class="line">                handleEnterAnimationComplete((IBinder) msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> START_BINDER_TRACKING:</span><br><span class="line">                handleStartBinderTracking();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOP_BINDER_TRACKING_AND_DUMP:</span><br><span class="line">                handleStopBinderTrackingAndDump((ParcelFileDescriptor) msg.obj);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MULTI_WINDOW_MODE_CHANGED:</span><br><span class="line">                handleMultiWindowModeChanged((IBinder) msg.obj, msg.arg1 == <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PICTURE_IN_PICTURE_MODE_CHANGED:</span><br><span class="line">                handlePictureInPictureModeChanged((IBinder) msg.obj, msg.arg1 == <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LOCAL_VOICE_INTERACTION_STARTED:</span><br><span class="line">                handleLocalVoiceInteractionStarted((IBinder) ((SomeArgs) msg.obj).arg1,</span><br><span class="line">                        (IVoiceInteractor) ((SomeArgs) msg.obj).arg2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object obj = msg.obj;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> SomeArgs) &#123;</span><br><span class="line">            ((SomeArgs) obj).recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&lt;&lt;&lt; done: "</span> + codeToString(msg.what));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ActivityThread通过ApplicationThread和AMS进行进程间通信，AMS以进程间通信的方式完成ActivityThread的请求回调ApplicationThread中Binder方法然后ApplicationThread向H发送消息，H收到消息后会将ApplicationThread的逻辑切换到ActivityThread中去执行，即切换到主线程中去执行，整个过程就是主线程的消息循环模型。</p><h3 id="handlerthread">HandlerThread</h3><p>HandlerThread类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mPriority;</span><br><span class="line">    <span class="keyword">int</span> mTid = -<span class="number">1</span>;</span><br><span class="line">    Looper mLooper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the thread has been started, wait until the looper has been created.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quit();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quitSafely();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the identifier of this thread. See Process.myTid().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThreadId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到HandlerThread继承于Thread类，在获取Looper对象时候，当线程已经启动，则等待直到looper创建完成才能获取，从本质上看HandlerThread是对Thread的封装，主要用途在于多个线程的通信，会有同步的问题，那么Android对此直接提供了HandlerThread类。</p><p><strong>HandlerThread实战</strong></p><p>在HandlerThread线程中运行Loop()方法，在其他线程中通过Handler发送消息到HandlerThread线程。通过wait/notifyAll的方式，有效地解决了多线程的同步问题。从源码中我们也可以看到当looper没获取成功就会阻塞，然后有运行完就会去唤醒所有阻塞的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step 1: 创建并启动HandlerThread线程，内部包含Looper</span></span><br><span class="line">HandlerThread handlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"test"</span>);</span><br><span class="line">handlerThread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: 创建Handler</span></span><br><span class="line">Handler handler = <span class="keyword">new</span> Handler(handlerThread.getLooper());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: 发送消息</span></span><br><span class="line">handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"thread id="</span>+Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Android的中消息机制，其实跟windows里运行机制差不多，有消息队列，消息循环，消息监听。
    
    </summary>
    
    
      <category term="Android" scheme="http://cryallen.com/categories/Andorid/"/>
    
    
      <category term="Android" scheme="http://cryallen.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://cryallen.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
